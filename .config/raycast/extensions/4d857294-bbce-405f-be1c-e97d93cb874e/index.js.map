{
  "version": 3,
  "sources": ["../node_modules/dayjs/dayjs.min.js", "../node_modules/dayjs/plugin/quarterOfYear.js", "../src/index.tsx", "../node_modules/chrono-node/src/utils/pattern.ts", "../node_modules/chrono-node/src/calculation/years.ts", "../node_modules/chrono-node/src/locales/en/constants.ts", "../node_modules/chrono-node/src/results.ts", "../node_modules/chrono-node/src/utils/dayjs.ts", "../node_modules/chrono-node/src/timezone.ts", "../node_modules/chrono-node/src/common/parsers/AbstractParserWithWordBoundary.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitWithinFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameLittleEndianParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameMiddleEndianParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualYearMonthDayParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENSlashMonthFormatParser.ts", "../node_modules/chrono-node/src/common/parsers/AbstractTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeExpressionParser.ts", "../node_modules/chrono-node/src/utils/timeunits.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitAgoFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitLaterFormatParser.ts", "../node_modules/chrono-node/src/common/abstractRefiners.ts", "../node_modules/chrono-node/src/common/refiners/AbstractMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/calculation/mergingCalculation.ts", "../node_modules/chrono-node/src/common/refiners/AbstractMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ExtractTimezoneAbbrRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ExtractTimezoneOffsetRefiner.ts", "../node_modules/chrono-node/src/common/refiners/OverlapRemovalRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ForwardDateRefiner.ts", "../node_modules/chrono-node/src/common/refiners/UnlikelyFormatFilter.ts", "../node_modules/chrono-node/src/common/parsers/ISOFormatParser.ts", "../node_modules/chrono-node/src/common/refiners/MergeWeekdayComponentRefiner.ts", "../node_modules/chrono-node/src/configurations.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualDateParser.ts", "../node_modules/chrono-node/src/common/casualReferences.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualTimeParser.ts", "../node_modules/chrono-node/src/common/calculation/weekdays.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENWeekdayParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENRelativeDateFormatParser.ts", "../node_modules/chrono-node/src/chrono.ts", "../node_modules/chrono-node/src/common/parsers/SlashDateFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeRelativeDateRefiner.ts", "../node_modules/chrono-node/src/locales/en/index.ts", "../node_modules/chrono-node/src/index.ts", "../node_modules/relative-time-format/source/LocaleDataStore.js", "../node_modules/relative-time-format/source/resolveLocale.js", "../node_modules/relative-time-format/source/PluralRuleFunctions.js", "../node_modules/relative-time-format/source/getPluralRulesLocale.js", "../node_modules/relative-time-format/source/PluralRules.js", "../node_modules/relative-time-format/source/RelativeTimeFormat.js", "../node_modules/javascript-time-ago/source/cache.js", "../node_modules/javascript-time-ago/source/locale.js", "../node_modules/javascript-time-ago/source/isStyleObject.js", "../node_modules/javascript-time-ago/source/steps/units.js", "../node_modules/javascript-time-ago/source/steps/getStepDenominator.js", "../node_modules/javascript-time-ago/source/round.js", "../node_modules/javascript-time-ago/source/steps/getStepMinTime.js", "../node_modules/javascript-time-ago/source/steps/getStep.js", "../node_modules/javascript-time-ago/source/steps/getTimeToNextUpdateForUnit.js", "../node_modules/javascript-time-ago/source/steps/getTimeToNextUpdate.js", "../node_modules/javascript-time-ago/source/LocaleDataStore.js", "../node_modules/javascript-time-ago/source/steps/round.js", "../node_modules/javascript-time-ago/source/style/round.js", "../node_modules/javascript-time-ago/source/style/roundMinute.js", "../node_modules/javascript-time-ago/source/steps/approximate.js", "../node_modules/javascript-time-ago/source/style/approximate.js", "../node_modules/javascript-time-ago/source/style/approximateTime.js", "../node_modules/javascript-time-ago/source/steps/helpers.js", "../node_modules/javascript-time-ago/source/style/twitter.js", "../node_modules/javascript-time-ago/source/style/twitterNow.js", "../node_modules/javascript-time-ago/source/style/twitterMinute.js", "../node_modules/javascript-time-ago/source/style/twitterMinuteNow.js", "../node_modules/javascript-time-ago/source/style/twitterFirstMinute.js", "../node_modules/javascript-time-ago/source/style/mini.js", "../node_modules/javascript-time-ago/source/style/miniNow.js", "../node_modules/javascript-time-ago/source/style/miniMinute.js", "../node_modules/javascript-time-ago/source/style/miniMinuteNow.js", "../node_modules/javascript-time-ago/source/style/getStyleByName.js", "../node_modules/javascript-time-ago/locale/en.json.js"],
  "sourcesContent": ["!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?l(1,0):l(31,11);case f:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,l=this;r=Number(r);var $=O.p(h),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===f)return this.set(f,this.$M+r);if($===c)return this.set(c,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},$={YY:String(this.$y).slice(-2),YYYY:O.s(this.$y,4,\"0\"),M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||$[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,v=this-M,g=O.m(this,M);return g=($={},$[c]=g/12,$[f]=g,$[h]=g/3,$[o]=(v-m)/6048e5,$[a]=(v-m)/864e5,$[u]=v/n,$[s]=v/e,$[i]=v/t,$)[y]||v,l?g:O.a(g)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));", "!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs_plugin_quarterOfYear=n()}(this,(function(){\"use strict\";var t=\"month\",n=\"quarter\";return function(e,i){var r=i.prototype;r.quarter=function(t){return this.$utils().u(t)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(t-1))};var s=r.add;r.add=function(e,i){return e=Number(e),this.$utils().p(i)===n?this.add(3*e,t):s.bind(this)(e,i)};var u=r.startOf;r.startOf=function(e,i){var r=this.$utils(),s=!!r.u(i)||i;if(r.p(e)===n){var o=this.quarter()-1;return s?this.month(3*o).startOf(t).startOf(\"day\"):this.month(3*o+2).endOf(t).endOf(\"day\")}return u.bind(this)(e,i)}}}));", "import { Clipboard, ActionPanel, List, Action, getPreferenceValues } from \"@raycast/api\";\nimport * as chrono from \"chrono-node\";\nimport { useMemo, useState } from \"react\";\nimport \"@total-typescript/ts-reset\";\nimport TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en\";\n\nTimeAgo.addDefaultLocale(en);\nconst timeAgo = new TimeAgo(\"en-US\");\n\ninterface LabeledDate {\n  label?: string;\n  human: boolean;\n  date: Date;\n}\n\ninterface DateFormatter {\n  id: string;\n  title: string;\n  human: boolean;\n  format: (date: Date) => string;\n}\n\ninterface Preferences {\n  defaultFormat: string;\n  copyAction: \"copy\" | \"paste\" | \"both\";\n  hour24: boolean;\n}\n\nconst humanFormatter = new Intl.DateTimeFormat(undefined, {\n  dateStyle: \"full\",\n  timeStyle: \"medium\",\n  hour12: !getPreferenceValues<Preferences>().hour24,\n});\n\nconst DATE_FORMATS: DateFormatter[] = [\n  {\n    id: \"human\",\n    title: \"Human Date\",\n    human: true,\n    format: (date) => humanFormatter.format(date),\n  },\n  {\n    id: \"unix-ms\",\n    title: \"Unix Timestamp (ms)\",\n    human: false,\n    format: (date) => date.getTime().toString(),\n  },\n  {\n    id: \"unix-s\",\n    title: \"Unix Timestamp (seconds)\",\n    human: false,\n    format: (date) => Math.floor(date.getTime() / 1000).toString(),\n  },\n  {\n    id: \"iso\",\n    title: \"ISO Date\",\n    human: false,\n    format: (date) => date.toISOString(),\n  },\n];\n\nfunction isHex(query: string) {\n  return /^0x[0-9a-f]+$/i.test(query);\n}\n\nfunction parseMachineReadableDate(query: string): LabeledDate | undefined {\n  const parsedDate = new Date(query);\n  const isIso = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(query);\n  if (!isNaN(parsedDate.getTime()) && isIso) {\n    return {\n      date: parsedDate,\n      label: \"ISO Date\",\n      human: false,\n    };\n  }\n\n  const isNanoSecondTimestamp = /^\\d{19}$/.test(query);\n  if (isNanoSecondTimestamp) {\n    return {\n      date: new Date(Number(BigInt(query) / 1_000_000n)),\n      label: \"Unix Timestamp (ns)\",\n      human: false,\n    };\n  }\n  const isMicroSecondTimestamp = /^\\d{16}$/.test(query);\n  if (isMicroSecondTimestamp) {\n    return {\n      date: new Date(Number(BigInt(query) / 1_000n)),\n      label: \"Unix Timestamp (\u03BCs)\",\n      human: false,\n    };\n  }\n\n  let base = 10;\n  if (isHex(query)) {\n    base = 16;\n  }\n\n  let timestamp = parseInt(query, base);\n\n  if (!isNaN(timestamp) && timestamp > 1000000) {\n    let seconds = false;\n    if (timestamp <= 2 ** 31) {\n      seconds = true;\n      timestamp *= 1000;\n    }\n    const date = new Date(timestamp || query);\n    if (!isNaN(date.getTime())) {\n      return {\n        date,\n        label: seconds ? \"Unix Timestamp (seconds)\" : \"Unix Timestamp (ms)\",\n        human: false,\n      };\n    }\n  }\n}\n\nfunction getResults(query: string): LabeledDate[] {\n  if (!query) {\n    return [\n      {\n        label: \"Now\",\n        date: new Date(),\n      },\n      {\n        label: \"Today\",\n        date: new Date().setHours(0, 0, 0, 0),\n      },\n      {\n        label: \"Tomorrow\",\n        date: new Date().setHours(0, 0, 0, 0) + 24 * 60 * 60 * 1000,\n      },\n      {\n        label: \"Yesterday\",\n        date: new Date().setHours(0, 0, 0, 0) - 24 * 60 * 60 * 1000,\n      },\n    ].map((x) => ({\n      label: x.label,\n      human: true,\n      date: new Date(x.date),\n    }));\n  }\n\n  query = query.trim();\n\n  const machine = parseMachineReadableDate(query);\n  const human = chrono.parse(query).map((x) => ({ date: x.date(), human: true, label: x.text }));\n\n  return [machine, ...human].filter(Boolean).filter((x, i, arr) => {\n    const date = x.date.toISOString();\n    return arr.findIndex((y) => y.date.toISOString() === date) === i;\n  });\n}\n\nfunction copy(text: string) {\n  const { copyAction } = getPreferenceValues<Preferences>();\n\n  if ([\"copy\", \"both\"].includes(copyAction)) {\n    Clipboard.copy(text);\n  }\n  if ([\"paste\", \"both\"].includes(copyAction)) {\n    Clipboard.paste(text);\n  }\n}\n\nfunction getSortedFormats({ human }: Pick<LabeledDate, \"human\">): DateFormatter[] {\n  const { defaultFormat } = getPreferenceValues<Preferences>();\n\n  return DATE_FORMATS.sort((a, b) => {\n    const aMatchesType = a.human === human;\n    const bMatchesType = b.human === human;\n\n    // Sort the opposite type first\n    if (aMatchesType && !bMatchesType) return 1;\n    if (!aMatchesType && bMatchesType) return -1;\n\n    const aIsPreferred = a.id === defaultFormat;\n    const bIsPreferred = b.id === defaultFormat;\n\n    // Sort the preferred format first\n    if (aIsPreferred && !bIsPreferred) return -1;\n    if (!aIsPreferred && bIsPreferred) return 1;\n\n    return 0;\n  });\n}\n\nexport default function Command() {\n  const [searchText, setSearchText] = useState(\"\");\n\n  const results = useMemo(() => getResults(searchText), [searchText]);\n\n  return (\n    <List\n      searchText={searchText}\n      onSearchTextChange={setSearchText}\n      searchBarPlaceholder=\"Enter a human or machine readable date\"\n    >\n      <List.EmptyView title=\"Invalid Date\" description=\"Failed to parse your date in a human or machine format.\" />\n      {results.map(({ date, label, human }) => (\n        <List.Item\n          key={date.toISOString()}\n          title={humanFormatter.format(date)}\n          subtitle={`${label} - ${timeAgo.format(date)}`}\n          actions={\n            <ActionPanel>\n              {getSortedFormats({ human }).map(({ id, title, format }) => (\n                <Action key={id} title={`Copy as ${title}`} onAction={() => copy(format(date))} />\n              ))}\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n", "type DictionaryLike = string[] | { [word: string]: unknown } | Map<string, unknown>;\n\nexport function repeatedTimeunitPattern(prefix: string, singleTimeunitPattern: string): string {\n    const singleTimeunitPatternNoCapture = singleTimeunitPattern.replace(/\\((?!\\?)/g, \"(?:\");\n    return `${prefix}${singleTimeunitPatternNoCapture}\\\\s{0,5}(?:,?\\\\s{0,5}${singleTimeunitPatternNoCapture}){0,10}`;\n}\n\nexport function extractTerms(dictionary: DictionaryLike): string[] {\n    let keys: string[];\n    if (dictionary instanceof Array) {\n        keys = [...dictionary];\n    } else if (dictionary instanceof Map) {\n        keys = Array.from((dictionary as Map<string, unknown>).keys());\n    } else {\n        keys = Object.keys(dictionary);\n    }\n\n    return keys;\n}\n\nexport function matchAnyPattern(dictionary: DictionaryLike): string {\n    // TODO: More efficient regex pattern by considering duplicated prefix\n\n    const joinedTerms = extractTerms(dictionary)\n        .sort((a, b) => b.length - a.length)\n        .join(\"|\")\n        .replace(/\\./g, \"\\\\.\");\n\n    return `(?:${joinedTerms})`;\n}\n", "import dayjs from \"dayjs\";\n\n/**\n * Find the most likely year, from a raw number. For example:\n * 1997 => 1997\n * 97 => 1997\n * 12 => 2012\n */\nexport function findMostLikelyADYear(yearNumber: number): number {\n    if (yearNumber < 100) {\n        if (yearNumber > 50) {\n            yearNumber = yearNumber + 1900;\n        } else {\n            yearNumber = yearNumber + 2000;\n        }\n    }\n\n    return yearNumber;\n}\n\nexport function findYearClosestToRef(refDate: Date, day: number, month: number): number {\n    //Find the most appropriated year\n    const refMoment = dayjs(refDate);\n    let dateMoment = refMoment;\n    dateMoment = dateMoment.month(month - 1);\n    dateMoment = dateMoment.date(day);\n    dateMoment = dateMoment.year(refMoment.year());\n\n    const nextYear = dateMoment.add(1, \"y\");\n    const lastYear = dateMoment.add(-1, \"y\");\n    if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = nextYear;\n    } else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = lastYear;\n    }\n\n    return dateMoment.year();\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\nimport { Weekday } from \"../../index\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: Weekday } = {\n    sunday: 0,\n    sun: 0,\n    \"sun.\": 0,\n    monday: 1,\n    mon: 1,\n    \"mon.\": 1,\n    tuesday: 2,\n    tue: 2,\n    \"tue.\": 2,\n    wednesday: 3,\n    wed: 3,\n    \"wed.\": 3,\n    thursday: 4,\n    thurs: 4,\n    \"thurs.\": 4,\n    thur: 4,\n    \"thur.\": 4,\n    thu: 4,\n    \"thu.\": 4,\n    friday: 5,\n    fri: 5,\n    \"fri.\": 5,\n    saturday: 6,\n    sat: 6,\n    \"sat.\": 6,\n};\n\nexport const FULL_MONTH_NAME_DICTIONARY: { [word: string]: number } = {\n    january: 1,\n    february: 2,\n    march: 3,\n    april: 4,\n    may: 5,\n    june: 6,\n    july: 7,\n    august: 8,\n    september: 9,\n    october: 10,\n    november: 11,\n    december: 12,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    ...FULL_MONTH_NAME_DICTIONARY,\n    jan: 1,\n    \"jan.\": 1,\n    feb: 2,\n    \"feb.\": 2,\n    mar: 3,\n    \"mar.\": 3,\n    apr: 4,\n    \"apr.\": 4,\n    jun: 6,\n    \"jun.\": 6,\n    jul: 7,\n    \"jul.\": 7,\n    aug: 8,\n    \"aug.\": 8,\n    sep: 9,\n    \"sep.\": 9,\n    sept: 9,\n    \"sept.\": 9,\n    oct: 10,\n    \"oct.\": 10,\n    nov: 11,\n    \"nov.\": 11,\n    dec: 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    twentieth: 20,\n    \"twenty first\": 21,\n    \"twenty-first\": 21,\n    \"twenty second\": 22,\n    \"twenty-second\": 22,\n    \"twenty third\": 23,\n    \"twenty-third\": 23,\n    \"twenty fourth\": 24,\n    \"twenty-fourth\": 24,\n    \"twenty fifth\": 25,\n    \"twenty-fifth\": 25,\n    \"twenty sixth\": 26,\n    \"twenty-sixth\": 26,\n    \"twenty seventh\": 27,\n    \"twenty-seventh\": 27,\n    \"twenty eighth\": 28,\n    \"twenty-eighth\": 28,\n    \"twenty ninth\": 29,\n    \"twenty-ninth\": 29,\n    \"thirtieth\": 30,\n    \"thirty first\": 31,\n    \"thirty-first\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY_NO_ABBR: { [word: string]: OpUnitType | QUnitType } = {\n    second: \"second\",\n    seconds: \"second\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    hour: \"hour\",\n    hours: \"hour\",\n    day: \"d\",\n    days: \"d\",\n    week: \"week\",\n    weeks: \"week\",\n    month: \"month\",\n    months: \"month\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    year: \"year\",\n    years: \"year\",\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    s: \"second\",\n    sec: \"second\",\n    second: \"second\",\n    seconds: \"second\",\n    m: \"minute\",\n    min: \"minute\",\n    mins: \"minute\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    h: \"hour\",\n    hr: \"hour\",\n    hrs: \"hour\",\n    hour: \"hour\",\n    hours: \"hour\",\n    d: \"d\",\n    day: \"d\",\n    days: \"d\",\n    w: \"w\",\n    week: \"week\",\n    weeks: \"week\",\n    mo: \"month\",\n    mon: \"month\",\n    mos: \"month\",\n    month: \"month\",\n    months: \"month\",\n    qtr: \"quarter\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    y: \"year\",\n    yr: \"year\",\n    year: \"year\",\n    years: \"year\",\n    // Also, merge the entries from the full-name dictionary.\n    // We leave the duplicated entries for readability.\n    ...TIME_UNIT_DICTIONARY_NO_ABBR,\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s{0,2}an?)?|an?\\\\b(?:\\\\s{0,2}few)?|few|several|the|a?\\\\s{0,2}couple\\\\s{0,2}(?:of)?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"a\" || num === \"an\" || num == \"the\") {\n        return 1;\n    } else if (num.match(/few/)) {\n        return 3;\n    } else if (num.match(/half/)) {\n        return 0.5;\n    } else if (num.match(/couple/)) {\n        return 2;\n    } else if (num.match(/several/)) {\n        return 7;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n\n    num = num.replace(/(?:st|nd|rd|th)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9])`;\nexport function parseYear(match: string): number {\n    if (/BE/i.test(match)) {\n        // Buddhist Era\n        match = match.replace(/BE/i, \"\");\n        return parseInt(match) - 543;\n    }\n\n    if (/BCE?/i.test(match)) {\n        // Before Christ, Before Common Era\n        match = match.replace(/BCE?/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/(AD|CE)/i.test(match)) {\n        // Anno Domini, Common Era\n        match = match.replace(/(AD|CE)/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nconst SINGLE_TIME_UNIT_NO_ABBR_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(\n    TIME_UNIT_DICTIONARY_NO_ABBR\n)})`;\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(`(?:(?:about|around)\\\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);\nexport const TIME_UNITS_NO_ABBR_PATTERN = repeatedTimeunitPattern(\n    `(?:(?:about|around)\\\\s{0,3})?`,\n    SINGLE_TIME_UNIT_NO_ABBR_PATTERN\n);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length).trim();\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n", "import { Component, ParsedComponents, ParsedResult, ParsingReference } from \"./index\";\n\nimport quarterOfYear from \"dayjs/plugin/quarterOfYear\";\nimport dayjs, { QUnitType } from \"dayjs\";\nimport { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"./utils/dayjs\";\nimport { toTimezoneOffset } from \"./timezone\";\ndayjs.extend(quarterOfYear);\n\nexport class ReferenceWithTimezone {\n    readonly instant: Date;\n    readonly timezoneOffset?: number | null;\n\n    constructor(input?: ParsingReference | Date) {\n        input = input ?? new Date();\n        if (input instanceof Date) {\n            this.instant = input;\n        } else {\n            this.instant = input.instant ?? new Date();\n            this.timezoneOffset = toTimezoneOffset(input.timezone, this.instant);\n        }\n    }\n\n    /**\n     * Returns a JS date (system timezone) with the { year, month, day, hour, minute, second } equal to the reference.\n     * The output's instant is NOT the reference's instant when the reference's and system's timezone are different.\n     */\n    getDateWithAdjustedTimezone() {\n        return new Date(this.instant.getTime() + this.getSystemTimezoneAdjustmentMinute(this.instant) * 60000);\n    }\n\n    /**\n     * Returns the number minutes difference between the JS date's timezone and the reference timezone.\n     * @param date\n     * @param overrideTimezoneOffset\n     */\n    getSystemTimezoneAdjustmentMinute(date?: Date, overrideTimezoneOffset?: number): number {\n        if (!date || date.getTime() < 0) {\n            // Javascript date timezone calculation got effect when the time epoch < 0\n            // e.g. new Date('Tue Feb 02 1300 00:00:00 GMT+0900 (JST)') => Tue Feb 02 1300 00:18:59 GMT+0918 (JST)\n            date = new Date();\n        }\n\n        const currentTimezoneOffset = -date.getTimezoneOffset();\n        const targetTimezoneOffset = overrideTimezoneOffset ?? this.timezoneOffset ?? currentTimezoneOffset;\n        return currentTimezoneOffset - targetTimezoneOffset;\n    }\n}\n\nexport class ParsingComponents implements ParsedComponents {\n    private knownValues: { [c in Component]?: number };\n    private impliedValues: { [c in Component]?: number };\n    private reference: ReferenceWithTimezone;\n\n    constructor(reference: ReferenceWithTimezone, knownComponents?: { [c in Component]?: number }) {\n        this.reference = reference;\n        this.knownValues = {};\n        this.impliedValues = {};\n        if (knownComponents) {\n            for (const key in knownComponents) {\n                this.knownValues[key as Component] = knownComponents[key as Component];\n            }\n        }\n\n        const refDayJs = dayjs(reference.instant);\n        this.imply(\"day\", refDayJs.date());\n        this.imply(\"month\", refDayJs.month() + 1);\n        this.imply(\"year\", refDayJs.year());\n        this.imply(\"hour\", 12);\n        this.imply(\"minute\", 0);\n        this.imply(\"second\", 0);\n        this.imply(\"millisecond\", 0);\n    }\n\n    get(component: Component): number | null {\n        if (component in this.knownValues) {\n            return this.knownValues[component];\n        }\n\n        if (component in this.impliedValues) {\n            return this.impliedValues[component];\n        }\n\n        return null;\n    }\n\n    isCertain(component: Component): boolean {\n        return component in this.knownValues;\n    }\n\n    getCertainComponents(): Array<Component> {\n        return Object.keys(this.knownValues) as Array<Component>;\n    }\n\n    imply(component: Component, value: number): ParsingComponents {\n        if (component in this.knownValues) {\n            return this;\n        }\n        this.impliedValues[component] = value;\n        return this;\n    }\n\n    assign(component: Component, value: number): ParsingComponents {\n        this.knownValues[component] = value;\n        delete this.impliedValues[component];\n        return this;\n    }\n\n    delete(component: Component) {\n        delete this.knownValues[component];\n        delete this.impliedValues[component];\n    }\n\n    clone(): ParsingComponents {\n        const component = new ParsingComponents(this.reference);\n        component.knownValues = {};\n        component.impliedValues = {};\n\n        for (const key in this.knownValues) {\n            component.knownValues[key as Component] = this.knownValues[key as Component];\n        }\n\n        for (const key in this.impliedValues) {\n            component.impliedValues[key as Component] = this.impliedValues[key as Component];\n        }\n\n        return component;\n    }\n\n    isOnlyDate(): boolean {\n        return !this.isCertain(\"hour\") && !this.isCertain(\"minute\") && !this.isCertain(\"second\");\n    }\n\n    isOnlyTime(): boolean {\n        return !this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isOnlyWeekdayComponent(): boolean {\n        return this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isDateWithUnknownYear(): boolean {\n        return this.isCertain(\"month\") && !this.isCertain(\"year\");\n    }\n\n    isValidDate(): boolean {\n        const date = this.dateWithoutTimezoneAdjustment();\n\n        if (date.getFullYear() !== this.get(\"year\")) return false;\n        if (date.getMonth() !== this.get(\"month\") - 1) return false;\n        if (date.getDate() !== this.get(\"day\")) return false;\n        if (this.get(\"hour\") != null && date.getHours() != this.get(\"hour\")) return false;\n        if (this.get(\"minute\") != null && date.getMinutes() != this.get(\"minute\")) return false;\n\n        return true;\n    }\n\n    toString() {\n        return `[ParsingComponents {knownValues: ${JSON.stringify(this.knownValues)}, impliedValues: ${JSON.stringify(\n            this.impliedValues\n        )}}, reference: ${JSON.stringify(this.reference)}]`;\n    }\n\n    dayjs() {\n        return dayjs(this.date());\n    }\n\n    date(): Date {\n        const date = this.dateWithoutTimezoneAdjustment();\n        const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get(\"timezoneOffset\"));\n        return new Date(date.getTime() + timezoneAdjustment * 60000);\n    }\n\n    private dateWithoutTimezoneAdjustment() {\n        const date = new Date(\n            this.get(\"year\"),\n            this.get(\"month\") - 1,\n            this.get(\"day\"),\n            this.get(\"hour\"),\n            this.get(\"minute\"),\n            this.get(\"second\"),\n            this.get(\"millisecond\")\n        );\n\n        date.setFullYear(this.get(\"year\"));\n        return date;\n    }\n\n    static createRelativeFromReference(\n        reference: ReferenceWithTimezone,\n        fragments: { [c in QUnitType]?: number }\n    ): ParsingComponents {\n        let date = dayjs(reference.instant);\n        for (const key in fragments) {\n            date = date.add(fragments[key as QUnitType], key as QUnitType);\n        }\n\n        const components = new ParsingComponents(reference);\n        if (fragments[\"hour\"] || fragments[\"minute\"] || fragments[\"second\"]) {\n            assignSimilarTime(components, date);\n            assignSimilarDate(components, date);\n            if (reference.timezoneOffset !== null) {\n                components.assign(\"timezoneOffset\", -reference.instant.getTimezoneOffset());\n            }\n        } else {\n            implySimilarTime(components, date);\n            if (reference.timezoneOffset !== null) {\n                components.imply(\"timezoneOffset\", -reference.instant.getTimezoneOffset());\n            }\n\n            if (fragments[\"d\"]) {\n                components.assign(\"day\", date.date());\n                components.assign(\"month\", date.month() + 1);\n                components.assign(\"year\", date.year());\n            } else {\n                if (fragments[\"week\"]) {\n                    components.imply(\"weekday\", date.day());\n                }\n\n                components.imply(\"day\", date.date());\n                if (fragments[\"month\"]) {\n                    components.assign(\"month\", date.month() + 1);\n                    components.assign(\"year\", date.year());\n                } else {\n                    components.imply(\"month\", date.month() + 1);\n                    if (fragments[\"year\"]) {\n                        components.assign(\"year\", date.year());\n                    } else {\n                        components.imply(\"year\", date.year());\n                    }\n                }\n            }\n        }\n\n        return components;\n    }\n}\n\nexport class ParsingResult implements ParsedResult {\n    refDate: Date;\n    index: number;\n    text: string;\n\n    reference: ReferenceWithTimezone;\n\n    start: ParsingComponents;\n    end?: ParsingComponents;\n\n    constructor(\n        reference: ReferenceWithTimezone,\n        index: number,\n        text: string,\n        start?: ParsingComponents,\n        end?: ParsingComponents\n    ) {\n        this.reference = reference;\n        this.refDate = reference.instant;\n        this.index = index;\n        this.text = text;\n        this.start = start || new ParsingComponents(reference);\n        this.end = end;\n    }\n\n    clone() {\n        const result = new ParsingResult(this.reference, this.index, this.text);\n        result.start = this.start ? this.start.clone() : null;\n        result.end = this.end ? this.end.clone() : null;\n        return result;\n    }\n\n    date(): Date {\n        return this.start.date();\n    }\n\n    toString() {\n        return `[ParsingResult {index: ${this.index}, text: '${this.text}', ...}]`;\n    }\n}\n", "import { ParsingComponents } from \"../results\";\nimport dayjs from \"dayjs\";\nimport { Meridiem } from \"../index\";\n\nexport function assignTheNextDay(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    targetDayJs = targetDayJs.add(1, \"day\");\n    assignSimilarDate(component, targetDayJs);\n    implySimilarTime(component, targetDayJs);\n}\n\nexport function implyTheNextDay(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    targetDayJs = targetDayJs.add(1, \"day\");\n    implySimilarDate(component, targetDayJs);\n    implySimilarTime(component, targetDayJs);\n}\n\nexport function assignSimilarDate(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.assign(\"day\", targetDayJs.date());\n    component.assign(\"month\", targetDayJs.month() + 1);\n    component.assign(\"year\", targetDayJs.year());\n}\n\nexport function assignSimilarTime(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.assign(\"hour\", targetDayJs.hour());\n    component.assign(\"minute\", targetDayJs.minute());\n    component.assign(\"second\", targetDayJs.second());\n    component.assign(\"millisecond\", targetDayJs.millisecond());\n    if (component.get(\"hour\") < 12) {\n        component.assign(\"meridiem\", Meridiem.AM);\n    } else {\n        component.assign(\"meridiem\", Meridiem.PM);\n    }\n}\n\nexport function implySimilarDate(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.imply(\"day\", targetDayJs.date());\n    component.imply(\"month\", targetDayJs.month() + 1);\n    component.imply(\"year\", targetDayJs.year());\n}\n\nexport function implySimilarTime(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.imply(\"hour\", targetDayJs.hour());\n    component.imply(\"minute\", targetDayJs.minute());\n    component.imply(\"second\", targetDayJs.second());\n    component.imply(\"millisecond\", targetDayJs.millisecond());\n}\n", "import dayjs from \"dayjs\";\nimport { TimezoneAbbrMap, Weekday, Month } from \"./index\";\n\nexport const TIMEZONE_ABBR_MAP: TimezoneAbbrMap = {\n    ACDT: 630,\n    ACST: 570,\n    ADT: -180,\n    AEDT: 660,\n    AEST: 600,\n    AFT: 270,\n    AKDT: -480,\n    AKST: -540,\n    ALMT: 360,\n    AMST: -180,\n    AMT: -240,\n    ANAST: 720,\n    ANAT: 720,\n    AQTT: 300,\n    ART: -180,\n    AST: -240,\n    AWDT: 540,\n    AWST: 480,\n    AZOST: 0,\n    AZOT: -60,\n    AZST: 300,\n    AZT: 240,\n    BNT: 480,\n    BOT: -240,\n    BRST: -120,\n    BRT: -180,\n    BST: 60,\n    BTT: 360,\n    CAST: 480,\n    CAT: 120,\n    CCT: 390,\n    CDT: -300,\n    CEST: 120,\n    // Note: Many sources define CET as a constant UTC+1. In common usage, however,\n    // CET usually refers to the time observed in most of Europe, be it standard time or daylight saving time.\n    CET: {\n        timezoneOffsetDuringDst: 2 * 60,\n        timezoneOffsetNonDst: 60,\n        dstStart: (year: number) => getLastWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2),\n        dstEnd: (year: number) => getLastWeekdayOfMonth(year, Month.OCTOBER, Weekday.SUNDAY, 3),\n    },\n    CHADT: 825,\n    CHAST: 765,\n    CKT: -600,\n    CLST: -180,\n    CLT: -240,\n    COT: -300,\n    CST: -360,\n    CT: {\n        timezoneOffsetDuringDst: -5 * 60,\n        timezoneOffsetNonDst: -6 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    CVT: -60,\n    CXT: 420,\n    ChST: 600,\n    DAVT: 420,\n    EASST: -300,\n    EAST: -360,\n    EAT: 180,\n    ECT: -300,\n    EDT: -240,\n    EEST: 180,\n    EET: 120,\n    EGST: 0,\n    EGT: -60,\n    EST: -300,\n    ET: {\n        timezoneOffsetDuringDst: -4 * 60,\n        timezoneOffsetNonDst: -5 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    FJST: 780,\n    FJT: 720,\n    FKST: -180,\n    FKT: -240,\n    FNT: -120,\n    GALT: -360,\n    GAMT: -540,\n    GET: 240,\n    GFT: -180,\n    GILT: 720,\n    GMT: 0,\n    GST: 240,\n    GYT: -240,\n    HAA: -180,\n    HAC: -300,\n    HADT: -540,\n    HAE: -240,\n    HAP: -420,\n    HAR: -360,\n    HAST: -600,\n    HAT: -90,\n    HAY: -480,\n    HKT: 480,\n    HLV: -210,\n    HNA: -240,\n    HNC: -360,\n    HNE: -300,\n    HNP: -480,\n    HNR: -420,\n    HNT: -150,\n    HNY: -540,\n    HOVT: 420,\n    ICT: 420,\n    IDT: 180,\n    IOT: 360,\n    IRDT: 270,\n    IRKST: 540,\n    IRKT: 540,\n    IRST: 210,\n    IST: 330,\n    JST: 540,\n    KGT: 360,\n    KRAST: 480,\n    KRAT: 480,\n    KST: 540,\n    KUYT: 240,\n    LHDT: 660,\n    LHST: 630,\n    LINT: 840,\n    MAGST: 720,\n    MAGT: 720,\n    MART: -510,\n    MAWT: 300,\n    MDT: -360,\n    MESZ: 120,\n    MEZ: 60,\n    MHT: 720,\n    MMT: 390,\n    MSD: 240,\n    MSK: 180,\n    MST: -420,\n    MT: {\n        timezoneOffsetDuringDst: -6 * 60,\n        timezoneOffsetNonDst: -7 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    MUT: 240,\n    MVT: 300,\n    MYT: 480,\n    NCT: 660,\n    NDT: -90,\n    NFT: 690,\n    NOVST: 420,\n    NOVT: 360,\n    NPT: 345,\n    NST: -150,\n    NUT: -660,\n    NZDT: 780,\n    NZST: 720,\n    OMSST: 420,\n    OMST: 420,\n    PDT: -420,\n    PET: -300,\n    PETST: 720,\n    PETT: 720,\n    PGT: 600,\n    PHOT: 780,\n    PHT: 480,\n    PKT: 300,\n    PMDT: -120,\n    PMST: -180,\n    PONT: 660,\n    PST: -480,\n    PT: {\n        timezoneOffsetDuringDst: -7 * 60,\n        timezoneOffsetNonDst: -8 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    PWT: 540,\n    PYST: -180,\n    PYT: -240,\n    RET: 240,\n    SAMT: 240,\n    SAST: 120,\n    SBT: 660,\n    SCT: 240,\n    SGT: 480,\n    SRT: -180,\n    SST: -660,\n    TAHT: -600,\n    TFT: 300,\n    TJT: 300,\n    TKT: 780,\n    TLT: 540,\n    TMT: 300,\n    TVT: 720,\n    ULAT: 480,\n    UTC: 0,\n    UYST: -120,\n    UYT: -180,\n    UZT: 300,\n    VET: -210,\n    VLAST: 660,\n    VLAT: 660,\n    VUT: 660,\n    WAST: 120,\n    WAT: 60,\n    WEST: 60,\n    WESZ: 60,\n    WET: 0,\n    WEZ: 0,\n    WFT: 720,\n    WGST: -120,\n    WGT: -180,\n    WIB: 420,\n    WIT: 540,\n    WITA: 480,\n    WST: 780,\n    WT: 0,\n    YAKST: 600,\n    YAKT: 600,\n    YAPT: 600,\n    YEKST: 360,\n    YEKT: 360,\n};\n\n/**\n * Get the date which is the nth occurence of a given weekday in a given month and year.\n *\n * @param year The year for which to find the date\n * @param month The month in which the date occurs\n * @param weekday The weekday on which the date occurs\n * @param n The nth occurence of the given weekday on the month to return\n * @param hour The hour of day which should be set on the returned date\n * @return The date which is the nth occurence of a given weekday in a given\n *         month and year, at the given hour of day\n */\nexport function getNthWeekdayOfMonth(year: number, month: Month, weekday: Weekday, n: 1 | 2 | 3 | 4, hour = 0): Date {\n    let dayOfMonth = 0;\n    let i = 0;\n    while (i < n) {\n        dayOfMonth++;\n        const date = new Date(year, month - 1, dayOfMonth);\n        if (date.getDay() === weekday) i++;\n    }\n    return new Date(year, month - 1, dayOfMonth, hour);\n}\n\n/**\n * Get the date which is the last occurence of a given weekday in a given month and year.\n *\n * @param year The year for which to find the date\n * @param month The month in which the date occurs\n * @param weekday The weekday on which the date occurs\n * @param hour The hour of day which should be set on the returned date\n * @return The date which is the last occurence of a given weekday in a given\n *         month and year, at the given hour of day\n */\nexport function getLastWeekdayOfMonth(year: number, month: Month, weekday: Weekday, hour = 0): Date {\n    // Procedure: Find the first weekday of the next month, compare with the given weekday,\n    // and use the difference to determine how many days to subtract from the first of the next month.\n    const oneIndexedWeekday = weekday === 0 ? 7 : weekday;\n    const date = new Date(year, month - 1 + 1, 1, 12);\n    const firstWeekdayNextMonth = date.getDay() === 0 ? 7 : date.getDay();\n    let dayDiff;\n    if (firstWeekdayNextMonth === oneIndexedWeekday) dayDiff = 7;\n    else if (firstWeekdayNextMonth < oneIndexedWeekday) dayDiff = 7 + firstWeekdayNextMonth - oneIndexedWeekday;\n    else dayDiff = firstWeekdayNextMonth - oneIndexedWeekday;\n    date.setDate(date.getDate() - dayDiff);\n    return new Date(year, month - 1, date.getDate(), hour);\n}\n\n/**\n * Finds and returns timezone offset. If timezoneInput is numeric, it is returned. Otherwise, look for timezone offsets\n * in the following order: timezoneOverrides -> {@link TIMEZONE_ABBR_MAP}.\n *\n * @param timezoneInput Uppercase timezone abbreviation or numeric offset in minutes\n * @param date The date to use to determine whether to return DST offsets for ambiguous timezones\n * @param timezoneOverrides Overrides for timezones\n * @return timezone offset in minutes\n */\nexport function toTimezoneOffset(\n    timezoneInput?: string | number,\n    date?: Date,\n    timezoneOverrides: TimezoneAbbrMap = {}\n): number | null {\n    if (timezoneInput == null) {\n        return null;\n    }\n\n    if (typeof timezoneInput === \"number\") {\n        return timezoneInput;\n    }\n\n    const matchedTimezone = timezoneOverrides[timezoneInput] ?? TIMEZONE_ABBR_MAP[timezoneInput];\n    if (matchedTimezone == null) {\n        return null;\n    }\n    // This means that we have matched an unambiguous timezone\n    if (typeof matchedTimezone == \"number\") {\n        return matchedTimezone;\n    }\n\n    // The matched timezone is an ambiguous timezone, where the offset depends on whether the context (refDate)\n    // is during daylight savings or not.\n\n    // Without refDate as context, there's no way to know if DST or non-DST offset should be used. Return null instead.\n    if (date == null) {\n        return null;\n    }\n\n    // Return DST offset if the refDate is during daylight savings\n    if (\n        dayjs(date).isAfter(matchedTimezone.dstStart(date.getFullYear())) &&\n        !dayjs(date).isAfter(matchedTimezone.dstEnd(date.getFullYear()))\n    ) {\n        return matchedTimezone.timezoneOffsetDuringDst;\n    }\n\n    // refDate is not during DST => return non-DST offset\n    return matchedTimezone.timezoneOffsetNonDst;\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../results\";\nimport { Component } from \"../../index\";\n\n/**\n *\n */\nexport abstract class AbstractParserWithWordBoundaryChecking implements Parser {\n    abstract innerPattern(context: ParsingContext): RegExp;\n    abstract innerExtract(\n        context: ParsingContext,\n        match: RegExpMatchArray\n    ): ParsingComponents | ParsingResult | { [c in Component]?: number } | null;\n\n    private cachedInnerPattern?: RegExp = null;\n    private cachedPattern?: RegExp = null;\n\n    patternLeftBoundary(): string {\n        return `(\\\\W|^)`;\n    }\n\n    pattern(context: ParsingContext): RegExp {\n        const innerPattern = this.innerPattern(context);\n        if (innerPattern == this.cachedInnerPattern) {\n            return this.cachedPattern;\n        }\n\n        this.cachedPattern = new RegExp(`${this.patternLeftBoundary()}${innerPattern.source}`, innerPattern.flags);\n        this.cachedInnerPattern = innerPattern;\n        return this.cachedPattern;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const header = match[1] ?? \"\";\n        match.index = match.index + header.length;\n        match[0] = match[0].substring(header.length);\n        for (let i = 2; i < match.length; i++) {\n            match[i - 1] = match[i];\n        }\n\n        return this.innerExtract(context, match);\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN_WITHOUT_PREFIX = new RegExp(\n    `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PATTERN_WITH_PREFIX = new RegExp(\n    `(?:within|in|for)\\\\s*` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PATTERN_WITH_PREFIX_STRICT = new RegExp(\n    `(?:within|in|for)\\\\s*` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(context: ParsingContext): RegExp {\n        if (this.strictMode) {\n            return PATTERN_WITH_PREFIX_STRICT;\n        }\n        return context.option.forwardDate ? PATTERN_WITHOUT_PREFIX : PATTERN_WITH_PREFIX;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const timeUnits = parseTimeUnits(match[1]);\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingResult } from \"../../../results\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    `(?:on\\\\s{0,3})?` +\n        `(${ORDINAL_NUMBER_PATTERN})` +\n        `(?:` +\n            `\\\\s{0,3}(?:to|\\\\-|\\\\\u2013|until|through|till)?\\\\s{0,3}` +\n            `(${ORDINAL_NUMBER_PATTERN})` +\n        \")?\" +\n        `(?:-|/|\\\\s{0,3}(?:of)?\\\\s{0,3})` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        \"(?:\" +\n            `(?:-|/|,?\\\\s{0,3})` +\n            `(${YEAR_PATTERN}(?![^\\\\s]\\\\d))` +\n        \")?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\n\nexport default class ENMonthNameLittleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n\n        if (match[YEAR_GROUP]) {\n            const yearNumber = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        \"(?:-|/|\\\\s*,?\\\\s*)\" +\n        `(${ORDINAL_NUMBER_PATTERN})(?!\\\\s*(?:am|pm))\\\\s*` +\n        \"(?:\" +\n        \"(?:to|\\\\-)\\\\s*\" +\n        `(${ORDINAL_NUMBER_PATTERN})\\\\s*` +\n        \")?\" +\n        \"(?:\" +\n        \"(?:-|/|\\\\s*,?\\\\s*)\" +\n        `(${YEAR_PATTERN})` +\n        \")?\" +\n        \"(?=\\\\W|$)(?!\\\\:\\\\d)\",\n    \"i\"\n);\n\nconst MONTH_NAME_GROUP = 1;\nconst DATE_GROUP = 2;\nconst DATE_TO_GROUP = 3;\nconst YEAR_GROUP = 4;\n\n/**\n * The parser for parsing US's date format that begin with month's name.\n *  - January 13\n *  - January 13, 2012\n *  - January 13 - 15, 2012\n * Note: Watch out for:\n *  - January 12:00\n *  - January 12.44\n *  - January 1222344\n */\nexport default class ENMonthNameMiddleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            return null;\n        }\n\n        const components = context.createParsingComponents({\n            day: day,\n            month: month,\n        });\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            components.imply(\"year\", year);\n        }\n\n        if (!match[DATE_TO_GROUP]) {\n            return components;\n        }\n\n        // Text can be 'range' value. Such as 'January 12 - 13, 2012'\n        const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n        const result = context.createParsingResult(match.index, match[0]);\n        result.start = components;\n        result.end = components.clone();\n        result.end.assign(\"day\", endDate);\n\n        return result;\n    }\n}\n", "import { FULL_MONTH_NAME_DICTIONARY, MONTH_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `((?:in)\\\\s*)?` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `\\\\s*` +\n        `(?:` +\n        `[,-]?\\\\s*(${YEAR_PATTERN})?` +\n        \")?\" +\n        \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst YEAR_GROUP = 3;\n\n/**\n * The parser for parsing month name and year.\n * - January, 2012\n * - January 2012\n * - January\n * (in) Jan\n */\nexport default class ENMonthNameParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const monthName = match[MONTH_NAME_GROUP].toLowerCase();\n\n        // skip some unlikely words \"jan\", \"mar\", ..\n        if (match[0].length <= 3 && !FULL_MONTH_NAME_DICTIONARY[monthName]) {\n            return null;\n        }\n\n        const result = context.createParsingResult(\n            match.index + (match[PREFIX_GROUP] || \"\").length,\n            match.index + match[0].length\n        );\n        result.start.imply(\"day\", 1);\n\n        const month = MONTH_DICTIONARY[monthName];\n        result.start.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, 1, month);\n            result.start.imply(\"year\", year);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date.\n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nconst PATTERN = new RegExp(\n    `([0-9]{4})[\\\\.\\\\/\\\\s]` +\n        `(?:(${matchAnyPattern(MONTH_DICTIONARY)})|([0-9]{1,2}))[\\\\.\\\\/\\\\s]` +\n        `([0-9]{1,2})` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst MONTH_NUMBER_GROUP = 3;\nconst DATE_NUMBER_GROUP = 4;\n\nexport default class ENCasualYearMonthDayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = match[MONTH_NUMBER_GROUP]\n            ? parseInt(match[MONTH_NUMBER_GROUP])\n            : MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n\n        if (month < 1 || month > 12) {\n            return null;\n        }\n\n        const year = parseInt(match[YEAR_NUMBER_GROUP]);\n        const day = parseInt(match[DATE_NUMBER_GROUP]);\n\n        return {\n            day: day,\n            month: month,\n            year: year,\n        };\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\"([0-9]|0[1-9]|1[012])/([0-9]{4})\" + \"\", \"i\");\n\nconst MONTH_GROUP = 1;\nconst YEAR_GROUP = 2;\n\n/**\n * Month/Year date format with slash \"/\" (also \"-\" and \".\") between numbers\n * - 11/05\n * - 06/2005\n */\nexport default class ENSlashMonthFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const year = parseInt(match[YEAR_GROUP]);\n        const month = parseInt(match[MONTH_GROUP]);\n\n        return context.createParsingComponents().imply(\"day\", 1).assign(\"month\", month).assign(\"year\", year);\n    }\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../results\";\nimport { Meridiem } from \"../../index\";\n\n// prettier-ignore\nfunction primaryTimePattern(leftBoundary: string, primaryPrefix: string, primarySuffix: string, flags: string) {\n    return new RegExp(\n            `${leftBoundary}` +\n            `${primaryPrefix}` +\n            `(\\\\d{1,4})` +\n            `(?:` +\n                `(?:\\\\.|:|\uFF1A)` +\n                `(\\\\d{1,2})` +\n                `(?:` +\n                    `(?::|\uFF1A)` +\n                    `(\\\\d{2})` +\n                    `(?:\\\\.(\\\\d{1,6}))?` +\n                `)?` +\n            `)?` +\n            `(?:\\\\s*(a\\\\.m\\\\.|p\\\\.m\\\\.|am?|pm?))?` +\n            `${primarySuffix}`,\n        flags\n    );\n}\n\n// prettier-ignore\nfunction followingTimePatten(followingPhase: string, followingSuffix: string) {\n    return new RegExp(\n        `^(${followingPhase})` +\n            `(\\\\d{1,4})` +\n            `(?:` +\n                `(?:\\\\.|\\\\:|\\\\\uFF1A)` +\n                `(\\\\d{1,2})` +\n                `(?:` +\n                    `(?:\\\\.|\\\\:|\\\\\uFF1A)` +\n                    `(\\\\d{1,2})(?:\\\\.(\\\\d{1,6}))?` +\n                `)?` +\n            `)?` +\n            `(?:\\\\s*(a\\\\.m\\\\.|p\\\\.m\\\\.|am?|pm?))?` +\n            `${followingSuffix}`,\n        \"i\"\n    );\n}\n\nconst HOUR_GROUP = 2;\nconst MINUTE_GROUP = 3;\nconst SECOND_GROUP = 4;\nconst MILLI_SECOND_GROUP = 5;\nconst AM_PM_HOUR_GROUP = 6;\n\nexport abstract class AbstractTimeExpressionParser implements Parser {\n    abstract primaryPrefix(): string;\n    abstract followingPhase(): string;\n    strictMode: boolean;\n\n    constructor(strictMode = false) {\n        this.strictMode = strictMode;\n    }\n\n    patternFlags(): string {\n        return \"i\";\n    }\n\n    primaryPatternLeftBoundary(): string {\n        return `(^|\\\\s|T|\\\\b)`;\n    }\n\n    primarySuffix(): string {\n        return `(?=\\\\W|$)`;\n    }\n\n    followingSuffix(): string {\n        return `(?=\\\\W|$)`;\n    }\n\n    pattern(context: ParsingContext): RegExp {\n        return this.getPrimaryTimePatternThroughCache();\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const startComponents = this.extractPrimaryTimeComponents(context, match);\n        if (!startComponents) {\n            match.index += match[0].length; // Skip over potential overlapping pattern\n            return null;\n        }\n\n        const index = match.index + match[1].length;\n        const text = match[0].substring(match[1].length);\n        const result = context.createParsingResult(index, text, startComponents);\n        match.index += match[0].length; // Skip over potential overlapping pattern\n\n        const remainingText = context.text.substring(match.index);\n        const followingPattern = this.getFollowingTimePatternThroughCache();\n        const followingMatch = followingPattern.exec(remainingText);\n\n        // Pattern \"456-12\", \"2022-12\" should not be time without proper context\n        if (text.match(/^\\d{3,4}/) && followingMatch && followingMatch[0].match(/^\\s*([+-])\\s*\\d{2,4}$/)) {\n            return null;\n        }\n\n        if (\n            !followingMatch ||\n            // Pattern \"YY.YY -XXXX\" is more like timezone offset\n            followingMatch[0].match(/^\\s*([+-])\\s*\\d{3,4}$/)\n        ) {\n            return this.checkAndReturnWithoutFollowingPattern(result);\n        }\n\n        result.end = this.extractFollowingTimeComponents(context, followingMatch, result);\n        if (result.end) {\n            result.text += followingMatch[0];\n        }\n\n        return this.checkAndReturnWithFollowingPattern(result);\n    }\n\n    extractPrimaryTimeComponents(\n        context: ParsingContext,\n        match: RegExpMatchArray,\n        strict = false\n    ): null | ParsingComponents {\n        const components = context.createParsingComponents();\n        let minute = 0;\n        let meridiem = null;\n\n        // ----- Hours\n        let hour = parseInt(match[HOUR_GROUP]);\n        if (hour > 100) {\n            if (this.strictMode || match[MINUTE_GROUP] != null) {\n                return null;\n            }\n\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP] != null) {\n            if (match[MINUTE_GROUP].length == 1 && !match[AM_PM_HOUR_GROUP]) {\n                // Skip single digit minute e.g. \"at 1.1 xx\"\n                return null;\n            }\n\n            minute = parseInt(match[MINUTE_GROUP]);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) return null;\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                }\n            }\n\n            if (ampm == \"p\") {\n                meridiem = Meridiem.PM;\n                if (hour != 12) {\n                    hour += 12;\n                }\n            }\n        }\n\n        components.assign(\"hour\", hour);\n        components.assign(\"minute\", minute);\n\n        if (meridiem !== null) {\n            components.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                components.imply(\"meridiem\", Meridiem.AM);\n            } else {\n                components.imply(\"meridiem\", Meridiem.PM);\n            }\n        }\n\n        // ----- Millisecond\n        if (match[MILLI_SECOND_GROUP] != null) {\n            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));\n            if (millisecond >= 1000) return null;\n\n            components.assign(\"millisecond\", millisecond);\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            components.assign(\"second\", second);\n        }\n\n        return components;\n    }\n\n    extractFollowingTimeComponents(\n        context: ParsingContext,\n        match: RegExpMatchArray,\n        result: ParsingResult\n    ): null | ParsingComponents {\n        const components = context.createParsingComponents();\n\n        // ----- Millisecond\n        if (match[MILLI_SECOND_GROUP] != null) {\n            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));\n            if (millisecond >= 1000) return null;\n\n            components.assign(\"millisecond\", millisecond);\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            components.assign(\"second\", second);\n        }\n\n        let hour = parseInt(match[HOUR_GROUP]);\n        let minute = 0;\n        let meridiem = -1;\n\n        // ----- Minute\n        if (match[MINUTE_GROUP] != null) {\n            minute = parseInt(match[MINUTE_GROUP]);\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60 || hour > 24) {\n            return null;\n        }\n\n        if (hour >= 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) {\n                return null;\n            }\n\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                    if (!components.isCertain(\"day\")) {\n                        components.imply(\"day\", components.get(\"day\") + 1);\n                    }\n                }\n            }\n\n            if (ampm == \"p\") {\n                meridiem = Meridiem.PM;\n                if (hour != 12) hour += 12;\n            }\n\n            if (!result.start.isCertain(\"meridiem\")) {\n                if (meridiem == Meridiem.AM) {\n                    result.start.imply(\"meridiem\", Meridiem.AM);\n\n                    if (result.start.get(\"hour\") == 12) {\n                        result.start.assign(\"hour\", 0);\n                    }\n                } else {\n                    result.start.imply(\"meridiem\", Meridiem.PM);\n\n                    if (result.start.get(\"hour\") != 12) {\n                        result.start.assign(\"hour\", result.start.get(\"hour\") + 12);\n                    }\n                }\n            }\n        }\n\n        components.assign(\"hour\", hour);\n        components.assign(\"minute\", minute);\n\n        if (meridiem >= 0) {\n            components.assign(\"meridiem\", meridiem);\n        } else {\n            const startAtPM = result.start.isCertain(\"meridiem\") && result.start.get(\"hour\") > 12;\n            if (startAtPM) {\n                if (result.start.get(\"hour\") - 12 > hour) {\n                    // 10pm - 1 (am)\n                    components.imply(\"meridiem\", Meridiem.AM);\n                } else if (hour <= 12) {\n                    components.assign(\"hour\", hour + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                }\n            } else if (hour > 12) {\n                components.imply(\"meridiem\", Meridiem.PM);\n            } else if (hour <= 12) {\n                components.imply(\"meridiem\", Meridiem.AM);\n            }\n        }\n\n        if (components.date().getTime() < result.start.date().getTime()) {\n            components.imply(\"day\", components.get(\"day\") + 1);\n        }\n\n        return components;\n    }\n\n    private checkAndReturnWithoutFollowingPattern(result) {\n        // Single digit (e.g \"1\") should not be counted as time expression (without proper context)\n        if (result.text.match(/^\\d$/)) {\n            return null;\n        }\n\n        // Three or more digit (e.g. \"203\", \"2014\") should not be counted as time expression (without proper context)\n        if (result.text.match(/^\\d\\d\\d+$/)) {\n            return null;\n        }\n\n        // Instead of \"am/pm\", it ends with \"a\" or \"p\" (e.g \"1a\", \"123p\"), this seems unlikely\n        if (result.text.match(/\\d[apAP]$/)) {\n            return null;\n        }\n\n        // If it ends only with numbers or dots\n        const endingWithNumbers = result.text.match(/[^\\d:.](\\d[\\d.]+)$/);\n        if (endingWithNumbers) {\n            const endingNumbers: string = endingWithNumbers[1];\n\n            // In strict mode (e.g. \"at 1\" or \"at 1.2\"), this should not be accepted\n            if (this.strictMode) {\n                return null;\n            }\n\n            // If it ends only with dot single digit, e.g. \"at 1.2\"\n            if (endingNumbers.includes(\".\") && !endingNumbers.match(/\\d(\\.\\d{2})+$/)) {\n                return null;\n            }\n\n            // If it ends only with numbers above 24, e.g. \"at 25\"\n            const endingNumberVal = parseInt(endingNumbers);\n            if (endingNumberVal > 24) {\n                return null;\n            }\n        }\n\n        return result;\n    }\n\n    private checkAndReturnWithFollowingPattern(result) {\n        if (result.text.match(/^\\d+-\\d+$/)) {\n            return null;\n        }\n\n        // If it ends only with numbers or dots\n        const endingWithNumbers = result.text.match(/[^\\d:.](\\d[\\d.]+)\\s*-\\s*(\\d[\\d.]+)$/);\n        if (endingWithNumbers) {\n            // In strict mode (e.g. \"at 1-3\" or \"at 1.2 - 2.3\"), this should not be accepted\n            if (this.strictMode) {\n                return null;\n            }\n\n            const startingNumbers: string = endingWithNumbers[1];\n            const endingNumbers: string = endingWithNumbers[2];\n            // If it ends only with dot single digit, e.g. \"at 1.2\"\n            if (endingNumbers.includes(\".\") && !endingNumbers.match(/\\d(\\.\\d{2})+$/)) {\n                return null;\n            }\n\n            // If it ends only with numbers above 24, e.g. \"at 25\"\n            const endingNumberVal = parseInt(endingNumbers);\n            const startingNumberVal = parseInt(startingNumbers);\n            if (endingNumberVal > 24 || startingNumberVal > 24) {\n                return null;\n            }\n        }\n\n        return result;\n    }\n\n    private cachedPrimaryPrefix = null;\n    private cachedPrimarySuffix = null;\n    private cachedPrimaryTimePattern = null;\n\n    getPrimaryTimePatternThroughCache() {\n        const primaryPrefix = this.primaryPrefix();\n        const primarySuffix = this.primarySuffix();\n\n        if (this.cachedPrimaryPrefix === primaryPrefix && this.cachedPrimarySuffix === primarySuffix) {\n            return this.cachedPrimaryTimePattern;\n        }\n\n        this.cachedPrimaryTimePattern = primaryTimePattern(\n            this.primaryPatternLeftBoundary(),\n            primaryPrefix,\n            primarySuffix,\n            this.patternFlags()\n        );\n        this.cachedPrimaryPrefix = primaryPrefix;\n        this.cachedPrimarySuffix = primarySuffix;\n        return this.cachedPrimaryTimePattern;\n    }\n\n    private cachedFollowingPhase = null;\n    private cachedFollowingSuffix = null;\n    private cachedFollowingTimePatten = null;\n\n    getFollowingTimePatternThroughCache() {\n        const followingPhase = this.followingPhase();\n        const followingSuffix = this.followingSuffix();\n\n        if (this.cachedFollowingPhase === followingPhase && this.cachedFollowingSuffix === followingSuffix) {\n            return this.cachedFollowingTimePatten;\n        }\n\n        this.cachedFollowingTimePatten = followingTimePatten(followingPhase, followingSuffix);\n        this.cachedFollowingPhase = followingPhase;\n        this.cachedFollowingSuffix = followingSuffix;\n        return this.cachedFollowingTimePatten;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { Meridiem } from \"../../../index\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\n\nexport default class ENTimeExpressionParser extends AbstractTimeExpressionParser {\n    constructor(strictMode) {\n        super(strictMode);\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|to|until|through|till|\\\\?)\\\\s*\";\n    }\n\n    primaryPrefix(): string {\n        return \"(?:(?:at|from)\\\\s*)??\";\n    }\n\n    primarySuffix(): string {\n        return \"(?:\\\\s*(?:o\\\\W*clock|at\\\\s*night|in\\\\s*the\\\\s*(?:morning|afternoon)))?(?!/)(?=\\\\W|$)\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): null | ParsingComponents {\n        const components = super.extractPrimaryTimeComponents(context, match);\n        if (components) {\n            if (match[0].endsWith(\"night\")) {\n                const hour = components.get(\"hour\");\n                if (hour >= 6 && hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                } else if (hour < 6) {\n                    components.assign(\"meridiem\", Meridiem.AM);\n                }\n            }\n\n            if (match[0].endsWith(\"afternoon\")) {\n                components.assign(\"meridiem\", Meridiem.PM);\n                const hour = components.get(\"hour\");\n                if (hour >= 0 && hour <= 6) {\n                    components.assign(\"hour\", components.get(\"hour\") + 12);\n                }\n            }\n\n            if (match[0].endsWith(\"morning\")) {\n                components.assign(\"meridiem\", Meridiem.AM);\n                const hour = components.get(\"hour\");\n                if (hour < 12) {\n                    components.assign(\"hour\", components.get(\"hour\"));\n                }\n            }\n        }\n\n        return components;\n    }\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { ParsingComponents } from \"../results\";\n\nexport type TimeUnits = { [c in OpUnitType | QUnitType]?: number };\n\nexport function reverseTimeUnits(timeUnits: TimeUnits): TimeUnits {\n    const reversed = {};\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop\n        reversed[key] = -timeUnits[key];\n    }\n\n    return reversed as TimeUnits;\n}\n\nexport function addImpliedTimeUnits(components: ParsingComponents, timeUnits: TimeUnits): ParsingComponents {\n    const output = components.clone();\n\n    let date = components.dayjs();\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop,TypeScriptValidateTypes\n        date = date.add(timeUnits[key], key as QUnitType);\n    }\n\n    if (\"day\" in timeUnits || \"d\" in timeUnits || \"week\" in timeUnits || \"month\" in timeUnits || \"year\" in timeUnits) {\n        output.imply(\"day\", date.date());\n        output.imply(\"month\", date.month() + 1);\n        output.imply(\"year\", date.year());\n    }\n\n    if (\"second\" in timeUnits || \"minute\" in timeUnits || \"hour\" in timeUnits) {\n        output.imply(\"second\", date.second());\n        output.imply(\"minute\", date.minute());\n        output.imply(\"hour\", date.hour());\n    }\n\n    return output;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(${TIME_UNITS_PATTERN})\\\\s{0,5}(?:ago|before|earlier)(?=\\\\W|$)`, \"i\");\nconst STRICT_PATTERN = new RegExp(`(${TIME_UNITS_NO_ABBR_PATTERN})\\\\s{0,5}(?:ago|before|earlier)(?=\\\\W|$)`, \"i\");\n\nexport default class ENTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const timeUnits = parseTimeUnits(match[1]);\n        const outputTimeUnits = reverseTimeUnits(timeUnits);\n\n        return ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `(${TIME_UNITS_PATTERN})\\\\s{0,5}(?:later|after|from now|henceforth|forward|out)` + \"(?=(?:\\\\W|$))\",\n    \"i\"\n);\n\nconst STRICT_PATTERN = new RegExp(\n    \"\" + \"(\" + TIME_UNITS_NO_ABBR_PATTERN + \")\" + \"(later|from now)\" + \"(?=(?:\\\\W|$))\",\n    \"i\"\n);\nconst GROUP_NUM_TIMEUNITS = 1;\n\nexport default class ENTimeUnitLaterFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const fragments = parseTimeUnits(match[GROUP_NUM_TIMEUNITS]);\n        return ParsingComponents.createRelativeFromReference(context.reference, fragments);\n    }\n}\n", "import { ParsingContext, Refiner } from \"../chrono\";\nimport { ParsingResult } from \"../results\";\n\n/**\n * A special type of {@link Refiner} to filter the results\n */\nexport abstract class Filter implements Refiner {\n    abstract isValid(context: ParsingContext, result: ParsingResult): boolean;\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        return results.filter((r) => this.isValid(context, r));\n    }\n}\n\n/**\n * A special type of {@link Refiner} to merge consecutive results\n */\nexport abstract class MergingRefiner implements Refiner {\n    abstract shouldMergeResults(\n        textBetween: string,\n        currentResult: ParsingResult,\n        nextResult: ParsingResult,\n        context: ParsingContext\n    ): boolean;\n\n    abstract mergeResults(\n        textBetween: string,\n        currentResult: ParsingResult,\n        nextResult: ParsingResult,\n        context: ParsingContext\n    ): ParsingResult;\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (results.length < 2) {\n            return results;\n        }\n\n        const mergedResults: ParsingResult[] = [];\n        let curResult = results[0];\n        let nextResult = null;\n\n        for (let i = 1; i < results.length; i++) {\n            nextResult = results[i];\n\n            const textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);\n            if (!this.shouldMergeResults(textBetween, curResult, nextResult, context)) {\n                mergedResults.push(curResult);\n                curResult = nextResult;\n            } else {\n                const left = curResult;\n                const right = nextResult;\n                const mergedResult = this.mergeResults(textBetween, left, right, context);\n                context.debug(() => {\n                    console.log(`${this.constructor.name} merged ${left} and ${right} into ${mergedResult}`);\n                });\n\n                curResult = mergedResult;\n            }\n        }\n\n        if (curResult != null) {\n            mergedResults.push(curResult);\n        }\n\n        return mergedResults;\n    }\n}\n", "/*\n  \n*/\n\nimport { ParsingResult } from \"../../results\";\nimport { MergingRefiner } from \"../abstractRefiners\";\n\nexport default abstract class AbstractMergeDateRangeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween, currentResult, nextResult): boolean {\n        return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;\n    }\n\n    mergeResults(textBetween, fromResult, toResult): ParsingResult {\n        if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {\n            toResult.start.getCertainComponents().forEach((key) => {\n                if (!fromResult.start.isCertain(key)) {\n                    fromResult.start.imply(key, toResult.start.get(key));\n                }\n            });\n\n            fromResult.start.getCertainComponents().forEach((key) => {\n                if (!toResult.start.isCertain(key)) {\n                    toResult.start.imply(key, fromResult.start.get(key));\n                }\n            });\n        }\n\n        if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {\n            let fromMoment = fromResult.start.dayjs();\n            let toMoment = toResult.start.dayjs();\n            if (toResult.start.isOnlyWeekdayComponent() && toMoment.add(7, \"days\").isAfter(fromMoment)) {\n                toMoment = toMoment.add(7, \"days\");\n                toResult.start.imply(\"day\", toMoment.date());\n                toResult.start.imply(\"month\", toMoment.month() + 1);\n                toResult.start.imply(\"year\", toMoment.year());\n            } else if (fromResult.start.isOnlyWeekdayComponent() && fromMoment.add(-7, \"days\").isBefore(toMoment)) {\n                fromMoment = fromMoment.add(-7, \"days\");\n                fromResult.start.imply(\"day\", fromMoment.date());\n                fromResult.start.imply(\"month\", fromMoment.month() + 1);\n                fromResult.start.imply(\"year\", fromMoment.year());\n            } else if (toResult.start.isDateWithUnknownYear() && toMoment.add(1, \"years\").isAfter(fromMoment)) {\n                toMoment = toMoment.add(1, \"years\");\n                toResult.start.imply(\"year\", toMoment.year());\n            } else if (fromResult.start.isDateWithUnknownYear() && fromMoment.add(-1, \"years\").isBefore(toMoment)) {\n                fromMoment = fromMoment.add(-1, \"years\");\n                fromResult.start.imply(\"year\", fromMoment.year());\n            } else {\n                [toResult, fromResult] = [fromResult, toResult];\n            }\n        }\n\n        const result = fromResult.clone();\n        result.start = fromResult.start;\n        result.end = toResult.start;\n        result.index = Math.min(fromResult.index, toResult.index);\n        if (fromResult.index < toResult.index) {\n            result.text = fromResult.text + textBetween + toResult.text;\n        } else {\n            result.text = toResult.text + textBetween + fromResult.text;\n        }\n\n        return result;\n    }\n}\n", "/*\n  \n*/\n\nimport AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n * This implementation should provide English connecting phases\n * - 2020-02-13 [to] 2020-02-13\n * - Wednesday [-] Friday\n */\nexport default class ENMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(to|-|\u2013|until|through|till)\\s*$/i;\n    }\n}\n", "import { ParsingComponents, ParsingResult } from \"../results\";\nimport { Meridiem } from \"../index\";\nimport { assignSimilarDate, implySimilarDate } from \"../utils/dayjs\";\n\nexport function mergeDateTimeResult(dateResult: ParsingResult, timeResult: ParsingResult): ParsingResult {\n    const result = dateResult.clone();\n    const beginDate = dateResult.start;\n    const beginTime = timeResult.start;\n\n    result.start = mergeDateTimeComponent(beginDate, beginTime);\n    if (dateResult.end != null || timeResult.end != null) {\n        const endDate = dateResult.end == null ? dateResult.start : dateResult.end;\n        const endTime = timeResult.end == null ? timeResult.start : timeResult.end;\n        const endDateTime = mergeDateTimeComponent(endDate, endTime);\n\n        if (dateResult.end == null && endDateTime.date().getTime() < result.start.date().getTime()) {\n            // For example,  \"Tuesday 9pm - 1am\" the ending should actually be 1am on the next day.\n            // We need to add to ending by another day.\n            const nextDayJs = endDateTime.dayjs().add(1, \"day\");\n            if (endDateTime.isCertain(\"day\")) {\n                assignSimilarDate(endDateTime, nextDayJs);\n            } else {\n                implySimilarDate(endDateTime, nextDayJs);\n            }\n        }\n\n        result.end = endDateTime;\n    }\n\n    return result;\n}\n\nexport function mergeDateTimeComponent(\n    dateComponent: ParsingComponents,\n    timeComponent: ParsingComponents\n): ParsingComponents {\n    const dateTimeComponent = dateComponent.clone();\n\n    if (timeComponent.isCertain(\"hour\")) {\n        dateTimeComponent.assign(\"hour\", timeComponent.get(\"hour\"));\n        dateTimeComponent.assign(\"minute\", timeComponent.get(\"minute\"));\n\n        if (timeComponent.isCertain(\"second\")) {\n            dateTimeComponent.assign(\"second\", timeComponent.get(\"second\"));\n\n            if (timeComponent.isCertain(\"millisecond\")) {\n                dateTimeComponent.assign(\"millisecond\", timeComponent.get(\"millisecond\"));\n            } else {\n                dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n            }\n        } else {\n            dateTimeComponent.imply(\"second\", timeComponent.get(\"second\"));\n            dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n        }\n    } else {\n        dateTimeComponent.imply(\"hour\", timeComponent.get(\"hour\"));\n        dateTimeComponent.imply(\"minute\", timeComponent.get(\"minute\"));\n        dateTimeComponent.imply(\"second\", timeComponent.get(\"second\"));\n        dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n    }\n\n    if (timeComponent.isCertain(\"timezoneOffset\")) {\n        dateTimeComponent.assign(\"timezoneOffset\", timeComponent.get(\"timezoneOffset\"));\n    }\n\n    if (timeComponent.isCertain(\"meridiem\")) {\n        dateTimeComponent.assign(\"meridiem\", timeComponent.get(\"meridiem\"));\n    } else if (timeComponent.get(\"meridiem\") != null && dateTimeComponent.get(\"meridiem\") == null) {\n        dateTimeComponent.imply(\"meridiem\", timeComponent.get(\"meridiem\"));\n    }\n\n    if (dateTimeComponent.get(\"meridiem\") == Meridiem.PM && dateTimeComponent.get(\"hour\") < 12) {\n        if (timeComponent.isCertain(\"hour\")) {\n            dateTimeComponent.assign(\"hour\", dateTimeComponent.get(\"hour\") + 12);\n        } else {\n            dateTimeComponent.imply(\"hour\", dateTimeComponent.get(\"hour\") + 12);\n        }\n    }\n\n    return dateTimeComponent;\n}\n", "/*\n\n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\nimport { mergeDateTimeResult } from \"../../calculation/mergingCalculation\";\n\nexport default abstract class AbstractMergeDateTimeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        return (\n            ((currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime()) ||\n                (nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime())) &&\n            textBetween.match(this.patternBetween()) != null\n        );\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const result = currentResult.start.isOnlyDate()\n            ? mergeDateTimeResult(currentResult, nextResult)\n            : mergeDateTimeResult(nextResult, currentResult);\n\n        result.index = currentResult.index;\n        result.text = currentResult.text + textBetween + nextResult.text;\n        return result;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n * This implementation should provide English connecting phases\n * - 2020-02-13 [at] 6pm\n * - Tomorrow [after] 7am\n */\nexport default class ENMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(\"^\\\\s*(T|at|after|before|on|of|,|-)?\\\\s*$\");\n    }\n}\n", "// Map ABBR -> Offset in minute\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { TimezoneAbbrMap } from \"../../index\";\nimport { ParsingResult } from \"../../results\";\nimport { toTimezoneOffset } from \"../../timezone\";\n\nconst TIMEZONE_NAME_PATTERN = new RegExp(\"^\\\\s*,?\\\\s*\\\\(?([A-Z]{2,4})\\\\)?(?=\\\\W|$)\", \"i\");\n\nexport default class ExtractTimezoneAbbrRefiner implements Refiner {\n    constructor(private readonly timezoneOverrides?: TimezoneAbbrMap) {}\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        const timezoneOverrides = context.option.timezones ?? {};\n\n        results.forEach((result) => {\n            const suffix = context.text.substring(result.index + result.text.length);\n            const match = TIMEZONE_NAME_PATTERN.exec(suffix);\n            if (!match) {\n                return;\n            }\n\n            const timezoneAbbr = match[1].toUpperCase();\n            const refDate = result.start.date() ?? result.refDate ?? new Date();\n            const tzOverrides = { ...this.timezoneOverrides, ...timezoneOverrides };\n            const extractedTimezoneOffset = toTimezoneOffset(timezoneAbbr, refDate, tzOverrides);\n            if (extractedTimezoneOffset == null) {\n                return;\n            }\n            context.debug(() => {\n                console.log(\n                    `Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`\n                );\n            });\n\n            const currentTimezoneOffset = result.start.get(\"timezoneOffset\");\n            if (currentTimezoneOffset !== null && extractedTimezoneOffset != currentTimezoneOffset) {\n                // We may already have extracted the timezone offset e.g. \"11 am GMT+0900 (JST)\"\n                // - if they are equal, we also want to take the abbreviation text into result\n                // - if they are not equal, we trust the offset more\n                if (result.start.isCertain(\"timezoneOffset\")) {\n                    return;\n                }\n\n                // This is often because it's relative time with inferred timezone (e.g. in 1 hour, tomorrow)\n                // Then, we want to double check the abbr case (e.g. \"GET\" not \"get\")\n                if (timezoneAbbr != match[1]) {\n                    return;\n                }\n            }\n\n            if (result.start.isOnlyDate()) {\n                // If the time is not explicitly mentioned,\n                // Then, we also want to double check the abbr case (e.g. \"GET\" not \"get\")\n                if (timezoneAbbr != match[1]) {\n                    return;\n                }\n            }\n\n            result.text += match[0];\n\n            if (!result.start.isCertain(\"timezoneOffset\")) {\n                result.start.assign(\"timezoneOffset\", extractedTimezoneOffset);\n            }\n\n            if (result.end != null && !result.end.isCertain(\"timezoneOffset\")) {\n                result.end.assign(\"timezoneOffset\", extractedTimezoneOffset);\n            }\n        });\n\n        return results;\n    }\n}\n", "import { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nconst TIMEZONE_OFFSET_PATTERN = new RegExp(\"^\\\\s*(?:\\\\(?(?:GMT|UTC)\\\\s?)?([+-])(\\\\d{1,2})(?::?(\\\\d{2}))?\\\\)?\", \"i\");\nconst TIMEZONE_OFFSET_SIGN_GROUP = 1;\nconst TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;\nconst TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;\n\nexport default class ExtractTimezoneOffsetRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        results.forEach(function (result) {\n            if (result.start.isCertain(\"timezoneOffset\")) {\n                return;\n            }\n\n            const suffix = context.text.substring(result.index + result.text.length);\n            const match = TIMEZONE_OFFSET_PATTERN.exec(suffix);\n            if (!match) {\n                return;\n            }\n\n            context.debug(() => {\n                console.log(`Extracting timezone: '${match[0]}' into : ${result}`);\n            });\n\n            const hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);\n            const minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || \"0\");\n            let timezoneOffset = hourOffset * 60 + minuteOffset;\n            // No timezones have offsets greater than 14 hours, so disregard this match\n            if (timezoneOffset > 14 * 60) {\n                return;\n            }\n            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === \"-\") {\n                timezoneOffset = -timezoneOffset;\n            }\n\n            if (result.end != null) {\n                result.end.assign(\"timezoneOffset\", timezoneOffset);\n            }\n\n            result.start.assign(\"timezoneOffset\", timezoneOffset);\n            result.text += match[0];\n        });\n\n        return results;\n    }\n}\n", "/*\n  \n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nexport default class OverlapRemovalRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (results.length < 2) {\n            return results;\n        }\n\n        const filteredResults = [];\n\n        let prevResult = results[0];\n        for (let i = 1; i < results.length; i++) {\n            const result = results[i];\n\n            // If overlap, compare the length and discard the shorter one\n            if (result.index < prevResult.index + prevResult.text.length) {\n                if (result.text.length > prevResult.text.length) {\n                    prevResult = result;\n                }\n            } else {\n                filteredResults.push(prevResult);\n                prevResult = result;\n            }\n        }\n\n        // The last one\n        if (prevResult != null) {\n            filteredResults.push(prevResult);\n        }\n\n        return filteredResults;\n    }\n}\n", "/*\n    Enforce 'forwardDate' option to on the results. When there are missing component,\n    e.g. \"March 12-13 (without year)\" or \"Thursday\", the refiner will try to adjust the result\n    into the future instead of the past.\n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\nimport dayjs from \"dayjs\";\nimport { implySimilarDate } from \"../../utils/dayjs\";\n\nexport default class ForwardDateRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (!context.option.forwardDate) {\n            return results;\n        }\n\n        results.forEach(function (result) {\n            let refMoment = dayjs(context.refDate);\n\n            if (result.start.isOnlyTime() && refMoment.isAfter(result.start.dayjs())) {\n                refMoment = refMoment.add(1, \"day\");\n                implySimilarDate(result.start, refMoment);\n                if (result.end && result.end.isOnlyTime()) {\n                    implySimilarDate(result.end, refMoment);\n                    if (result.start.dayjs().isAfter(result.end.dayjs())) {\n                        refMoment = refMoment.add(1, \"day\");\n                        implySimilarDate(result.end, refMoment);\n                    }\n                }\n            }\n\n            if (result.start.isOnlyWeekdayComponent() && refMoment.isAfter(result.start.dayjs())) {\n                if (refMoment.day() >= result.start.get(\"weekday\")) {\n                    refMoment = refMoment.day(result.start.get(\"weekday\") + 7);\n                } else {\n                    refMoment = refMoment.day(<number>result.start.get(\"weekday\"));\n                }\n\n                result.start.imply(\"day\", refMoment.date());\n                result.start.imply(\"month\", refMoment.month() + 1);\n                result.start.imply(\"year\", refMoment.year());\n                context.debug(() => {\n                    console.log(`Forward weekly adjusted for ${result} (${result.start})`);\n                });\n\n                if (result.end && result.end.isOnlyWeekdayComponent()) {\n                    // Adjust date to the coming week\n                    if (refMoment.day() > result.end.get(\"weekday\")) {\n                        refMoment = refMoment.day(result.end.get(\"weekday\") + 7);\n                    } else {\n                        refMoment = refMoment.day(<number>result.end.get(\"weekday\"));\n                    }\n\n                    result.end.imply(\"day\", refMoment.date());\n                    result.end.imply(\"month\", refMoment.month() + 1);\n                    result.end.imply(\"year\", refMoment.year());\n                    context.debug(() => {\n                        console.log(`Forward weekly adjusted for ${result} (${result.end})`);\n                    });\n                }\n            }\n\n            // In case where we know the month, but not which year (e.g. \"in December\", \"25th December\"),\n            // try move to another year\n            if (result.start.isDateWithUnknownYear() && refMoment.isAfter(result.start.dayjs())) {\n                for (let i = 0; i < 3 && refMoment.isAfter(result.start.dayjs()); i++) {\n                    result.start.imply(\"year\", result.start.get(\"year\") + 1);\n                    context.debug(() => {\n                        console.log(`Forward yearly adjusted for ${result} (${result.start})`);\n                    });\n\n                    if (result.end && !result.end.isCertain(\"year\")) {\n                        result.end.imply(\"year\", result.end.get(\"year\") + 1);\n                        context.debug(() => {\n                            console.log(`Forward yearly adjusted for ${result} (${result.end})`);\n                        });\n                    }\n                }\n            }\n        });\n\n        return results;\n    }\n}\n", "import { Filter } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\n\nexport default class UnlikelyFormatFilter extends Filter {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    isValid(context, result: ParsingResult): boolean {\n        if (result.text.replace(\" \", \"\").match(/^\\d*(\\.\\d*)?$/)) {\n            context.debug(() => {\n                console.log(`Removing unlikely result '${result.text}'`);\n            });\n\n            return false;\n        }\n\n        if (!result.start.isValidDate()) {\n            context.debug(() => {\n                console.log(`Removing invalid result: ${result} (${result.start})`);\n            });\n\n            return false;\n        }\n\n        if (result.end && !result.end.isValidDate()) {\n            context.debug(() => {\n                console.log(`Removing invalid result: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        if (this.strictMode) {\n            return this.isStrictModeValid(context, result);\n        }\n\n        return true;\n    }\n\n    private isStrictModeValid(context, result: ParsingResult) {\n        if (result.start.isOnlyWeekdayComponent()) {\n            context.debug(() => {\n                console.log(`(Strict) Removing weekday only component: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        if (result.start.isOnlyTime() && (!result.start.isCertain(\"hour\") || !result.start.isCertain(\"minute\"))) {\n            context.debug(() => {\n                console.log(`(Strict) Removing uncertain time component: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        return true;\n    }\n}\n", "import { ParsingContext } from \"../../chrono\";\nimport { Component } from \"../../index\";\nimport { AbstractParserWithWordBoundaryChecking } from \"./AbstractParserWithWordBoundary\";\n\n// ISO 8601\n// http://www.w3.org/TR/NOTE-datetime\n// - YYYY-MM-DD\n// - YYYY-MM-DDThh:mmTZD\n// - YYYY-MM-DDThh:mm:ssTZD\n// - YYYY-MM-DDThh:mm:ss.sTZD\n// - TZD = (Z or +hh:mm or -hh:mm)\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    \"([0-9]{4})\\\\-([0-9]{1,2})\\\\-([0-9]{1,2})\" +\n    \"(?:T\" + //..\n        \"([0-9]{1,2}):([0-9]{1,2})\" + // hh:mm\n        \"(?:\" +\n            \":([0-9]{1,2})(?:\\\\.(\\\\d{1,4}))?\" +\n        \")?\" + // :ss.s\n        \"(?:\" +\n            \"Z|([+-]\\\\d{2}):?(\\\\d{2})?\" +\n        \")?\" + // TZD (Z or \u00B1hh:mm or \u00B1hhmm or \u00B1hh)\n    \")?\" +\n    \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NUMBER_GROUP = 2;\nconst DATE_NUMBER_GROUP = 3;\nconst HOUR_NUMBER_GROUP = 4;\nconst MINUTE_NUMBER_GROUP = 5;\nconst SECOND_NUMBER_GROUP = 6;\nconst MILLISECOND_NUMBER_GROUP = 7;\nconst TZD_HOUR_OFFSET_GROUP = 8;\nconst TZD_MINUTE_OFFSET_GROUP = 9;\n\nexport default class ISOFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const components: { [component in Component]?: number } = {};\n        components[\"year\"] = parseInt(match[YEAR_NUMBER_GROUP]);\n        components[\"month\"] = parseInt(match[MONTH_NUMBER_GROUP]);\n        components[\"day\"] = parseInt(match[DATE_NUMBER_GROUP]);\n\n        if (match[HOUR_NUMBER_GROUP] != null) {\n            components[\"hour\"] = parseInt(match[HOUR_NUMBER_GROUP]);\n            components[\"minute\"] = parseInt(match[MINUTE_NUMBER_GROUP]);\n\n            if (match[SECOND_NUMBER_GROUP] != null) {\n                components[\"second\"] = parseInt(match[SECOND_NUMBER_GROUP]);\n            }\n\n            if (match[MILLISECOND_NUMBER_GROUP] != null) {\n                components[\"millisecond\"] = parseInt(match[MILLISECOND_NUMBER_GROUP]);\n            }\n\n            if (match[TZD_HOUR_OFFSET_GROUP] == null) {\n                components[\"timezoneOffset\"] = 0;\n            } else {\n                const hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);\n\n                let minuteOffset = 0;\n                if (match[TZD_MINUTE_OFFSET_GROUP] != null) {\n                    minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);\n                }\n\n                let offset = hourOffset * 60;\n                if (offset < 0) {\n                    offset -= minuteOffset;\n                } else {\n                    offset += minuteOffset;\n                }\n\n                components[\"timezoneOffset\"] = offset;\n            }\n        }\n\n        return components;\n    }\n}\n", "/*\n  \n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\n\n/**\n * Merge weekday component into more completed data\n * - [Sunday] [12/7/2014] => [Sunday 12/7/2014]\n * - [Tuesday], [January 13, 2012] => [Sunday 12/7/2014]\n */\nexport default class MergeWeekdayComponentRefiner extends MergingRefiner {\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const newResult = nextResult.clone();\n        newResult.index = currentResult.index;\n        newResult.text = currentResult.text + textBetween + newResult.text;\n\n        newResult.start.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        if (newResult.end) {\n            newResult.end.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        }\n\n        return newResult;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        const weekdayThenNormalDate =\n            currentResult.start.isOnlyWeekdayComponent() &&\n            !currentResult.start.isCertain(\"hour\") &&\n            nextResult.start.isCertain(\"day\");\n        return weekdayThenNormalDate && textBetween.match(/^,?\\s*$/) != null;\n    }\n}\n", "import { Configuration } from \"./chrono\";\n\nimport ExtractTimezoneAbbrRefiner from \"./common/refiners/ExtractTimezoneAbbrRefiner\";\nimport ExtractTimezoneOffsetRefiner from \"./common/refiners/ExtractTimezoneOffsetRefiner\";\nimport OverlapRemovalRefiner from \"./common/refiners/OverlapRemovalRefiner\";\nimport ForwardDateRefiner from \"./common/refiners/ForwardDateRefiner\";\nimport UnlikelyFormatFilter from \"./common/refiners/UnlikelyFormatFilter\";\nimport ISOFormatParser from \"./common/parsers/ISOFormatParser\";\nimport MergeWeekdayComponentRefiner from \"./common/refiners/MergeWeekdayComponentRefiner\";\n\nexport function includeCommonConfiguration(configuration: Configuration, strictMode = false): Configuration {\n    configuration.parsers.unshift(new ISOFormatParser());\n\n    configuration.refiners.unshift(new MergeWeekdayComponentRefiner());\n    configuration.refiners.unshift(new ExtractTimezoneOffsetRefiner());\n    configuration.refiners.unshift(new OverlapRemovalRefiner());\n\n    // Unlike ExtractTimezoneOffsetRefiner, this refiner relies on knowing both date and time in cases where the tz\n    // is ambiguous (in terms of DST/non-DST). It therefore needs to be applied as late as possible in the parsing.\n    configuration.refiners.push(new ExtractTimezoneAbbrRefiner());\n    configuration.refiners.push(new OverlapRemovalRefiner());\n    configuration.refiners.push(new ForwardDateRefiner());\n    configuration.refiners.push(new UnlikelyFormatFilter(strictMode));\n    return configuration;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate } from \"../../../utils/dayjs\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = /(now|today|tonight|tomorrow|tmr|tmrw|yesterday|last\\s*night)(?=\\W|$)/i;\n\nexport default class ENCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        let targetDate = dayjs(context.refDate);\n        const lowerText = match[0].toLowerCase();\n        const component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"now\":\n                return references.now(context.reference);\n\n            case \"today\":\n                return references.today(context.reference);\n\n            case \"yesterday\":\n                return references.yesterday(context.reference);\n\n            case \"tomorrow\":\n            case \"tmr\":\n            case \"tmrw\":\n                return references.tomorrow(context.reference);\n\n            case \"tonight\":\n                return references.tonight(context.reference);\n\n            default:\n                if (lowerText.match(/last\\s*night/)) {\n                    if (targetDate.hour() > 6) {\n                        targetDate = targetDate.add(-1, \"day\");\n                    }\n\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 0);\n                }\n                break;\n        }\n\n        return component;\n    }\n}\n", "import { ParsingComponents, ReferenceWithTimezone } from \"../results\";\nimport dayjs from \"dayjs\";\nimport {\n    assignSimilarDate,\n    assignSimilarTime,\n    implySimilarDate,\n    implySimilarTime,\n    implyTheNextDay,\n} from \"../utils/dayjs\";\nimport { Meridiem } from \"../index\";\n\nexport function now(reference: ReferenceWithTimezone): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    assignSimilarDate(component, targetDate);\n    assignSimilarTime(component, targetDate);\n    if (reference.timezoneOffset !== null) {\n        component.assign(\"timezoneOffset\", targetDate.utcOffset());\n    }\n    return component;\n}\n\nexport function today(reference: ReferenceWithTimezone): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    assignSimilarDate(component, targetDate);\n    implySimilarTime(component, targetDate);\n    return component;\n}\n\n/**\n * The previous day. Imply the same time.\n */\nexport function yesterday(reference: ReferenceWithTimezone): ParsingComponents {\n    return theDayBefore(reference, 1);\n}\n\nexport function theDayBefore(reference: ReferenceWithTimezone, numDay: number): ParsingComponents {\n    return theDayAfter(reference, -numDay);\n}\n\n/**\n * The following day with dayjs.assignTheNextDay()\n */\nexport function tomorrow(reference: ReferenceWithTimezone): ParsingComponents {\n    return theDayAfter(reference, 1);\n}\n\nexport function theDayAfter(reference: ReferenceWithTimezone, nDays: number): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    targetDate = targetDate.add(nDays, \"day\");\n    assignSimilarDate(component, targetDate);\n    implySimilarTime(component, targetDate);\n    return component;\n}\n\nexport function tonight(reference: ReferenceWithTimezone, implyHour = 22): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"hour\", implyHour);\n    component.imply(\"meridiem\", Meridiem.PM);\n    assignSimilarDate(component, targetDate);\n    return component;\n}\n\nexport function lastNight(reference: ReferenceWithTimezone, implyHour = 0): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    if (targetDate.hour() < 6) {\n        targetDate = targetDate.add(-1, \"day\");\n    }\n    assignSimilarDate(component, targetDate);\n    component.imply(\"hour\", implyHour);\n    return component;\n}\n\nexport function evening(reference: ReferenceWithTimezone, implyHour = 20): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.PM);\n    component.imply(\"hour\", implyHour);\n    return component;\n}\n\nexport function yesterdayEvening(reference: ReferenceWithTimezone, implyHour = 20): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    targetDate = targetDate.add(-1, \"day\");\n    assignSimilarDate(component, targetDate);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"meridiem\", Meridiem.PM);\n    return component;\n}\n\nexport function midnight(reference: ReferenceWithTimezone): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    const targetDate = dayjs(reference.instant);\n    if (targetDate.hour() > 2) {\n        // Unless it's very early morning (0~2AM), we assume the midnight is the coming midnight.\n        // Thus, increasing the day by 1.\n        implyTheNextDay(component, targetDate);\n    }\n    component.assign(\"hour\", 0);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    return component;\n}\n\nexport function morning(reference: ReferenceWithTimezone, implyHour = 6): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.AM);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    return component;\n}\n\nexport function afternoon(reference: ReferenceWithTimezone, implyHour = 15): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.PM);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    return component;\n}\n\nexport function noon(reference: ReferenceWithTimezone): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.AM);\n    component.imply(\"hour\", 12);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    return component;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport * as casualReferences from \"../../../common/casualReferences\";\n\nconst PATTERN = /(?:this)?\\s{0,3}(morning|afternoon|evening|night|midnight|midday|noon)(?=\\W|$)/i;\n\nexport default class ENCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        switch (match[1].toLowerCase()) {\n            case \"afternoon\":\n                return casualReferences.afternoon(context.reference);\n            case \"evening\":\n            case \"night\":\n                return casualReferences.evening(context.reference);\n            case \"midnight\":\n                return casualReferences.midnight(context.reference);\n            case \"morning\":\n                return casualReferences.morning(context.reference);\n            case \"noon\":\n            case \"midday\":\n                return casualReferences.noon(context.reference);\n        }\n        return null;\n    }\n}\n", "import { Weekday } from \"../../index\";\nimport { ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { addImpliedTimeUnits } from \"../../utils/timeunits\";\n\n/**\n * Returns the parsing components at the weekday (considering the modifier). The time and timezone is assume to be\n * similar to the reference.\n * @param reference\n * @param weekday\n * @param modifier \"this\", \"next\", \"last\" modifier word. If empty, returns the weekday closest to the `refDate`.\n */\nexport function createParsingComponentsAtWeekday(\n    reference: ReferenceWithTimezone,\n    weekday: Weekday,\n    modifier?: \"this\" | \"next\" | \"last\"\n): ParsingComponents {\n    const refDate = reference.getDateWithAdjustedTimezone();\n    const daysToWeekday = getDaysToWeekday(refDate, weekday, modifier);\n\n    let components = new ParsingComponents(reference);\n    components = addImpliedTimeUnits(components, { \"day\": daysToWeekday });\n    components.assign(\"weekday\", weekday);\n\n    return components;\n}\n\n/**\n * Returns number of days from refDate to the weekday. The refDate date and timezone information is used.\n * @param refDate\n * @param weekday\n * @param modifier \"this\", \"next\", \"last\" modifier word. If empty, returns the weekday closest to the `refDate`.\n */\nexport function getDaysToWeekday(refDate: Date, weekday: Weekday, modifier?: \"this\" | \"next\" | \"last\"): number {\n    const refWeekday = refDate.getDay() as Weekday;\n    switch (modifier) {\n        case \"this\":\n            return getDaysForwardToWeekday(refDate, weekday);\n        case \"last\":\n            return getBackwardDaysToWeekday(refDate, weekday);\n        case \"next\":\n            // From Sunday, the next Sunday is 7 days later.\n            // Otherwise, next Mon is 1 days later, next Tues is 2 days later, and so on..., (return enum value)\n            if (refWeekday == Weekday.SUNDAY) {\n                return weekday == Weekday.SUNDAY ? 7 : weekday;\n            }\n            // From Saturday, the next Saturday is 7 days later, the next Sunday is 8-days later.\n            // Otherwise, next Mon is (1 + 1) days later, next Tues is (1 + 2) days later, and so on...,\n            // (return, 2 + [enum value] days)\n            if (refWeekday == Weekday.SATURDAY) {\n                if (weekday == Weekday.SATURDAY) return 7;\n                if (weekday == Weekday.SUNDAY) return 8;\n                return 1 + weekday;\n            }\n            // From weekdays, next Mon is the following week's Mon, next Tues the following week's Tues, and so on...\n            // If the week's weekday already passed (weekday < refWeekday), we simply count forward to next week\n            // (similar to 'this'). Otherwise, count forward to this week, then add another 7 days.\n            if (weekday < refWeekday && weekday != Weekday.SUNDAY) {\n                return getDaysForwardToWeekday(refDate, weekday);\n            } else {\n                return getDaysForwardToWeekday(refDate, weekday) + 7;\n            }\n    }\n    return getDaysToWeekdayClosest(refDate, weekday);\n}\n\nexport function getDaysToWeekdayClosest(refDate: Date, weekday: Weekday): number {\n    const backward = getBackwardDaysToWeekday(refDate, weekday);\n    const forward = getDaysForwardToWeekday(refDate, weekday);\n\n    return forward < -backward ? forward : backward;\n}\n\nexport function getDaysForwardToWeekday(refDate: Date, weekday: Weekday): number {\n    const refWeekday = refDate.getDay();\n    let forwardCount = weekday - refWeekday;\n    if (forwardCount < 0) {\n        forwardCount += 7;\n    }\n    return forwardCount;\n}\n\nexport function getBackwardDaysToWeekday(refDate: Date, weekday: Weekday): number {\n    const refWeekday = refDate.getDay();\n    let backwardCount = weekday - refWeekday;\n    if (backwardCount >= 0) {\n        backwardCount -= 7;\n    }\n    return backwardCount;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { createParsingComponentsAtWeekday } from \"../../../common/calculation/weekdays\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\\uFF08)\\\\s*)?\" +\n        \"(?:on\\\\s*?)?\" +\n        \"(?:(this|last|past|next)\\\\s*)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?:\\\\s*(?:\\\\,|\\\\)|\\\\\uFF09))?\" +\n        \"(?:\\\\s*(this|last|past|next)\\\\s*week)?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class ENWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const weekday = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord == \"last\" || modifierWord == \"past\") {\n            modifier = \"last\";\n        } else if (modifierWord == \"next\") {\n            modifier = \"next\";\n        } else if (modifierWord == \"this\") {\n            modifier = \"this\";\n        }\n\n        return createParsingComponentsAtWeekday(context.reference, weekday, modifier);\n    }\n}\n", "import { TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nconst PATTERN = new RegExp(\n    `(this|last|past|next|after\\\\s*this)\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` + \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class ENRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"next\" || modifier.startsWith(\"after\")) {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"last\" || modifier == \"past\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = dayjs(context.reference.instant);\n\n        // This week\n        if (unitWord.match(/week/i)) {\n            date = date.add(-date.get(\"d\"), \"d\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.imply(\"year\", date.year());\n        }\n\n        // This month\n        else if (unitWord.match(/month/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            components.imply(\"day\", date.date());\n            components.assign(\"year\", date.year());\n            components.assign(\"month\", date.month() + 1);\n        }\n\n        // This year\n        else if (unitWord.match(/year/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            date = date.add(-date.month(), \"month\");\n\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.assign(\"year\", date.year());\n        }\n\n        return components;\n    }\n}\n", "import { ReferenceWithTimezone, ParsingComponents, ParsingResult } from \"./results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference } from \"./index\";\nimport { AsyncDebugBlock, DebugHandler } from \"./debugging\";\nimport { createCasualConfiguration } from \"./locales/en\";\n\n/**\n * Chrono configuration.\n * It is simply an ordered list of parsers and refiners\n */\nexport interface Configuration {\n    parsers: Parser[];\n    refiners: Refiner[];\n}\n\n/**\n * A abstraction for Chrono *Parser*.\n *\n * Each parser should recognize and handle a certain date format.\n * Chrono uses multiple parses (and refiners) together for parsing the input.\n *\n * The parser implementation must provide {@Link pattern | pattern()} for the date format.\n *\n * The {@Link extract | extract()} method is called with the pattern's *match*.\n * The matching and extracting is controlled and adjusted to avoid for overlapping results.\n */\nexport interface Parser {\n    pattern(context: ParsingContext): RegExp;\n    extract(\n        context: ParsingContext,\n        match: RegExpMatchArray\n    ): ParsingComponents | ParsingResult | { [c in Component]?: number } | null;\n}\n\n/**\n * A abstraction for Chrono *Refiner*.\n *\n * Each refiner takes the list of results (from parsers or other refiners) and returns another list of results.\n * Chrono applies each refiner in order and return the output from the last refiner.\n */\nexport interface Refiner {\n    refine: (context: ParsingContext, results: ParsingResult[]) => ParsingResult[];\n}\n\n/**\n * The Chrono object.\n */\nexport class Chrono {\n    parsers: Array<Parser>;\n    refiners: Array<Refiner>;\n\n    constructor(configuration?: Configuration) {\n        configuration = configuration || createCasualConfiguration();\n        this.parsers = [...configuration.parsers];\n        this.refiners = [...configuration.refiners];\n    }\n\n    /**\n     * Create a shallow copy of the Chrono object with the same configuration (`parsers` and `refiners`)\n     */\n    clone(): Chrono {\n        return new Chrono({\n            parsers: [...this.parsers],\n            refiners: [...this.refiners],\n        });\n    }\n\n    /**\n     * A shortcut for calling {@Link parse | parse() } then transform the result into Javascript's Date object\n     * @return Date object created from the first parse result\n     */\n    parseDate(text: string, referenceDate?: ParsingReference | Date, option?: ParsingOption): Date | null {\n        const results = this.parse(text, referenceDate, option);\n        return results.length > 0 ? results[0].start.date() : null;\n    }\n\n    parse(text: string, referenceDate?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n        const context = new ParsingContext(text, referenceDate, option);\n\n        let results = [];\n        this.parsers.forEach((parser) => {\n            const parsedResults = Chrono.executeParser(context, parser);\n            results = results.concat(parsedResults);\n        });\n\n        results.sort((a, b) => {\n            return a.index - b.index;\n        });\n\n        this.refiners.forEach(function (refiner) {\n            results = refiner.refine(context, results);\n        });\n\n        return results;\n    }\n\n    private static executeParser(context: ParsingContext, parser: Parser) {\n        const results = [];\n        const pattern = parser.pattern(context);\n\n        const originalText = context.text;\n        let remainingText = context.text;\n        let match = pattern.exec(remainingText);\n\n        while (match) {\n            // Calculate match index on the full text;\n            const index = match.index + originalText.length - remainingText.length;\n            match.index = index;\n\n            const result = parser.extract(context, match);\n            if (!result) {\n                // If fail, move on by 1\n                remainingText = originalText.substring(match.index + 1);\n                match = pattern.exec(remainingText);\n                continue;\n            }\n\n            let parsedResult: ParsingResult = null;\n            if (result instanceof ParsingResult) {\n                parsedResult = result;\n            } else if (result instanceof ParsingComponents) {\n                parsedResult = context.createParsingResult(match.index, match[0]);\n                parsedResult.start = result;\n            } else {\n                parsedResult = context.createParsingResult(match.index, match[0], result);\n            }\n\n            context.debug(() => console.log(`${parser.constructor.name} extracted result ${parsedResult}`));\n\n            results.push(parsedResult);\n            remainingText = originalText.substring(index + parsedResult.text.length);\n            match = pattern.exec(remainingText);\n        }\n\n        return results;\n    }\n}\n\nexport class ParsingContext implements DebugHandler {\n    readonly text: string;\n    readonly option: ParsingOption;\n    readonly reference: ReferenceWithTimezone;\n\n    /**\n     * @deprecated. Use reference.instant instead.\n     */\n    readonly refDate: Date;\n\n    constructor(text: string, refDate?: ParsingReference | Date, option?: ParsingOption) {\n        this.text = text;\n        this.reference = new ReferenceWithTimezone(refDate);\n        this.option = option ?? {};\n\n        this.refDate = this.reference.instant;\n    }\n\n    createParsingComponents(components?: { [c in Component]?: number } | ParsingComponents): ParsingComponents {\n        if (components instanceof ParsingComponents) {\n            return components;\n        }\n\n        return new ParsingComponents(this.reference, components);\n    }\n\n    createParsingResult(\n        index: number,\n        textOrEndIndex: number | string,\n        startComponents?: { [c in Component]?: number } | ParsingComponents,\n        endComponents?: { [c in Component]?: number } | ParsingComponents\n    ): ParsingResult {\n        const text = typeof textOrEndIndex === \"string\" ? textOrEndIndex : this.text.substring(index, textOrEndIndex);\n\n        const start = startComponents ? this.createParsingComponents(startComponents) : null;\n        const end = endComponents ? this.createParsingComponents(endComponents) : null;\n\n        return new ParsingResult(this.reference, index, text, start, end);\n    }\n\n    debug(block: AsyncDebugBlock): void {\n        if (this.option.debug) {\n            if (this.option.debug instanceof Function) {\n                this.option.debug(block);\n            } else {\n                const handler: DebugHandler = <DebugHandler>this.option.debug;\n                handler.debug(block);\n            }\n        }\n    }\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\nimport { findMostLikelyADYear, findYearClosestToRef } from \"../../calculation/years\";\n\n/**\n * Date format with slash \"/\" (or dot \".\") between numbers.\n * For examples:\n * - 7/10\n * - 7/12/2020\n * - 7.12.2020\n */\nconst PATTERN = new RegExp(\n    \"([^\\\\d]|^)\" +\n        \"([0-3]{0,1}[0-9]{1})[\\\\/\\\\.\\\\-]([0-3]{0,1}[0-9]{1})\" +\n        \"(?:[\\\\/\\\\.\\\\-]([0-9]{4}|[0-9]{2}))?\" +\n        \"(\\\\W|$)\",\n    \"i\"\n);\n\nconst OPENING_GROUP = 1;\nconst ENDING_GROUP = 5;\n\nconst FIRST_NUMBERS_GROUP = 2;\nconst SECOND_NUMBERS_GROUP = 3;\n\nconst YEAR_GROUP = 4;\n\nexport default class SlashDateFormatParser implements Parser {\n    groupNumberMonth: number;\n    groupNumberDay: number;\n\n    constructor(littleEndian: boolean) {\n        this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;\n        this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;\n    }\n\n    pattern(): RegExp {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        // Because of how pattern is executed on remaining text in `chrono.ts`, the character before the match could\n        // still be a number (e.g. X[X/YY/ZZ] or XX[/YY/ZZ] or [XX/YY/]ZZ). We want to check and skip them.\n        if (match[OPENING_GROUP].length == 0 && match.index > 0 && match.index < context.text.length) {\n            const previousChar = context.text[match.index - 1];\n            if (previousChar >= \"0\" && previousChar <= \"9\") {\n                return;\n            }\n        }\n\n        const index = match.index + match[OPENING_GROUP].length;\n        const text = match[0].substr(\n            match[OPENING_GROUP].length,\n            match[0].length - match[OPENING_GROUP].length - match[ENDING_GROUP].length\n        );\n\n        // '1.12', '1.12.12' is more like a version numbers\n        if (text.match(/^\\d\\.\\d$/) || text.match(/^\\d\\.\\d{1,2}\\.\\d{1,2}\\s*$/)) {\n            return;\n        }\n\n        // MM/dd -> OK\n        // MM.dd -> NG\n        if (!match[YEAR_GROUP] && match[0].indexOf(\"/\") < 0) {\n            return;\n        }\n\n        const result = context.createParsingResult(index, text);\n        let month = parseInt(match[this.groupNumberMonth]);\n        let day = parseInt(match[this.groupNumberDay]);\n\n        if (month < 1 || month > 12) {\n            if (month > 12) {\n                if (day >= 1 && day <= 12 && month <= 31) {\n                    [day, month] = [month, day];\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        if (day < 1 || day > 31) {\n            return null;\n        }\n\n        result.start.assign(\"day\", day);\n        result.start.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const rawYearNumber = parseInt(match[YEAR_GROUP]);\n            const year = findMostLikelyADYear(rawYearNumber);\n            result.start.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        return result;\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nconst PATTERN_NO_ABBR = new RegExp(\n    `(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private allowAbbreviations: boolean = true) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.allowAbbreviations ? PATTERN : PATTERN_NO_ABBR;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseTimeUnits(match[2]);\n        switch (prefix) {\n            case \"last\":\n            case \"past\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { MergingRefiner } from \"../../../common/abstractRefiners\";\nimport { ParsingComponents, ParsingResult, ReferenceWithTimezone } from \"../../../results\";\nimport { parseTimeUnits } from \"../constants\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nfunction hasImpliedEarlierReferenceDate(result: ParsingResult): boolean {\n    return result.text.match(/\\s+(before|from)$/i) != null;\n}\n\nfunction hasImpliedLaterReferenceDate(result: ParsingResult): boolean {\n    return result.text.match(/\\s+(after|since)$/i) != null;\n}\n\n/**\n * Merges an absolute date with a relative date.\n * - 2 weeks before 2020-02-13\n * - 2 days after next Friday\n */\nexport default class ENMergeRelativeDateRefiner extends MergingRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*$/i;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        // Dates need to be next to each other to get merged\n        if (!textBetween.match(this.patternBetween())) {\n            return false;\n        }\n\n        // Check if any relative tokens were swallowed by the first date.\n        // E.g. [<relative_date1> from] [<date2>]\n        if (!hasImpliedEarlierReferenceDate(currentResult) && !hasImpliedLaterReferenceDate(currentResult)) {\n            return false;\n        }\n\n        // make sure that <date2> implies an absolute date\n        return !!nextResult.start.get(\"day\") && !!nextResult.start.get(\"month\") && !!nextResult.start.get(\"year\");\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        let timeUnits = parseTimeUnits(currentResult.text);\n        if (hasImpliedEarlierReferenceDate(currentResult)) {\n            timeUnits = reverseTimeUnits(timeUnits);\n        }\n\n        const components = ParsingComponents.createRelativeFromReference(\n            new ReferenceWithTimezone(nextResult.start.date()),\n            timeUnits\n        );\n\n        return new ParsingResult(\n            nextResult.reference,\n            currentResult.index,\n            `${currentResult.text}${textBetween}${nextResult.text}`,\n            components\n        );\n    }\n}\n", "/**\n * Chrono components for English support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport ENTimeUnitWithinFormatParser from \"./parsers/ENTimeUnitWithinFormatParser\";\nimport ENMonthNameLittleEndianParser from \"./parsers/ENMonthNameLittleEndianParser\";\nimport ENMonthNameMiddleEndianParser from \"./parsers/ENMonthNameMiddleEndianParser\";\nimport ENMonthNameParser from \"./parsers/ENMonthNameParser\";\nimport ENCasualYearMonthDayParser from \"./parsers/ENCasualYearMonthDayParser\";\nimport ENSlashMonthFormatParser from \"./parsers/ENSlashMonthFormatParser\";\nimport ENTimeExpressionParser from \"./parsers/ENTimeExpressionParser\";\nimport ENTimeUnitAgoFormatParser from \"./parsers/ENTimeUnitAgoFormatParser\";\nimport ENTimeUnitLaterFormatParser from \"./parsers/ENTimeUnitLaterFormatParser\";\nimport ENMergeDateRangeRefiner from \"./refiners/ENMergeDateRangeRefiner\";\nimport ENMergeDateTimeRefiner from \"./refiners/ENMergeDateTimeRefiner\";\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport ENCasualDateParser from \"./parsers/ENCasualDateParser\";\nimport ENCasualTimeParser from \"./parsers/ENCasualTimeParser\";\nimport ENWeekdayParser from \"./parsers/ENWeekdayParser\";\nimport ENRelativeDateFormatParser from \"./parsers/ENRelativeDateFormatParser\";\n\nimport { ParsedResult, ParsingOption } from \"../../index\";\nimport { Chrono, Configuration } from \"../../chrono\";\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ENTimeUnitCasualRelativeFormatParser from \"./parsers/ENTimeUnitCasualRelativeFormatParser\";\nimport ENMergeRelativeDateRefiner from \"./refiners/ENMergeRelativeDateRefiner\";\n\n/**\n * Chrono object configured for parsing *casual* English\n */\nexport const casual = new Chrono(createCasualConfiguration(false));\n\n/**\n * Chrono object configured for parsing *strict* English\n */\nexport const strict = new Chrono(createConfiguration(true, false));\n\n/**\n * Chrono object configured for parsing *UK-style* English\n */\nexport const GB = new Chrono(createConfiguration(false, true));\n\n/**\n * A shortcut for en.casual.parse()\n */\nexport function parse(text: string, ref?: Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for en.casual.parseDate()\n */\nexport function parseDate(text: string, ref?: Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n\n/**\n * Create a default *casual* {@Link Configuration} for English chrono.\n * It calls {@Link createConfiguration} and includes additional parsers.\n */\nexport function createCasualConfiguration(littleEndian = false): Configuration {\n    const option = createConfiguration(false, littleEndian);\n    option.parsers.unshift(new ENCasualDateParser());\n    option.parsers.unshift(new ENCasualTimeParser());\n    option.parsers.unshift(new ENMonthNameParser());\n    option.parsers.unshift(new ENRelativeDateFormatParser());\n    option.parsers.unshift(new ENTimeUnitCasualRelativeFormatParser());\n    return option;\n}\n\n/**\n * Create a default {@Link Configuration} for English chrono\n *\n * @param strictMode If the timeunit mentioning should be strict, not casual\n * @param littleEndian If format should be date-first/littleEndian (e.g. en_UK), not month-first/middleEndian (e.g. en_US)\n */\nexport function createConfiguration(strictMode = true, littleEndian = false): Configuration {\n    return includeCommonConfiguration(\n        {\n            parsers: [\n                new SlashDateFormatParser(littleEndian),\n                new ENTimeUnitWithinFormatParser(strictMode),\n                new ENMonthNameLittleEndianParser(),\n                new ENMonthNameMiddleEndianParser(),\n                new ENWeekdayParser(),\n                new ENCasualYearMonthDayParser(),\n                new ENSlashMonthFormatParser(),\n                new ENTimeExpressionParser(strictMode),\n                new ENTimeUnitAgoFormatParser(strictMode),\n                new ENTimeUnitLaterFormatParser(strictMode),\n            ],\n            refiners: [new ENMergeRelativeDateRefiner(), new ENMergeDateTimeRefiner(), new ENMergeDateRangeRefiner()],\n        },\n        strictMode\n    );\n}\n", "import { DebugHandler, DebugConsume } from \"./debugging\";\nimport * as en from \"./locales/en\";\nimport { Chrono, Parser, Refiner } from \"./chrono\";\nimport type { ParsingResult } from \"./results\";\n\nexport { en, Chrono, Parser, Refiner, ParsingResult };\n\nexport interface ParsingOption {\n    /**\n     * To parse only forward dates (the results should be after the reference date).\n     * This effects date/time implication (e.g. weekday or time mentioning)\n     */\n    forwardDate?: boolean;\n\n    /**\n     * Additional timezone keywords for the parsers to recognize.\n     * Any value provided will override the default handling of that value.\n     */\n    timezones?: TimezoneAbbrMap;\n\n    /**\n     * Internal debug event handler.\n     * @internal\n     */\n    debug?: DebugHandler | DebugConsume;\n}\n\n/**\n * Some timezone abbreviations are ambiguous in that they refer to different offsets\n * depending on the time of year \u2014 daylight savings time (DST), or non-DST. This interface\n * allows defining such timezones\n */\nexport interface AmbiguousTimezoneMap {\n    timezoneOffsetDuringDst: number;\n    timezoneOffsetNonDst: number;\n    /**\n     * Return the start date of DST for the given year.\n     * timezone.ts contains helper methods for common such rules.\n     */\n    dstStart: (year: number) => Date;\n    /**\n     * Return the end date of DST for the given year.\n     * timezone.ts contains helper methods for common such rules.\n     */\n    dstEnd: (year: number) => Date;\n}\n\n/**\n * A map describing how timezone abbreviations should map to time offsets.\n * Supports both unambigous mappings abbreviation => offset,\n * and ambiguous mappings, where the offset will depend on whether the\n * time in question is during daylight savings time or not.\n */\nexport type TimezoneAbbrMap = { [key: string]: number | AmbiguousTimezoneMap };\n\nexport interface ParsingReference {\n    /**\n     * Reference date. The instant (JavaScript Date object) when the input is written or mention.\n     * This effect date/time implication (e.g. weekday or time mentioning).\n     * (default = now)\n     */\n    instant?: Date;\n\n    /**\n     * Reference timezone. The timezone where the input is written or mention.\n     * Date/time implication will account the difference between input timezone and the current system timezone.\n     * (default = current timezone)\n     */\n    timezone?: string | number;\n}\n\n/**\n * Parsed result or final output.\n * Each result object represents a date/time (or date/time-range) mentioning in the input.\n */\nexport interface ParsedResult {\n    readonly refDate: Date;\n    readonly index: number;\n    readonly text: string;\n\n    readonly start: ParsedComponents;\n    readonly end?: ParsedComponents;\n\n    /**\n     * Create a javascript date object (from the result.start).\n     */\n    date(): Date;\n}\n\n/**\n * A collection of parsed date/time components (e.g. day, hour, minute, ..., etc).\n *\n * Each parsed component has three different levels of certainty.\n * - *Certain* (or *Known*): The component is directly mentioned and parsed.\n * - *Implied*: The component is not directly mentioned, but implied by other parsed information.\n * - *Unknown*: Completely no mention of the component.\n */\nexport interface ParsedComponents {\n    /**\n     * Check the component certainly if the component is *Certain* (or *Known*)\n     */\n    isCertain(component: Component): boolean;\n\n    /**\n     * Get the component value for either *Certain* or *Implied* value.\n     */\n    get(component: Component): number | null;\n\n    /**\n     * @return a javascript date object.\n     */\n    date(): Date;\n}\n\nexport type Component =\n    | \"year\"\n    | \"month\"\n    | \"day\"\n    | \"weekday\"\n    | \"hour\"\n    | \"minute\"\n    | \"second\"\n    | \"millisecond\"\n    | \"meridiem\"\n    | \"timezoneOffset\";\n\nexport enum Meridiem {\n    AM = 0,\n    PM = 1,\n}\n\nexport enum Weekday {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6,\n}\n\nexport enum Month {\n    JANUARY = 1,\n    FEBRUARY = 2,\n    MARCH = 3,\n    APRIL = 4,\n    MAY = 5,\n    JUNE = 6,\n    JULY = 7,\n    AUGUST = 8,\n    SEPTEMBER = 9,\n    OCTOBER = 10,\n    NOVEMBER = 11,\n    DECEMBER = 12,\n}\n\n// Export all locales\nimport * as de from \"./locales/de\";\nimport * as fr from \"./locales/fr\";\nimport * as ja from \"./locales/ja\";\nimport * as pt from \"./locales/pt\";\nimport * as nl from \"./locales/nl\";\nimport * as zh from \"./locales/zh\";\nimport * as ru from \"./locales/ru\";\nimport * as es from \"./locales/es\";\nexport { de, fr, ja, pt, nl, zh, ru, es };\n\n/**\n * A shortcut for {@link en | chrono.en.strict}\n */\nexport const strict = en.strict;\n\n/**\n * A shortcut for {@link en | chrono.en.casual}\n */\nexport const casual = en.casual;\n\n/**\n * A shortcut for {@link en | chrono.en.casual.parse()}\n */\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for {@link en | chrono.en.casual.parseDate()}\n */\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n", "// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\n// According to the spec BCP 47 language tags are case-insensitive.\r\n// https://tools.ietf.org/html/rfc5646\r\nconst lowercaseLocaleLookup = {}\r\n\r\nexport function getDefaultLocale() {\r\n  return defaultLocale\r\n}\r\n\r\nexport function setDefaultLocale(locale) {\r\n  defaultLocale = locale\r\n}\r\n\r\n/**\r\n * Gets locale data previously added by `addLocaleData()`.\r\n * @return  {object} [localeData]\r\n */\r\nexport function getLocaleData(locale) {\r\n\treturn localesData[locale]\r\n}\r\n\r\n/**\r\n * Adds locale data.\r\n * Is called by `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {object} localeData\r\n */\r\nexport function addLocaleData(localeData) {\r\n  if (!localeData) {\r\n    throw new Error('No locale data passed')\r\n  }\r\n  // This locale data is stored in a global variable\r\n  // and later used when calling `.format(time)`.\r\n  localesData[localeData.locale] = localeData\r\n  lowercaseLocaleLookup[localeData.locale.toLowerCase()] = localeData.locale\r\n}\r\n\r\n/**\r\n * Returns a locale for which locale data has been added\r\n * via `RelativeTimeFormat.addLocale(...)`.\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n */\r\nexport function resolveLocale(locale) {\r\n\tif (localesData[locale]) {\r\n\t\treturn locale\r\n\t}\r\n\tif (lowercaseLocaleLookup[locale.toLowerCase()]) {\r\n\t\treturn lowercaseLocaleLookup[locale.toLowerCase()]\r\n\t}\r\n}", "import {\r\n  resolveLocale as resolveLocaleForData\r\n} from './LocaleDataStore.js'\r\n\r\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * @param  {string} locale\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocale(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocale(\"xx-Latn\")\r\n */\r\nexport default function resolveLocale(locale, options = {}) {\r\n  const localeMatcher = options.localeMatcher || 'lookup'\r\n  switch (localeMatcher) {\r\n    case 'lookup':\r\n      return resolveLocaleLookup(locale)\r\n    // \"best fit\" locale matching is not supported.\r\n    // https://github.com/catamphetamine/relative-time-format/issues/2\r\n    case 'best fit':\r\n      // return resolveLocaleBestFit(locale)\r\n      return resolveLocaleLookup(locale)\r\n    default:\r\n      throw new RangeError(`Invalid \"localeMatcher\" option: ${localeMatcher}`)\r\n  }\r\n}\r\n\r\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * Starts from the most specific locale and gradually\r\n * falls back to less specific ones.\r\n * This is a basic implementation of the \"lookup\" algorithm.\r\n * https://tools.ietf.org/html/rfc4647#section-3.4\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocaleLookup(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocaleLookup(\"xx-Latn\")\r\n */\r\nexport function resolveLocaleLookup(locale) {\r\n  const resolvedLocale = resolveLocaleForData(locale)\r\n  if (resolvedLocale) {\r\n    return resolvedLocale\r\n  }\r\n  // `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\r\n  const parts = locale.split('-')\r\n  while (locale.length > 1) {\r\n    parts.pop()\r\n    locale = parts.join('-')\r\n    const resolvedLocale = resolveLocaleForData(locale)\r\n    if (resolvedLocale) {\r\n      return resolvedLocale\r\n    }\r\n  }\r\n}\r\n", "// (this file was autogenerated by `generate-locales`)\n// \"plural rules\" functions are not stored in locale JSON files because they're not strings.\n// This file isn't big — it's about 5 kilobytes in size (minified).\n// Alternatively, the pluralization rules for each locale could be stored\n// in their JSON files in a non-parsed form and later parsed via `make-plural` library.\n// But `make-plural` library itself is relatively big in size:\n// `make-plural.min.js` is about 6 kilobytes (https://unpkg.com/make-plural/).\n// So, it's more practical to bypass runtime `make-plural` pluralization rules compilation\n// and just include the already compiled pluarlization rules for all locales in the library code.\n\nvar $ = {\n\taf: (n) => n == 1 ? 'one' : 'other',\n\tam: (n) => n >= 0 && n <= 1 ? 'one' : 'other',\n\tar: (n) => {\n\t\tconst s = String(n).split('.'), t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);\n\t\treturn n == 0 ? 'zero'\n\t\t\t: n == 1 ? 'one'\n\t\t\t: n == 2 ? 'two'\n\t\t\t: (n100 >= 3 && n100 <= 10) ? 'few'\n\t\t\t: (n100 >= 11 && n100 <= 99) ? 'many'\n\t\t\t: 'other';\n\t},\n\tast: (n) => {\n\t\tconst s = String(n).split('.'), v0 = !s[1];\n\t\treturn n == 1 && v0 ? 'one' : 'other';\n\t},\n\tbe: (n) => {\n\t\tconst s = String(n).split('.'), t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);\n\t\treturn n10 == 1 && n100 != 11 ? 'one'\n\t\t\t: (n10 >= 2 && n10 <= 4) && (n100 < 12 || n100 > 14) ? 'few'\n\t\t\t: t0 && n10 == 0 || (n10 >= 5 && n10 <= 9) || (n100 >= 11 && n100 <= 14) ? 'many'\n\t\t\t: 'other';\n\t},\n\tbr: (n) => {\n\t\tconst s = String(n).split('.'), t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2), n1000000 = t0 && s[0].slice(-6);\n\t\treturn n10 == 1 && n100 != 11 && n100 != 71 && n100 != 91 ? 'one'\n\t\t\t: n10 == 2 && n100 != 12 && n100 != 72 && n100 != 92 ? 'two'\n\t\t\t: ((n10 == 3 || n10 == 4) || n10 == 9) && (n100 < 10 || n100 > 19) && (n100 < 70 || n100 > 79) && (n100 < 90 || n100 > 99) ? 'few'\n\t\t\t: n != 0 && t0 && n1000000 == 0 ? 'many'\n\t\t\t: 'other';\n\t},\n\tbs: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);\n\t\treturn v0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11 ? 'one'\n\t\t\t: v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14) || (f10 >= 2 && f10 <= 4) && (f100 < 12 || f100 > 14) ? 'few'\n\t\t\t: 'other';\n\t},\n\tca: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1], i1000000 = i.slice(-6);\n\t\treturn n == 1 && v0 ? 'one'\n\t\t\t: i != 0 && i1000000 == 0 && v0 ? 'many'\n\t\t\t: 'other';\n\t},\n\tceb: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), f10 = f.slice(-1);\n\t\treturn v0 && (i == 1 || i == 2 || i == 3) || v0 && i10 != 4 && i10 != 6 && i10 != 9 || !v0 && f10 != 4 && f10 != 6 && f10 != 9 ? 'one' : 'other';\n\t},\n\tcs: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1];\n\t\treturn n == 1 && v0 ? 'one'\n\t\t\t: (i >= 2 && i <= 4) && v0 ? 'few'\n\t\t\t: !v0 ? 'many'\n\t\t\t: 'other';\n\t},\n\tcy: (n) => n == 0 ? 'zero'\n\t\t\t: n == 1 ? 'one'\n\t\t\t: n == 2 ? 'two'\n\t\t\t: n == 3 ? 'few'\n\t\t\t: n == 6 ? 'many'\n\t\t\t: 'other',\n\tda: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], t0 = Number(s[0]) == n;\n\t\treturn n == 1 || !t0 && (i == 0 || i == 1) ? 'one' : 'other';\n\t},\n\tdsb: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i100 = i.slice(-2), f100 = f.slice(-2);\n\t\treturn v0 && i100 == 1 || f100 == 1 ? 'one'\n\t\t\t: v0 && i100 == 2 || f100 == 2 ? 'two'\n\t\t\t: v0 && (i100 == 3 || i100 == 4) || (f100 == 3 || f100 == 4) ? 'few'\n\t\t\t: 'other';\n\t},\n\tdz: (n) => 'other',\n\tes: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1], i1000000 = i.slice(-6);\n\t\treturn n == 1 ? 'one'\n\t\t\t: i != 0 && i1000000 == 0 && v0 ? 'many'\n\t\t\t: 'other';\n\t},\n\tff: (n) => n >= 0 && n < 2 ? 'one' : 'other',\n\tfr: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1], i1000000 = i.slice(-6);\n\t\treturn n >= 0 && n < 2 ? 'one'\n\t\t\t: i != 0 && i1000000 == 0 && v0 ? 'many'\n\t\t\t: 'other';\n\t},\n\tga: (n) => {\n\t\tconst s = String(n).split('.'), t0 = Number(s[0]) == n;\n\t\treturn n == 1 ? 'one'\n\t\t\t: n == 2 ? 'two'\n\t\t\t: (t0 && n >= 3 && n <= 6) ? 'few'\n\t\t\t: (t0 && n >= 7 && n <= 10) ? 'many'\n\t\t\t: 'other';\n\t},\n\tgd: (n) => {\n\t\tconst s = String(n).split('.'), t0 = Number(s[0]) == n;\n\t\treturn (n == 1 || n == 11) ? 'one'\n\t\t\t: (n == 2 || n == 12) ? 'two'\n\t\t\t: ((t0 && n >= 3 && n <= 10) || (t0 && n >= 13 && n <= 19)) ? 'few'\n\t\t\t: 'other';\n\t},\n\the: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1];\n\t\treturn i == 1 && v0 || i == 0 && !v0 ? 'one'\n\t\t\t: i == 2 && v0 ? 'two'\n\t\t\t: 'other';\n\t},\n\tis: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], t = (s[1] || '').replace(/0+$/, ''), t0 = Number(s[0]) == n, i10 = i.slice(-1), i100 = i.slice(-2);\n\t\treturn t0 && i10 == 1 && i100 != 11 || t % 10 == 1 && t % 100 != 11 ? 'one' : 'other';\n\t},\n\tksh: (n) => n == 0 ? 'zero'\n\t\t\t: n == 1 ? 'one'\n\t\t\t: 'other',\n\tlt: (n) => {\n\t\tconst s = String(n).split('.'), f = s[1] || '', t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);\n\t\treturn n10 == 1 && (n100 < 11 || n100 > 19) ? 'one'\n\t\t\t: (n10 >= 2 && n10 <= 9) && (n100 < 11 || n100 > 19) ? 'few'\n\t\t\t: f != 0 ? 'many'\n\t\t\t: 'other';\n\t},\n\tlv: (n) => {\n\t\tconst s = String(n).split('.'), f = s[1] || '', v = f.length, t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2), f100 = f.slice(-2), f10 = f.slice(-1);\n\t\treturn t0 && n10 == 0 || (n100 >= 11 && n100 <= 19) || v == 2 && (f100 >= 11 && f100 <= 19) ? 'zero'\n\t\t\t: n10 == 1 && n100 != 11 || v == 2 && f10 == 1 && f100 != 11 || v != 2 && f10 == 1 ? 'one'\n\t\t\t: 'other';\n\t},\n\tmk: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);\n\t\treturn v0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11 ? 'one' : 'other';\n\t},\n\tmt: (n) => {\n\t\tconst s = String(n).split('.'), t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);\n\t\treturn n == 1 ? 'one'\n\t\t\t: n == 2 ? 'two'\n\t\t\t: n == 0 || (n100 >= 3 && n100 <= 10) ? 'few'\n\t\t\t: (n100 >= 11 && n100 <= 19) ? 'many'\n\t\t\t: 'other';\n\t},\n\tpa: (n) => (n == 0 || n == 1) ? 'one' : 'other',\n\tpl: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2);\n\t\treturn n == 1 && v0 ? 'one'\n\t\t\t: v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14) ? 'few'\n\t\t\t: v0 && i != 1 && (i10 == 0 || i10 == 1) || v0 && (i10 >= 5 && i10 <= 9) || v0 && (i100 >= 12 && i100 <= 14) ? 'many'\n\t\t\t: 'other';\n\t},\n\tpt: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1], i1000000 = i.slice(-6);\n\t\treturn (i == 0 || i == 1) ? 'one'\n\t\t\t: i != 0 && i1000000 == 0 && v0 ? 'many'\n\t\t\t: 'other';\n\t},\n\tro: (n) => {\n\t\tconst s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);\n\t\treturn n == 1 && v0 ? 'one'\n\t\t\t: !v0 || n == 0 || n != 1 && (n100 >= 1 && n100 <= 19) ? 'few'\n\t\t\t: 'other';\n\t},\n\tru: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2);\n\t\treturn v0 && i10 == 1 && i100 != 11 ? 'one'\n\t\t\t: v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14) ? 'few'\n\t\t\t: v0 && i10 == 0 || v0 && (i10 >= 5 && i10 <= 9) || v0 && (i100 >= 11 && i100 <= 14) ? 'many'\n\t\t\t: 'other';\n\t},\n\tse: (n) => n == 1 ? 'one'\n\t\t\t: n == 2 ? 'two'\n\t\t\t: 'other',\n\tsi: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], f = s[1] || '';\n\t\treturn (n == 0 || n == 1) || i == 0 && f == 1 ? 'one' : 'other';\n\t},\n\tsl: (n) => {\n\t\tconst s = String(n).split('.'), i = s[0], v0 = !s[1], i100 = i.slice(-2);\n\t\treturn v0 && i100 == 1 ? 'one'\n\t\t\t: v0 && i100 == 2 ? 'two'\n\t\t\t: v0 && (i100 == 3 || i100 == 4) || !v0 ? 'few'\n\t\t\t: 'other';\n\t}\n}\n\n$.as = $.am\n$.az = $.af\n$.bg = $.af\n$.bn = $.am\n$.brx = $.af\n$.ce = $.af\n$.chr = $.af\n$.de = $.ast\n$.ee = $.af\n$.el = $.af\n$.en = $.ast\n$.et = $.ast\n$.eu = $.af\n$.fa = $.am\n$.fi = $.ast\n$.fil = $.ceb\n$.fo = $.af\n$.fur = $.af\n$.fy = $.ast\n$.gl = $.ast\n$.gu = $.am\n$.ha = $.af\n$.hi = $.am\n$.hr = $.bs\n$.hsb = $.dsb\n$.hu = $.af\n$.hy = $.ff\n$.ia = $.ast\n$.id = $.dz\n$.ig = $.dz\n$.it = $.ca\n$.ja = $.dz\n$.jgo = $.af\n$.jv = $.dz\n$.ka = $.af\n$.kea = $.dz\n$.kk = $.af\n$.kl = $.af\n$.km = $.dz\n$.kn = $.am\n$.ko = $.dz\n$.ks = $.af\n$.ku = $.af\n$.ky = $.af\n$.lb = $.af\n$.lkt = $.dz\n$.lo = $.dz\n$.ml = $.af\n$.mn = $.af\n$.mr = $.af\n$.ms = $.dz\n$.my = $.dz\n$.nb = $.af\n$.ne = $.af\n$.nl = $.ast\n$.nn = $.af\n$.no = $.af\n$.or = $.af\n$.pcm = $.am\n$.ps = $.af\n$.rm = $.af\n$.sah = $.dz\n$.sc = $.ast\n$.sd = $.af\n$.sk = $.cs\n$.so = $.af\n$.sq = $.af\n$.sr = $.bs\n$.su = $.dz\n$.sv = $.ast\n$.sw = $.ast\n$.ta = $.af\n$.te = $.af\n$.th = $.dz\n$.ti = $.pa\n$.tk = $.af\n$.to = $.dz\n$.tr = $.af\n$.ug = $.af\n$.uk = $.ru\n$.ur = $.ast\n$.uz = $.af\n$.vi = $.dz\n$.wae = $.af\n$.wo = $.dz\n$.xh = $.af\n$.yi = $.ast\n$.yo = $.dz\n$.yue = $.dz\n$.zh = $.dz\n$.zu = $.am\n\nexport default $", "/**\r\n * Returns a `locale` for which a function exists in `./PluralRuleFunctions.js`.\r\n * @param  {string} locale\r\n * @return {string}\r\n * @example\r\n * getPluralRulesLocale(\"ru-RU-Cyrl\") // Returns \"ru\".\r\n */\r\nexport default function getPluralRulesLocale(locale) {\r\n\t// \"pt\" language is the only one having different pluralization rules\r\n\t// for the one (\"pt\") (Portuguese) locale and the other (\"pt-PT\") (European Portuguese).\r\n\t// http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\r\n\t// (see the entries for \"pt\" and \"pt_PT\" there)\r\n\tif (locale === 'pt-PT') {\r\n\t\treturn locale\r\n\t}\r\n\treturn getLanguageFromLanguageTag(locale)\r\n}\r\n\r\n/**\r\n * Extracts language from an IETF BCP 47 language tag.\r\n * @param {string} languageTag - IETF BCP 47 language tag.\r\n * @return {string}\r\n * @example\r\n * // Returns \"he\"\r\n * getLanguageFromLanguageTag(\"he-IL-u-ca-hebrew-tz-jeruslm\")\r\n * // Returns \"ar\"\r\n * getLanguageFromLanguageTag(\"ar-u-nu-latn\")\r\n */\r\nconst LANGUAGE_REG_EXP = /^([a-z0-9]+)/i\r\nfunction getLanguageFromLanguageTag(languageTag) {\r\n\tconst match = languageTag.match(LANGUAGE_REG_EXP)\r\n\tif (!match) {\r\n\t\tthrow new TypeError(`Invalid locale: ${languageTag}`)\r\n\t}\r\n\treturn match[1]\r\n}\r\n", "// Importing `PluralRule` polyfill from a separate package\r\n// results in a bundle that is larger by 1kB for some reason.\r\n// export { default as default } from 'intl-plural-rules-polyfill/cardinal'\r\n\r\nimport PluralRuleFunctions from \"./PluralRuleFunctions.js\"\r\nimport getPluralRulesLocale from \"./getPluralRulesLocale.js\"\r\n\r\n/**\r\n * `Intl.PluralRules` polyfill.\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules\r\n */\r\nexport default class PluralRules {\r\n\tconstructor(locale, options) {\r\n\t\tconst locales = PluralRules.supportedLocalesOf(locale)\r\n\t\tif (locales.length === 0) {\r\n\t\t\tthrow new RangeError(\"Unsupported locale: \" + locale)\r\n\t\t}\r\n\t\tif (options && options.type !== \"cardinal\") {\r\n\t\t\tthrow new RangeError(\"Only \\\"cardinal\\\" \\\"type\\\" is supported\")\r\n\t\t}\r\n\t\tthis.$ = PluralRuleFunctions[getPluralRulesLocale(locales[0])]\r\n\t}\r\n\tselect(number) {\r\n\t\treturn this.$(number)\r\n\t}\r\n\tstatic supportedLocalesOf(locales) {\r\n\t\tif (typeof locales === \"string\") {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\t\treturn locales.filter(locale => PluralRuleFunctions[getPluralRulesLocale(locale)])\r\n\t}\r\n}", "import {\r\n  getDefaultLocale,\r\n  setDefaultLocale,\r\n  getLocaleData,\r\n  addLocaleData\r\n} from './LocaleDataStore.js'\r\n\r\nimport resolveLocale from './resolveLocale.js'\r\nimport PluralRules from './PluralRules.js'\r\n// Importing `PluralRule` polyfill from a separate package\r\n// results in a bundle that is larger by 1kB for some reason.\r\n// import PluralRules from 'intl-plural-rules-polyfill/cardinal'\r\n\r\n// Valid time units.\r\nexport const UNITS = [\r\n  \"second\",\r\n  \"minute\",\r\n  \"hour\",\r\n  \"day\",\r\n  \"week\",\r\n  \"month\",\r\n  \"quarter\",\r\n  \"year\"\r\n]\r\n\r\n// Valid values for the `numeric` option.\r\nconst NUMERIC_VALUES = [\r\n  \"auto\",\r\n  \"always\"\r\n]\r\n\r\n// Valid values for the `style` option.\r\nconst STYLE_VALUES = [\r\n  \"long\",\r\n  \"short\",\r\n  \"narrow\"\r\n]\r\n\r\n// Valid values for the `localeMatcher` option.\r\nconst LOCALE_MATCHER_VALUES = [\r\n  \"lookup\",\r\n  \"best fit\"\r\n]\r\n\r\n/**\r\n * Polyfill for `Intl.RelativeTimeFormat` proposal.\r\n * https://github.com/tc39/proposal-intl-relative-time\r\n * https://github.com/tc39/proposal-intl-relative-time/issues/55\r\n */\r\nexport default class RelativeTimeFormat {\r\n  /**\r\n   * @param {(string|string[])} [locales] - Preferred locales (or locale).\r\n   * @param {Object} [options] - Formatting options.\r\n   * @param {string} [options.style=\"long\"] - One of: \"long\", \"short\", \"narrow\".\r\n   * @param {string} [options.numeric=\"always\"] - (Version >= 2) One of: \"always\", \"auto\".\r\n   * @param {string} [options.localeMatcher=\"lookup\"] - One of: \"lookup\", \"best fit\". Currently only \"lookup\" is supported.\r\n   */\r\n  constructor(locales = [], options = {}) {\r\n    const {\r\n      numeric,\r\n      style,\r\n      localeMatcher\r\n    } = options\r\n\r\n    this.numeric = \"always\"\r\n    this.style = \"long\"\r\n    this.localeMatcher = \"lookup\"\r\n\r\n    // Set `numeric` option.\r\n    if (numeric !== undefined) {\r\n      if (NUMERIC_VALUES.indexOf(numeric) < 0) {\r\n        throw new RangeError(`Invalid \"numeric\" option: ${numeric}`)\r\n      }\r\n      this.numeric = numeric\r\n    }\r\n\r\n    // Set `style` option.\r\n    if (style !== undefined) {\r\n      if (STYLE_VALUES.indexOf(style) < 0) {\r\n        throw new RangeError(`Invalid \"style\" option: ${style}`)\r\n      }\r\n      this.style = style\r\n    }\r\n\r\n    // Set `localeMatcher` option.\r\n    if (localeMatcher !== undefined) {\r\n      if (LOCALE_MATCHER_VALUES.indexOf(localeMatcher) < 0) {\r\n        throw new RangeError(`Invalid \"localeMatcher\" option: ${localeMatcher}`)\r\n      }\r\n      this.localeMatcher = localeMatcher\r\n    }\r\n\r\n    // Set `locale`.\r\n    // Convert `locales` to an array.\r\n    if (typeof locales === 'string') {\r\n      locales = [locales]\r\n    }\r\n    // Add default locale.\r\n    locales.push(getDefaultLocale())\r\n    // Choose the most appropriate locale.\r\n    this.locale = RelativeTimeFormat.supportedLocalesOf(locales, {\r\n      localeMatcher: this.localeMatcher\r\n    })[0]\r\n    if (!this.locale) {\r\n      throw new Error(\"No supported locale was found\")\r\n    }\r\n\r\n    // Construct an `Intl.PluralRules` instance (polyfill).\r\n    if (PluralRules.supportedLocalesOf(this.locale).length > 0) {\r\n      this.pluralRules = new PluralRules(this.locale)\r\n    } else {\r\n      console.warn(`\"${this.locale}\" locale is not supported`)\r\n    }\r\n\r\n    // Use `Intl.NumberFormat` for formatting numbers (when available).\r\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n      this.numberFormat = new Intl.NumberFormat(this.locale)\r\n      this.numberingSystem = this.numberFormat.resolvedOptions().numberingSystem\r\n    } else {\r\n      this.numberingSystem = 'latn'\r\n    }\r\n\r\n    this.locale = resolveLocale(this.locale, {\r\n      localeMatcher: this.localeMatcher\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Formats time `number` in `units` (either in past or in future).\r\n   * @param {number} number - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"2 days ago\"\r\n   * rtf.format(-2, \"day\")\r\n   * // Returns \"in 5 minutes\"\r\n   * rtf.format(5, \"minute\")\r\n   */\r\n  format() {\r\n    const [number, unit] = parseFormatArgs(arguments)\r\n    return this.getRule(number, unit).replace('{0}', this.formatNumber(Math.abs(number)))\r\n  }\r\n\r\n  /**\r\n   * Formats time `number` in `units` (either in past or in future).\r\n   * @param {number} number - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {Object[]} The parts (`{ type, value, unit? }`).\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Version 1 (deprecated).\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"day\", value: \"100\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   * //\r\n   * // Version 2.\r\n   * // Returns [\r\n   * //   { type: \"literal\", value: \"in \" },\r\n   * //   { type: \"integer\", value: \"100\", unit: \"day\" },\r\n   * //   { type: \"literal\", value: \" days\" }\r\n   * // ]\r\n   * rtf.formatToParts(100, \"day\")\r\n   */\r\n  formatToParts() {\r\n    const [number, unit] = parseFormatArgs(arguments)\r\n    const rule = this.getRule(number, unit)\r\n    const valueIndex = rule.indexOf(\"{0}\")\r\n    // \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (valueIndex < 0) {\r\n      return [{\r\n        type: \"literal\",\r\n        value: rule\r\n      }]\r\n    }\r\n    let parts = []\r\n    if (valueIndex > 0) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(0, valueIndex)\r\n      })\r\n    }\r\n    parts = parts.concat(\r\n      this.formatNumberToParts(Math.abs(number))\r\n        .map(part => ({ ...part, unit }))\r\n    )\r\n    if (valueIndex + \"{0}\".length < rule.length - 1) {\r\n      parts.push({\r\n        type: \"literal\",\r\n        value: rule.slice(valueIndex + \"{0}\".length)\r\n      })\r\n    }\r\n    return parts\r\n  }\r\n\r\n  /**\r\n   * Returns formatting rule for `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"{0} days ago\"\r\n   * getRule(-2, \"day\")\r\n   */\r\n  getRule(value, unit) {\r\n    // Get locale-specific time interval formatting rules\r\n    // of a given `style` for the given value of measurement `unit`.\r\n    //\r\n    // E.g.:\r\n    //\r\n    // ```json\r\n    // {\r\n    //  \"past\": {\r\n    //    \"one\": \"a second ago\",\r\n    //    \"other\": \"{0} seconds ago\"\r\n    //  },\r\n    //  \"future\": {\r\n    //    \"one\": \"in a second\",\r\n    //    \"other\": \"in {0} seconds\"\r\n    //  }\r\n    // }\r\n    // ```\r\n    //\r\n    const unitMessages = getLocaleData(this.locale)[this.style][unit]\r\n    // Bundle size optimization technique for styles like\r\n    // \"tiny\" in `javascript-time-ago`: \"1m\", \"2h\", \"3d\"...\r\n    if (typeof unitMessages === 'string') {\r\n      return unitMessages\r\n    }\r\n    // Special case for \"yesterday\"/\"today\"/\"tomorrow\".\r\n    if (this.numeric === \"auto\") {\r\n      // \"yesterday\", \"the day before yesterday\", etc.\r\n      if (value === -2 || value === -1) {\r\n        const message = unitMessages[`previous${value === -1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"tomorrow\", \"the day after tomorrow\", etc.\r\n      else if (value === 1 || value === 2) {\r\n        const message = unitMessages[`next${value === 1 ? '' : '-' + Math.abs(value)}`]\r\n        if (message) {\r\n          return message\r\n        }\r\n      }\r\n      // \"today\"\r\n      else if (value === 0) {\r\n        if (unitMessages.current) {\r\n          return unitMessages.current\r\n        }\r\n      }\r\n    }\r\n    // Choose either \"past\" or \"future\" based on time `value` sign.\r\n    // If there's only \"other\" then it's being collapsed.\r\n    // (the resulting bundle size optimization technique)\r\n    const pluralizedMessages = unitMessages[isNegative(value) ? \"past\" : \"future\"]\r\n    // Bundle size optimization technique for styles like \"narrow\"\r\n    // having messages like \"in {0} d.\" or \"{0} d. ago\".\r\n    if (typeof pluralizedMessages === \"string\") {\r\n      return pluralizedMessages\r\n    }\r\n    // Quantify `value`.\r\n    // There seems to be no such locale in CLDR\r\n    // for which \"plural rules\" function is missing.\r\n    const quantifier = this.pluralRules && this.pluralRules.select(Math.abs(value)) || 'other'\r\n    // \"other\" rule is supposed to be always present.\r\n    // If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n    return pluralizedMessages[quantifier] || pluralizedMessages.other\r\n  }\r\n\r\n  /**\r\n   * Formats a number into a string.\r\n   * Uses `Intl.NumberFormat` when available.\r\n   * @param  {number} number\r\n   * @return {string}\r\n   */\r\n  formatNumber(number) {\r\n    return this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n  }\r\n\r\n  /**\r\n   * Formats a number into a list of parts.\r\n   * Uses `Intl.NumberFormat` when available.\r\n   * @param  {number} number\r\n   * @return {object[]}\r\n   */\r\n  formatNumberToParts(number) {\r\n    // `Intl.NumberFormat.formatToParts()` is not present, for example,\r\n    // in Node.js 8.x while `Intl.NumberFormat` itself is present.\r\n    return this.numberFormat && this.numberFormat.formatToParts ?\r\n      this.numberFormat.formatToParts(number) :\r\n      [{\r\n        type: \"integer\",\r\n        value: this.formatNumber(number)\r\n      }]\r\n  }\r\n\r\n  /**\r\n   * Returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\r\n   * @return {Object}\r\n   */\r\n  resolvedOptions() {\r\n    return {\r\n      locale: this.locale,\r\n      style: this.style,\r\n      numeric: this.numeric,\r\n      numberingSystem: this.numberingSystem\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns an array containing those of the provided locales\r\n * that are supported in collation without having to fall back\r\n * to the runtime's default locale.\r\n * @param {(string|string[])} locale - A string with a BCP 47 language tag, or an array of such strings. For the general form of the locales argument, see the Intl page.\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string[]} An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\r\n * @example\r\n * var locales = ['ban', 'id-u-co-pinyin', 'es-PY']\r\n * var options = { localeMatcher: 'lookup' }\r\n * // Returns [\"id\", \"es-PY\"]\r\n * Intl.RelativeTimeFormat.supportedLocalesOf(locales, options)\r\n */\r\nRelativeTimeFormat.supportedLocalesOf = function(locales, options = {}) {\r\n  // Convert `locales` to an array.\r\n  if (typeof locales === 'string') {\r\n    locales = [locales]\r\n  } else if (!Array.isArray(locales)) {\r\n    throw new TypeError('Invalid \"locales\" argument')\r\n  }\r\n  return locales.filter(locale => resolveLocale(locale, options))\r\n}\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nRelativeTimeFormat.addLocale = addLocaleData\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nRelativeTimeFormat.setDefaultLocale = setDefaultLocale\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nRelativeTimeFormat.getDefaultLocale = getDefaultLocale\r\n\r\n/**\r\n * Export `Intl.PluralRules` just in case it's used somewhere else.\r\n */\r\nRelativeTimeFormat.PluralRules = PluralRules\r\n\r\n// The specification allows units to be in plural form.\r\n// Convert plural to singular.\r\n// Example: \"seconds\" -> \"second\".\r\nconst UNIT_ERROR = 'Invalid \"unit\" argument'\r\nfunction parseUnit(unit) {\r\n  if (typeof unit === 'symbol') {\r\n    throw new TypeError(UNIT_ERROR)\r\n  }\r\n  if (typeof unit !== 'string') {\r\n    throw new RangeError(`${UNIT_ERROR}: ${unit}`)\r\n  }\r\n  if (unit[unit.length - 1] === 's') {\r\n    unit = unit.slice(0, unit.length - 1)\r\n  }\r\n  if (UNITS.indexOf(unit) < 0) {\r\n    throw new RangeError(`${UNIT_ERROR}: ${unit}`)\r\n  }\r\n  return unit\r\n}\r\n\r\n// Converts `value` to a `Number`.\r\n// The specification allows value to be a non-number.\r\n// For example, \"-0\" is supposed to be treated as `-0`.\r\n// Also checks if `value` is a finite number.\r\nconst NUMBER_ERROR = 'Invalid \"number\" argument'\r\nfunction parseNumber(value) {\r\n  value = Number(value)\r\n  if (Number.isFinite) {\r\n    if (!Number.isFinite(value)) {\r\n      throw new RangeError(`${NUMBER_ERROR}: ${value}`)\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\n/**\r\n * Tells `0` from `-0`.\r\n * https://stackoverflow.com/questions/7223359/are-0-and-0-the-same\r\n * @param  {number} number\r\n * @return {Boolean}\r\n * @example\r\n * isNegativeZero(0); // false\r\n * isNegativeZero(-0); // true\r\n */\r\nfunction isNegativeZero(number) {\r\n  return 1 / number === -Infinity\r\n}\r\n\r\nfunction isNegative(number) {\r\n  return number < 0 || number === 0 && isNegativeZero(number)\r\n}\r\n\r\nfunction parseFormatArgs(args) {\r\n  if (args.length < 2) {\r\n    throw new TypeError(`\"unit\" argument is required`)\r\n  }\r\n  return [\r\n    parseNumber(args[0]),\r\n    parseUnit(args[1])\r\n  ]\r\n}", "/**\r\n * A basic in-memory cache.\r\n *\r\n * import Cache from 'javascript-time-ago/Cache'\r\n * const cache = new Cache()\r\n * const object = cache.get('key1', 'key2', ...) || cache.put('key1', 'key2', ..., createObject())\r\n */\r\nexport default class Cache {\r\n\tconstructor() {\r\n\t\tthis.cache = {}\r\n\t}\r\n\r\n\tget(...keys) {\r\n\t\tlet cache = this.cache\r\n\t\tfor (const key of keys) {\r\n\t\t\tif (typeof cache !== 'object') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tcache = cache[key]\r\n\t\t}\r\n\t\treturn cache\r\n\t}\r\n\r\n\tput(...keys) {\r\n\t\tconst value = keys.pop()\r\n\t\tconst lastKey = keys.pop()\r\n\t\tlet cache = this.cache\r\n\t\tfor (const key of keys) {\r\n\t\t\tif (typeof cache[key] !== 'object') {\r\n\t\t\t\tcache[key] = {}\r\n\t\t\t}\r\n\t\t\tcache = cache[key]\r\n\t\t}\r\n\t\treturn cache[lastKey] = value\r\n\t}\r\n}", "/**\r\n * Chooses the most appropriate locale\r\n * (one of the registered ones)\r\n * based on the list of preferred `locales` supplied by the user.\r\n *\r\n * @param {string[]} locales - the list of preferable locales (in [IETF format](https://en.wikipedia.org/wiki/IETF_language_tag)).\r\n * @param {Function} isLocaleDataAvailable - tests if a locale is available.\r\n *\r\n * @returns {string} The most suitable locale.\r\n *\r\n * @example\r\n * // Returns 'en'\r\n * chooseLocale(['en-US'], undefined, (locale) => locale === 'ru' || locale === 'en')\r\n */\r\nexport default function chooseLocale(locales, isLocaleDataAvailable) {\r\n\t// This is not an intelligent algorithm,\r\n\t// but it will do for this library's case.\r\n\t// `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\r\n\tfor (let locale of locales) {\r\n\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\treturn locale\r\n\t\t}\r\n\t\tconst parts = locale.split('-')\r\n\t\twhile (parts.length > 1) {\r\n\t\t\tparts.pop()\r\n\t\t\tlocale = parts.join('-')\r\n\t\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\t\treturn locale\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthrow new Error(`No locale data has been registered for any of the locales: ${locales.join(', ')}`)\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\r\nexport function intlDateTimeFormatSupportedLocale(locales) {\r\n\t/* istanbul ignore else */\r\n\tif (intlDateTimeFormatSupported()) {\r\n\t\treturn Intl.DateTimeFormat.supportedLocalesOf(locales)[0]\r\n\t}\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\r\nexport function intlDateTimeFormatSupported() {\r\n\t// Babel transforms `typeof` into some \"branches\"\r\n\t// so istanbul will show this as \"branch not covered\".\r\n\t/* istanbul ignore next */\r\n\tconst isIntlAvailable = typeof Intl === 'object'\r\n\treturn isIntlAvailable && typeof Intl.DateTimeFormat === 'function'\r\n}\r\n", "export default function isStyleObject(object) {\r\n\treturn isObject(object) && (\r\n\t\tArray.isArray(object.steps) ||\r\n\t\t// `gradation` property is deprecated: it has been renamed to `steps`.\r\n\t\tArray.isArray(object.gradation) ||\r\n\t\t// `flavour` property is deprecated: it has been renamed to `labels`.\r\n\t\tArray.isArray(object.flavour) ||\r\n\t\ttypeof object.flavour === 'string' ||\r\n\t\tArray.isArray(object.labels) ||\r\n\t\ttypeof object.labels === 'string' ||\r\n\t\t// `units` property is deprecated.\r\n\t\tArray.isArray(object.units) ||\r\n\t\t// `custom` property is deprecated.\r\n\t\ttypeof object.custom === 'function'\r\n\t)\r\n}\r\n\r\nconst OBJECT_CONSTRUCTOR = {}.constructor\r\nfunction isObject(object) {\r\n\treturn typeof object !== undefined && object !== null && object.constructor === OBJECT_CONSTRUCTOR\r\n}", "export const minute = 60 // in seconds\r\n\r\nexport const hour = 60 * minute // in seconds\r\n\r\nexport const day = 24 * hour // in seconds\r\n\r\nexport const week = 7 * day // in seconds\r\n\r\n// https://www.quora.com/What-is-the-average-number-of-days-in-a-month\r\nexport const month = 30.44 * day // in seconds\r\n\r\n// \"400 years have 146097 days (taking into account leap year rules)\"\r\nexport const year = (146097 / 400) * day // in seconds\r\n\r\nexport function getSecondsInUnit(unit) {\r\n\tswitch (unit) {\r\n\t\tcase 'second':\r\n\t\t\treturn 1\r\n\t\tcase 'minute':\r\n\t\t\treturn minute\r\n\t\tcase 'hour':\r\n\t\t\treturn hour\r\n\t\tcase 'day':\r\n\t\t\treturn day\r\n\t\tcase 'week':\r\n\t\t\treturn week\r\n\t\tcase 'month':\r\n\t\t\treturn month\r\n\t\tcase 'year':\r\n\t\t\treturn year\r\n\t}\r\n}\r\n\r\n// export function getPreviousUnitFor(unit) {\r\n// \tswitch (unit) {\r\n// \t\tcase 'second':\r\n// \t\t\treturn 'now'\r\n// \t\tcase 'minute':\r\n// \t\t\treturn 'second'\r\n// \t\tcase 'hour':\r\n// \t\t\treturn 'minute'\r\n// \t\tcase 'day':\r\n// \t\t\treturn 'hour'\r\n// \t\tcase 'week':\r\n// \t\t\treturn 'day'\r\n// \t\tcase 'month':\r\n// \t\t\treturn 'week'\r\n// \t\tcase 'year':\r\n// \t\t\treturn 'month'\r\n// \t}\r\n// }", "import { getSecondsInUnit } from './units.js'\r\n\r\nexport default function getStepDenominator(step) {\r\n\t// `factor` is a legacy property.\r\n\tif (step.factor !== undefined) {\r\n\t\treturn step.factor\r\n\t}\r\n\t// \"unit\" is now called \"formatAs\".\r\n\treturn getSecondsInUnit(step.unit || step.formatAs) || 1\r\n}", "export function getRoundFunction(round) {\r\n\tswitch (round) {\r\n\t\tcase 'floor':\r\n\t\t\treturn Math.floor\r\n\t\tdefault:\r\n\t\t\treturn Math.round\r\n\t}\r\n}\r\n\r\n// For non-negative numbers.\r\nexport function getDiffRatioToNextRoundedNumber(round) {\r\n\tswitch (round) {\r\n\t\tcase 'floor':\r\n\t\t\t// Math.floor(x) = x\r\n\t\t\t// Math.floor(x + 1) = x + 1\r\n\t\t\treturn 1\r\n\t\tdefault:\r\n\t\t\t// Math.round(x) = x\r\n\t\t\t// Math.round(x + 0.5) = x + 1\r\n\t\t\treturn 0.5\r\n\t}\r\n}", "import { getSecondsInUnit } from './units.js'\r\nimport { getDiffRatioToNextRoundedNumber } from '../round.js'\r\n\r\nexport default function getStepMinTime(step, {\r\n\tprevStep,\r\n\ttimestamp,\r\n\t// `now` argument is used in a deprecated `step.test()` function.\r\n\tnow,\r\n\tfuture,\r\n\tround\r\n}) {\r\n\tlet minTime\r\n\t// \"threshold_for_xxx\" is a legacy property.\r\n\tif (prevStep) {\r\n\t\tif (prevStep.id || prevStep.unit) {\r\n\t\t\tminTime = step[`threshold_for_${prevStep.id || prevStep.unit}`]\r\n\t\t}\r\n\t}\r\n\tif (minTime === undefined) {\r\n\t\t// \"threshold\" is a legacy property.\r\n\t\tif (step.threshold !== undefined) {\r\n\t\t\t// \"threshold\" is a legacy name for \"minTime\".\r\n\t\t\tminTime = step.threshold\r\n\t\t\t// \"threshold\" function is deprecated.\r\n\t\t\tif (typeof minTime === 'function') {\r\n\t\t\t\tminTime = minTime(now, future)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (minTime === undefined) {\r\n\t\tminTime = step.minTime\r\n\t}\r\n\t// A deprecated way of specifying a different threshold\r\n\t// depending on the previous step's unit.\r\n\tif (typeof minTime === 'object') {\r\n\t\tif (prevStep && prevStep.id && minTime[prevStep.id] !== undefined) {\r\n\t\t\tminTime = minTime[prevStep.id]\r\n\t\t} else {\r\n\t\t\tminTime = minTime.default\r\n\t\t}\r\n\t}\r\n\tif (typeof minTime === 'function') {\r\n\t\tminTime = minTime(timestamp, {\r\n\t\t\tfuture,\r\n\t\t\tgetMinTimeForUnit(toUnit, fromUnit) {\r\n\t\t\t\treturn getMinTimeForUnit(\r\n\t\t\t\t\ttoUnit,\r\n\t\t\t\t\tfromUnit || prevStep && prevStep.formatAs,\r\n\t\t\t\t\t{ round }\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\t// Evaluate the `test()` function.\r\n\t// `test()` function is deprecated.\r\n\tif (minTime === undefined) {\r\n\t\tif (step.test) {\r\n\t\t\tif (step.test(timestamp, {\r\n\t\t\t\tnow,\r\n\t\t\t\tfuture\r\n\t\t\t})) {\r\n\t\t\t\t// `0` threshold always passes.\r\n\t\t\t\tminTime = 0\r\n\t\t\t} else {\r\n\t\t\t\t// `MAX_SAFE_INTEGER` threshold won't ever pass in real life.\r\n\t\t\t\tminTime = 9007199254740991 // Number.MAX_SAFE_INTEGER\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (minTime === undefined) {\r\n\t\tif (prevStep) {\r\n\t\t\tif (step.formatAs && prevStep.formatAs) {\r\n\t\t\t\tminTime = getMinTimeForUnit(step.formatAs, prevStep.formatAs, { round })\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// The first step's `minTime` is `0` by default.\r\n\t\t\tminTime = 0\r\n\t\t}\r\n\t}\r\n\t// Warn if no `minTime` was defined or could be deduced.\r\n\tif (minTime === undefined) {\r\n\t\tconsole.warn('[javascript-time-ago] A step should specify `minTime`:\\n' + JSON.stringify(step, null, 2))\r\n\t}\r\n\treturn minTime\r\n}\r\n\r\nfunction getMinTimeForUnit(toUnit, fromUnit, { round }) {\r\n\tconst toUnitAmount = getSecondsInUnit(toUnit)\r\n\t// if (!fromUnit) {\r\n\t// \treturn toUnitAmount;\r\n\t// }\r\n\t// if (!fromUnit) {\r\n\t// \tfromUnit = getPreviousUnitFor(toUnit)\r\n\t// }\r\n\tlet fromUnitAmount\r\n\tif (fromUnit === 'now') {\r\n\t\tfromUnitAmount = getSecondsInUnit(toUnit)\r\n\t} else {\r\n\t\tfromUnitAmount = getSecondsInUnit(fromUnit)\r\n\t}\r\n\tif (toUnitAmount !== undefined && fromUnitAmount !== undefined) {\r\n\t\treturn toUnitAmount - fromUnitAmount * (1 - getDiffRatioToNextRoundedNumber(round))\r\n\t}\r\n}", "import getStepDenominator from './getStepDenominator.js'\r\nimport getStepMinTime from './getStepMinTime.js'\r\nimport { getRoundFunction } from '../round.js'\r\n\r\n/**\r\n * Finds an appropriate `step` of `steps` for the time interval (in seconds).\r\n *\r\n * @param {Object[]} steps - Time formatting steps.\r\n *\r\n * @param {number} secondsPassed - Time interval (in seconds).\r\n *                                 `< 0` for past dates and `> 0` for future dates.\r\n *\r\n * @param {number} options.now - Current timestamp.\r\n *\r\n * @param {boolean} [options.future] - Whether the date should be formatted as a future one\r\n *                                     instead of a past one.\r\n *\r\n * @param {string} [options.round] - (undocumented) Rounding mechanism.\r\n *\r\n * @param {string[]} [options.units] - A list of allowed time units.\r\n *                                     (Example: ['second', 'minute', 'hour', …])\r\n *\r\n * @param {boolean} [options.getNextStep] - Pass true to return `[step, nextStep]` instead of just `step`.\r\n *\r\n * @return {Object|Object[]} [step] — Either a `step` or `[prevStep, step, nextStep]`.\r\n */\r\nexport default function getStep(steps, secondsPassed, { now, future, round, units, getNextStep }) {\r\n\t// Ignore steps having not-supported time units in `formatAs`.\r\n\tsteps = filterStepsByUnits(steps, units)\r\n\tconst step = _getStep(steps, secondsPassed, { now, future, round })\r\n\tif (getNextStep) {\r\n\t\tif (step) {\r\n\t\t\tconst prevStep = steps[steps.indexOf(step) - 1]\r\n\t\t\tconst nextStep = steps[steps.indexOf(step) + 1]\r\n\t\t\treturn [prevStep, step, nextStep]\r\n\t\t}\r\n\t\treturn [undefined, undefined, steps[0]]\r\n\t}\r\n\treturn step\r\n}\r\n\r\nfunction _getStep(steps, secondsPassed, { now, future, round }) {\r\n\t// If no steps fit the conditions then return nothing.\r\n\tif (steps.length === 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Find the most appropriate step.\r\n\tconst i = getStepIndex(steps, secondsPassed, {\r\n\t\tnow,\r\n\t\tfuture: future || secondsPassed < 0,\r\n\t\tround\r\n\t})\r\n\r\n\t// If no step is applicable the return nothing.\r\n\tif (i === -1) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst step = steps[i]\r\n\r\n\t// Apply granularity to the time amount\r\n\t// (and fall back to the previous step\r\n\t//  if the first level of granularity\r\n\t//  isn't met by this amount)\r\n\tif (step.granularity) {\r\n\t\t// Recalculate the amount of seconds passed based on `granularity`.\r\n\t\tconst secondsPassedGranular = getRoundFunction(round)((Math.abs(secondsPassed) / getStepDenominator(step)) / step.granularity) * step.granularity\r\n\t\t// If the granularity for this step is too high,\r\n\t\t// then fall back to the previous step.\r\n\t\t// (if there is any previous step)\r\n\t\tif (secondsPassedGranular === 0 && i > 0) {\r\n\t\t\treturn steps[i - 1]\r\n\t\t}\r\n\t}\r\n\r\n\treturn step\r\n}\r\n\r\n/**\r\n * Iterates through steps until it finds the maximum one satisfying the `minTime` threshold.\r\n * @param  {Object} steps - Steps.\r\n * @param  {number} secondsPassed - How much seconds have passed since the date till `now`.\r\n * @param  {number} options.now - Current timestamp.\r\n * @param  {boolean} options.future - Whether the time interval should be formatted as a future one.\r\n * @param  {number} [i] - Gradation step currently being tested.\r\n * @return {number} Gradation step index.\r\n */\r\nfunction getStepIndex(steps, secondsPassed, options, i = 0) {\r\n\tconst minTime = getStepMinTime(steps[i], {\r\n\t\tprevStep: steps[i - 1],\r\n\t\ttimestamp: options.now - secondsPassed * 1000,\r\n\t\t...options\r\n\t})\r\n\t// If `minTime` isn't defined or deduceable for this step, then stop.\r\n\tif (minTime === undefined) {\r\n\t\treturn i - 1\r\n\t}\r\n\t// If the `minTime` threshold for moving from previous step\r\n\t// to this step is too high then return the previous step.\r\n\tif (Math.abs(secondsPassed) < minTime) {\r\n\t\treturn i - 1\r\n\t}\r\n\t// If it's the last step then return it.\r\n\tif (i === steps.length - 1) {\r\n\t\treturn i\r\n\t}\r\n\t// Move to the next step.\r\n\treturn getStepIndex(steps, secondsPassed, options, i + 1)\r\n}\r\n\r\n/**\r\n * Leaves only allowed steps.\r\n * @param  {Object[]} steps\r\n * @param  {string[]} units - Allowed time units.\r\n * @return {Object[]}\r\n */\r\nfunction filterStepsByUnits(steps, units) {\r\n\treturn steps.filter(({ unit, formatAs }) => {\r\n\t\t// \"unit\" is now called \"formatAs\".\r\n\t\tunit = unit || formatAs\r\n\t\t// If this step has a `unit` defined\r\n\t\t// then this `unit` must be in the list of allowed `units`.\r\n\t\tif (unit) {\r\n\t\t\treturn units.indexOf(unit) >= 0\r\n\t\t}\r\n\t\t// A step is not required to specify a `unit`:\r\n\t\t// alternatively, it could specify `format()`.\r\n\t\t// (see \"twitter\" style for an example)\r\n\t\treturn true\r\n\t})\r\n}", "import { getSecondsInUnit } from './units.js'\r\nimport { getRoundFunction, getDiffRatioToNextRoundedNumber } from '../round.js'\r\n\r\n/**\r\n * Gets the time to next update for a step with a time unit defined.\r\n * @param  {string} unit\r\n * @param  {number} date — The date passed to `.format()`, converted to a timestamp.\r\n * @param  {number} options.now\r\n * @param  {string} [options.round] — (undocumented) Rounding mechanism.\r\n * @return {number} [timeToNextUpdate]\r\n */\r\nexport default function getTimeToNextUpdateForUnit(unit, timestamp, { now, round }) {\r\n\t// For some units, like \"now\", there's no defined amount of seconds in them.\r\n\tif (!getSecondsInUnit(unit)) {\r\n\t\t// If there's no amount of seconds defined for this unit\r\n\t\t// then the update interval can't be determined reliably.\r\n\t\treturn\r\n\t}\r\n\tconst unitDenominator = getSecondsInUnit(unit) * 1000\r\n\tconst future = timestamp > now\r\n\tconst preciseAmount = Math.abs(timestamp - now)\r\n\tconst roundedAmount = getRoundFunction(round)(preciseAmount / unitDenominator) * unitDenominator\r\n\tif (future) {\r\n\t\tif (roundedAmount > 0) {\r\n\t\t\t// Amount decreases with time.\r\n\t\t\treturn (preciseAmount - roundedAmount) +\r\n\t\t\t\tgetDiffToPreviousRoundedNumber(round, unitDenominator)\r\n\t\t} else {\r\n\t\t\t// Refresh right after the zero point,\r\n\t\t\t// when \"future\" changes to \"past\".\r\n\t\t\treturn (preciseAmount - roundedAmount) + 1\r\n\t\t}\r\n\t}\r\n \t// Amount increases with time.\r\n\treturn -(preciseAmount - roundedAmount) + getDiffToNextRoundedNumber(round, unitDenominator)\r\n}\r\n\r\nfunction getDiffToNextRoundedNumber(round, unitDenominator) {\r\n\treturn getDiffRatioToNextRoundedNumber(round) * unitDenominator\r\n}\r\n\r\nfunction getDiffToPreviousRoundedNumber(round, unitDenominator) {\r\n\treturn (1 - getDiffRatioToNextRoundedNumber(round)) * unitDenominator + 1\r\n}", "import _getTimeToNextUpdateForUnit from './getTimeToNextUpdateForUnit.js'\r\nimport getStepMinTime from './getStepMinTime.js'\r\nimport { getRoundFunction } from '../round.js'\r\n\r\n// A thousand years is practically a metaphor for \"infinity\".\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nexport const INFINITY = 1000 * YEAR\r\n\r\n/**\r\n * Gets the time to next update for a date and a step.\r\n * @param  {number} date — The date passed to `.format()`, converted to a timestamp.\r\n * @param  {object} step\r\n * @param  {object} [options.previousStep]\r\n * @param  {object} [options.nextStep]\r\n * @param  {number} options.now\r\n * @param  {boolean} options.future\r\n * @param  {string} [options.round] - (undocumented) Rounding mechanism.\r\n * @return {number} [timeToNextUpdate]\r\n */\r\nexport default function getTimeToNextUpdate(date, step, { prevStep, nextStep, now, future, round }) {\r\n\tconst timestamp = date.getTime ? date.getTime() : date\r\n\r\n\tconst getTimeToNextUpdateForUnit = (unit) => _getTimeToNextUpdateForUnit(unit, timestamp, { now, round })\r\n\r\n\t// For future dates, steps move from the last one to the first one,\r\n\t// while for past dates, steps move from the first one to the last one,\r\n\t// due to the fact that time flows in one direction,\r\n\t// and future dates' interval naturally becomes smaller\r\n\t// while past dates' interval naturally grows larger.\r\n\t//\r\n\t// For future dates, it's the transition\r\n\t// from the current step to the previous step,\r\n\t// therefore check the `minTime` of the current step.\r\n\t//\r\n\t// For past dates, it's the transition\r\n\t// from the current step to the next step,\r\n\t// therefore check the `minTime` of the next step.\r\n\t//\r\n\tconst timeToStepChange = getTimeToStepChange(future ? step : nextStep, timestamp, {\r\n\t\tfuture,\r\n\t\tnow,\r\n\t\tround,\r\n\t\tprevStep: future ? prevStep : step,\r\n\t\t// isFirstStep: future && isFirstStep\r\n\t})\r\n\r\n\tif (timeToStepChange === undefined) {\r\n\t\t// Can't reliably determine \"time to next update\"\r\n\t\t// if not all of the steps provide `minTime`.\r\n\t\treturn\r\n\t}\r\n\r\n\tlet timeToNextUpdate\r\n\r\n\tif (step) {\r\n\t\tif (step.getTimeToNextUpdate) {\r\n\t\t\ttimeToNextUpdate = step.getTimeToNextUpdate(timestamp, {\r\n\t\t\t\tgetTimeToNextUpdateForUnit,\r\n\t\t\t\tgetRoundFunction,\r\n\t\t\t\tnow,\r\n\t\t\t\tfuture,\r\n\t\t\t\tround\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (timeToNextUpdate === undefined) {\r\n\t\t\t// \"unit\" is now called \"formatAs\".\r\n\t\t\tconst unit = step.unit || step.formatAs\r\n\t\t\tif (unit) {\r\n\t\t\t\t// For some units, like \"now\", there's no defined amount of seconds in them.\r\n\t\t\t\t// In such cases, `getTimeToNextUpdateForUnit()` returns `undefined`,\r\n\t\t\t\t// and the next step's `minTime` could be used to calculate the update interval:\r\n\t\t\t\t// it will just assume that the label never changes for this step.\r\n\t\t\t\ttimeToNextUpdate = getTimeToNextUpdateForUnit(unit)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (timeToNextUpdate === undefined) {\r\n\t\treturn timeToStepChange\r\n\t}\r\n\r\n\treturn Math.min(timeToNextUpdate, timeToStepChange)\r\n}\r\n\r\nexport function getStepChangesAt(currentOrNextStep, timestamp, { now, future, round, prevStep }) {\r\n\t// The first step's `minTime` is `0` by default.\r\n\t// It doesn't \"change\" steps at zero point\r\n\t// but it does change the wording when switching\r\n\t// from \"future\" to \"past\": \"in ...\" -> \"... ago\".\r\n\t// Therefore, the label should be updated at zero-point too.\r\n\tconst minTime = getStepMinTime(currentOrNextStep, { timestamp, now, future, round, prevStep })\r\n\tif (minTime === undefined) {\r\n\t\treturn\r\n\t}\r\n\tif (future) {\r\n\t\t// The step changes to the previous step\r\n\t\t// as soon as `timestamp - now` becomes\r\n\t\t// less than the `minTime` of the current step:\r\n\t\t// `timestamp - now === minTime - 1`\r\n\t\t// => `now === timestamp - minTime + 1`.\r\n\t\treturn timestamp - minTime * 1000 + 1\r\n\t} else {\r\n\t\t// The step changes to the next step\r\n\t\t// as soon as `now - timestamp` becomes\r\n\t\t// equal to `minTime` of the next step:\r\n\t\t// `now - timestamp === minTime`\r\n\t\t// => `now === timestamp + minTime`.\r\n\r\n\t\t// This is a special case when double-update could be skipped.\r\n\t\tif (minTime === 0 && timestamp === now) {\r\n\t\t\treturn INFINITY\r\n\t\t}\r\n\r\n\t\treturn timestamp + minTime * 1000\r\n\t}\r\n}\r\n\r\nexport function getTimeToStepChange(step, timestamp, {\r\n\tnow,\r\n\tfuture,\r\n\tround,\r\n\tprevStep\r\n}) {\r\n\tif (step) {\r\n\t\tconst stepChangesAt = getStepChangesAt(step, timestamp, {\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround,\r\n\t\t\tprevStep\r\n\t\t})\r\n\t\tif (stepChangesAt === undefined) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn stepChangesAt - now\r\n\t} else {\r\n\t\tif (future) {\r\n\t\t\t// No step.\r\n\t\t\t// Update right after zero point, when it changes from \"future\" to \"past\".\r\n\t\t\treturn timestamp - now + 1\r\n\t\t} else {\r\n\t\t\t// The last step doesn't ever change when `date` is in the past.\r\n\t\t\treturn INFINITY\r\n\t\t}\r\n\t}\r\n}", "// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\nexport function getLocaleData(locale) {\r\n\treturn localesData[locale]\r\n}\r\n\r\nexport function addLocaleData(localeData) {\r\n\tif (!localeData) {\r\n\t\tthrow new Error('[javascript-time-ago] No locale data passed.')\r\n\t}\r\n\t// This locale data is stored in a global variable\r\n\t// and later used when calling `.format(time)`.\r\n\tlocalesData[localeData.locale] = localeData\r\n}", "// just now\r\n// 1 second ago\r\n// 2 seconds ago\r\n// …\r\n// 59 seconds ago\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// …\r\n// 59 minutes ago\r\n// 1 hour ago\r\n// 2 hours ago\r\n// …\r\n// 24 hours ago\r\n// 1 day ago\r\n// 2 days ago\r\n// …\r\n// 6 days ago\r\n// 1 week ago\r\n// 2 weeks ago\r\n// …\r\n// 3 weeks ago\r\n// 1 month ago\r\n// 2 months ago\r\n// …\r\n// 11 months ago\r\n// 1 year ago\r\n// 2 years ago\r\n// …\r\nexport default [\r\n\t{\r\n\t\tformatAs: 'now'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'second'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'minute'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'hour'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'day'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'week'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'month'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'year'\r\n\t}\r\n]", "import round from '../steps/round.js'\r\n\r\n// just now\r\n// 1 second ago\r\n// 2 seconds ago\r\n// …\r\n// 59 seconds ago\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// …\r\n// 59 minutes ago\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// …\r\n// 59 minutes ago\r\n// 1 hour ago\r\n// 2 hours ago\r\n// …\r\n// 24 hours ago\r\n// 1 day ago\r\n// 2 days ago\r\n// …\r\n// 6 days ago\r\n// 1 week ago\r\n// 2 weeks ago\r\n// 3 weeks ago\r\n// 4 weeks ago\r\n// 1 month ago\r\n// 2 months ago\r\n// …\r\n// 11 months ago\r\n// 1 year ago\r\n// 2 years ago\r\n// …\r\n//\r\nexport default {\r\n\tsteps: round,\r\n\tlabels: 'long'\r\n}", "import round from './round.js'\r\n\r\n// just now\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// …\r\n// 59 minutes ago\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// …\r\n// 59 minutes ago\r\n// 1 hour ago\r\n// 2 hours ago\r\n// …\r\n// 24 hours ago\r\n// 1 day ago\r\n// 2 days ago\r\n// …\r\n// 6 days ago\r\n// 1 week ago\r\n// 2 weeks ago\r\n// 3 weeks ago\r\n// 4 weeks ago\r\n// 1 month ago\r\n// 2 months ago\r\n// …\r\n// 11 months ago\r\n// 1 year ago\r\n// 2 years ago\r\n// …\r\n//\r\nexport default {\r\n\t...round,\r\n\t// Skip \"seconds\".\r\n\tsteps: round.steps.filter(step => step.formatAs !== 'second')\r\n}", "import { minute, hour, day, week, month, year } from './units.js'\r\n\r\n// \"factor\" is a legacy property.\r\n// Developers shouldn't need to use it in their custom steps.\r\n\r\n// \"threshold\" is a legacy name of \"min\".\r\n// Developers should use \"min\" property name instead of \"threshold\".\r\n\r\n// \"threshold_for_idOrUnit: value\" is a legacy way of specifying \"min: { id: value }\".\r\n// Developers should use \"min\" property instead of \"threshold\".\r\n\r\n// just now\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// 5 minutes ago\r\n// 10 minutes ago\r\n// 15 minutes ago\r\n// 20 minutes ago\r\n// …\r\n// 50 minutes ago\r\n// an hour ago\r\n// 2 hours ago\r\n// …\r\n// 20 hours ago\r\n// a day ago\r\n// 2 days ago\r\n// 5 days ago\r\n// a week ago\r\n// 2 weeks ago\r\n// 3 weeks ago\r\n// a month ago\r\n// 2 months ago\r\n// 4 months ago\r\n// a year ago\r\n// 2 years ago\r\n// …\r\nexport default [\r\n\t{\r\n\t\t// This step returns the amount of seconds\r\n\t\t// by dividing the amount of seconds by `1`.\r\n\t\tfactor: 1,\r\n    \t// \"now\" labels are used for formatting the output.\r\n\t\tunit: 'now'\r\n\t},\r\n\t{\r\n\t\t// When the language doesn't support `now` unit,\r\n\t\t// the first step is ignored, and it uses this `second` unit.\r\n\t\tthreshold: 1,\r\n\t\t// `threshold_for_now` should be the same as `threshold` on minutes.\r\n\t\tthreshold_for_now: 45.5,\r\n\t\t// This step returns the amount of seconds\r\n\t\t// by dividing the amount of seconds by `1`.\r\n\t\tfactor: 1,\r\n    \t// \"second\" labels are used for formatting the output.\r\n\t\tunit: 'second'\r\n\t},\r\n\t{\r\n\t\t// `threshold` should be the same as `threshold_for_now` on seconds.\r\n\t\tthreshold: 45.5,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in a minute.\r\n\t\tfactor: minute,\r\n    \t// \"minute\" labels are used for formatting the output.\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\t// This step is effective starting from 2.5 minutes.\r\n\t\tthreshold: 2.5 * minute,\r\n\t\t// Allow only 5-minute increments of minutes starting from 2.5 minutes.\r\n\t\t// `granularity` — (advanced) Time interval value \"granularity\".\r\n\t\t// For example, it could be set to `5` for minutes to allow only 5-minute increments\r\n\t\t// when formatting time intervals: `0 minutes`, `5 minutes`, `10 minutes`, etc.\r\n\t\t// Perhaps this feature will be removed because there seem to be no use cases\r\n\t\t// of it in the real world.\r\n\t\tgranularity: 5,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in a minute.\r\n\t\tfactor: minute,\r\n\t\t// \"minute\" labels are used for formatting the output.\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\t// This step is effective starting from 22.5 minutes.\r\n\t\tthreshold: 22.5 * minute,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in  half-an-hour.\r\n\t\tfactor: 0.5 * hour,\r\n\t\t// \"half-hour\" labels are used for formatting the output.\r\n\t\t// (if available, which is no longer the case)\r\n\t\tunit: 'half-hour'\r\n\t},\r\n\t{\r\n\t\t// This step is effective starting from 42.5 minutes.\r\n\t\tthreshold: 42.5 * minute,\r\n\t\tthreshold_for_minute: 52.5 * minute,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in an hour.\r\n\t\tfactor: hour,\r\n\t\t// \"hour\" labels are used for formatting the output.\r\n\t\tunit: 'hour'\r\n\t},\r\n\t{\r\n\t\t// This step is effective starting from 20.5 hours.\r\n\t\tthreshold: (20.5 / 24) * day,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in a day.\r\n\t\tfactor: day,\r\n\t\t// \"day\" labels are used for formatting the output.\r\n\t\tunit: 'day'\r\n\t},\r\n\t{\r\n\t\t// This step is effective starting from 5.5 days.\r\n\t\tthreshold: 5.5 * day,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in a week.\r\n\t\tfactor: week,\r\n\t\t// \"week\" labels are used for formatting the output.\r\n\t\tunit: 'week'\r\n\t},\r\n\t{\r\n\t\t// This step is effective starting from 3.5 weeks.\r\n\t\tthreshold: 3.5 * week,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in a month.\r\n\t\tfactor: month,\r\n\t\t// \"month\" labels are used for formatting the output.\r\n\t\tunit: 'month'\r\n\t},\r\n\t{\r\n\t\t// This step is effective starting from 10.5 months.\r\n\t\tthreshold: 10.5 * month,\r\n\t\t// Return the amount of minutes by dividing the amount\r\n\t\t// of seconds by the amount of seconds in a year.\r\n\t\tfactor: year,\r\n\t\t// \"year\" labels are used for formatting the output.\r\n\t\tunit: 'year'\r\n\t}\r\n]", "import approximate from '../steps/approximate.js'\r\n\r\n// \"gradation\" is a legacy name for \"steps\".\r\n// It's here just for legacy compatibility.\r\n// Use \"steps\" name instead.\r\n\r\n// \"flavour\" is a legacy name for \"labels\".\r\n// It's here just for legacy compatibility.\r\n// Use \"labels\" name instead.\r\n\r\n// \"units\" is a legacy property.\r\n// It's here just for legacy compatibility.\r\n// Developers shouldn't need to use it in their custom styles.\r\n\r\nexport default {\r\n\tgradation: approximate,\r\n\tflavour: 'long',\r\n\tunits: [\r\n\t\t'now',\r\n\t\t'minute',\r\n\t\t'hour',\r\n\t\t'day',\r\n\t\t'week',\r\n\t\t'month',\r\n\t\t'year'\r\n\t]\r\n}", "import approximate from '../steps/approximate.js'\r\n\r\n// \"gradation\" is a legacy name for \"steps\".\r\n// It's here just for legacy compatibility.\r\n// Use \"steps\" name instead.\r\n\r\n// \"flavour\" is a legacy name for \"labels\".\r\n// It's here just for legacy compatibility.\r\n// Use \"labels\" name instead.\r\n\r\n// \"units\" is a legacy property.\r\n// It's here just for legacy compatibility.\r\n// Developers shouldn't need to use it in their custom styles.\r\n\r\n// Similar to the default style but with \"ago\" omitted.\r\n//\r\n// just now\r\n// 5 minutes\r\n// 10 minutes\r\n// 15 minutes\r\n// 20 minutes\r\n// an hour\r\n// 2 hours\r\n// …\r\n// 20 hours\r\n// 1 day\r\n// 2 days\r\n// a week\r\n// 2 weeks\r\n// 3 weeks\r\n// a month\r\n// 2 months\r\n// 3 months\r\n// 4 months\r\n// a year\r\n// 2 years\r\n//\r\nexport default {\r\n\tgradation: approximate,\r\n\tflavour: 'long-time',\r\n\tunits: [\r\n\t\t'now',\r\n\t\t'minute',\r\n\t\t'hour',\r\n\t\t'day',\r\n\t\t'week',\r\n\t\t'month',\r\n\t\t'year'\r\n\t]\r\n}", "// Looks like this one's deprecated.\r\n// /**\r\n//  * Returns a step corresponding to the unit.\r\n//  * @param  {Object[]} steps\r\n//  * @param  {string} unit\r\n//  * @return {?Object}\r\n//  */\r\n// export function getStepForUnit(steps, unit) {\r\n// \tfor (const step of steps) {\r\n// \t\tif (step.unit === unit) {\r\n// \t\t\treturn step\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\n// Looks like this one won't be used in the next major version.\r\n/**\r\n * Converts value to a `Date`\r\n * @param {(number|Date)} value\r\n * @return {Date}\r\n */\r\nexport function getDate(value) {\r\n\treturn value instanceof Date ? value : new Date(value)\r\n}", "import { day, getDate } from '../steps/index.js'\r\nimport { intlDateTimeFormatSupported } from '../locale.js'\r\n\r\n// For compatibility with the old versions of this library.\r\nimport renameLegacyProperties from './renameLegacyProperties.js'\r\n\r\n// Twitter-style relative date/time formatting.\r\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\r\n//\r\n// Seconds, minutes or hours are shown for shorter intervals,\r\n// and longer intervals are formatted using full date format.\r\n\r\nconst steps = [\r\n\t{\r\n\t\tformatAs: 'second'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'minute'\r\n\t},\r\n\t{\r\n\t\tformatAs: 'hour'\r\n\t}\r\n]\r\n\r\n// A cache for `Intl.DateTimeFormat` formatters\r\n// for various locales (is a global variable).\r\nconst formatters = {}\r\n\r\n// Starting from day intervals, output month and day.\r\nconst monthAndDay = {\r\n\tminTime(timestamp, { future, getMinTimeForUnit }) {\r\n\t\t// Returns `23.5 * 60 * 60` when `round` is \"round\",\r\n\t\t// and `24 * 60 * 60` when `round` is \"floor\".\r\n\t\treturn getMinTimeForUnit('day')\r\n\t},\r\n\tformat(value, locale) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale]) {\r\n\t\t\tformatters[locale] = {}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale].dayMonth) {\r\n\t\t\t// \"Apr 11\" (MMMd)\r\n\t\t\tformatters[locale].dayMonth = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\tmonth: 'short',\r\n\t\t\t\tday: 'numeric'\r\n\t\t\t})\r\n\t\t}\r\n\t\t// Output month and day.\r\n\t\treturn formatters[locale].dayMonth.format(getDate(value))\r\n\t}\r\n}\r\n\r\n// If the `date` happened/happens outside of current year,\r\n// then output day, month and year.\r\n// The interval should be such that the `date` lies outside of the current year.\r\nconst yearMonthAndDay = {\r\n\tminTime(timestamp, { future }) {\r\n\t\tif (future) {\r\n\t\t\t// January 1, 00:00, of the `date`'s year is right after\r\n\t\t\t// the maximum `now` for formatting a future date:\r\n\t\t\t// When `now` is before that date, the `date` is formatted as \"day/month/year\" (this step),\r\n\t\t\t// When `now` is equal to or after that date, the `date` is formatted as \"day/month\" (another step).\r\n\t\t\t// After that, it's hours, minutes, seconds, and after that it's no longer `future`.\r\n\t\t\t// The date is right after the maximum `now` for formatting a future date,\r\n\t\t\t// so subtract 1 millisecond from it.\r\n\t\t\tconst maxFittingNow = new Date(new Date(timestamp).getFullYear(), 0).getTime() - 1\r\n\t\t\t// Return `minTime` (in seconds).\r\n\t\t\treturn (timestamp - maxFittingNow) / 1000\r\n\t\t} else {\r\n\t\t\t// January 1, 00:00, of the year following the `date`'s year\r\n\t\t\t// is the minimum `now` for formatting a past date:\r\n\t\t\t// When `now` is before that date, the `date` is formatted as \"day/month\" (another step),\r\n\t\t\t// When `now` is equal to or after that date, the `date` is formatted as \"day/month/year\" (this step).\r\n\t\t\t// After that, it's hours, minutes, seconds, and after that it's no longer `future`.\r\n\t\t\tconst minFittingNow = new Date(new Date(timestamp).getFullYear() + 1, 0).getTime()\r\n\t\t\t// Return `minTime` (in seconds).\r\n\t\t\treturn (minFittingNow - timestamp) / 1000\r\n\t\t}\r\n\t},\r\n\tformat(value, locale) {\r\n\t\t/* istanbul ignore if */\r\n\t\tif (!formatters[locale]) {\r\n\t\t\tformatters[locale] = {}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif (!formatters[locale].dayMonthYear) {\r\n\t\t\t// \"Apr 11, 2017\" (yMMMd)\r\n\t\t\tformatters[locale].dayMonthYear = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\tyear: 'numeric',\r\n\t\t\t\tmonth: 'short',\r\n\t\t\t\tday: 'numeric'\r\n\t\t\t})\r\n\t\t}\r\n\t\t// Output day, month and year.\r\n\t\treturn formatters[locale].dayMonthYear.format(getDate(value))\r\n\t}\r\n}\r\n\r\n// If `Intl.DateTimeFormat` is supported,\r\n// then longer time intervals will be formatted as dates.\r\n/* istanbul ignore else */\r\nif (intlDateTimeFormatSupported()) {\r\n\tsteps.push(monthAndDay, yearMonthAndDay)\r\n}\r\n// Otherwise, if `Intl.DateTimeFormat` is not supported,\r\n// which could be the case when using Internet Explorer,\r\n// then simply mimick \"round\" steps.\r\nelse {\r\n\tsteps.push(\r\n\t\t{\r\n\t\t\tformatAs: 'day'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'week'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'month'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'year'\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport default {\r\n\tsteps,\r\n\tlabels: [\r\n\t\t// \"mini\" labels are only defined for a few languages.\r\n\t\t'mini',\r\n\t\t// \"short-time\" labels are only defined for a few languages.\r\n\t\t'short-time',\r\n\t\t// \"narrow\" and \"short\" labels are defined for all languages.\r\n\t\t// \"narrow\" labels can sometimes be weird (like \"+5d.\"),\r\n\t\t// but \"short\" labels have the \" ago\" part, so \"narrow\" seem\r\n\t\t// more appropriate.\r\n\t\t// \"short\" labels would have been more appropriate if they\r\n\t\t// didn't have the \" ago\" part, hence the \"short-time\" above.\r\n\t\t'narrow',\r\n\t\t// Since \"narrow\" labels are always present, \"short\" element\r\n\t\t// of this array can be removed.\r\n\t\t'short'\r\n\t]\r\n}", "import twitter from './twitter.js'\r\n\r\nexport default {\r\n\t...twitter,\r\n\t// Add \"now\".\r\n\tsteps: [{ formatAs: 'now' }].concat(twitter.steps)\r\n}", "import twitter from './twitter.js'\r\n\r\nexport default {\r\n\t...twitter,\r\n\t// Skip \"seconds\".\r\n\tsteps: twitter.steps.filter(step => step.formatAs !== 'second')\r\n}", "import twitterMinute from './twitterMinute.js'\r\n\r\nexport default {\r\n\t...twitterMinute,\r\n\t// Add \"now\".\r\n\tsteps: [{ formatAs: 'now' }].concat(twitterMinute.steps)\r\n}", "import { minute } from '../steps/units.js'\r\nimport twitter from './twitter.js'\r\n\r\nexport default {\r\n\t...twitter,\r\n\t// Skip \"seconds\".\r\n\tsteps: twitter.steps.filter(step => step.formatAs !== 'second')\r\n\t\t// Start showing `1m` from the first minute.\r\n\t\t.map(step => step.formatAs === 'minute' ? { ...step, minTime: minute } : step)\r\n}", "export default {\r\n\tsteps: [\r\n\t\t{\r\n\t\t\tformatAs: 'second'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'minute'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'hour'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'day'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'month'\r\n\t\t},\r\n\t\t{\r\n\t\t\tformatAs: 'year'\r\n\t\t}\r\n\t],\r\n\tlabels: [\r\n\t\t// \"mini\" labels are only defined for a few languages.\r\n\t\t'mini',\r\n\t\t// \"short-time\" labels are only defined for a few languages.\r\n\t\t'short-time',\r\n\t\t// \"narrow\" and \"short\" labels are defined for all languages.\r\n\t\t// \"narrow\" labels can sometimes be weird (like \"+5d.\"),\r\n\t\t// but \"short\" labels have the \" ago\" part, so \"narrow\" seem\r\n\t\t// more appropriate.\r\n\t\t// \"short\" labels would have been more appropriate if they\r\n\t\t// didn't have the \" ago\" part, hence the \"short-time\" above.\r\n\t\t'narrow',\r\n\t\t// Since \"narrow\" labels are always present, \"short\" element\r\n\t\t// of this array can be removed.\r\n\t\t'short'\r\n\t]\r\n}", "import mini from './mini.js'\r\n\r\nexport default {\r\n\t...mini,\r\n\t// Add \"now\".\r\n\tsteps: [{ formatAs: 'now' }].concat(mini.steps)\r\n}", "import mini from './mini.js'\r\n\r\nexport default {\r\n\t...mini,\r\n\t// Skip \"seconds\".\r\n\tsteps: mini.steps.filter(step => step.formatAs !== 'second')\r\n}", "import miniMinute from './miniMinute.js'\r\n\r\nexport default {\r\n\t...miniMinute,\r\n\t// Add \"now\".\r\n\tsteps: [{ formatAs: 'now' }].concat(miniMinute.steps)\r\n}", "import round from './round.js'\r\nimport roundMinute from './roundMinute.js'\r\n// `approximate` style is deprecated.\r\nimport approximate from './approximate.js'\r\n// `approximateTime` style is deprecated.\r\nimport approximateTime from './approximateTime.js'\r\nimport twitter from './twitter.js'\r\nimport twitterNow from './twitterNow.js'\r\nimport twitterMinute from './twitterMinute.js'\r\nimport twitterMinuteNow from './twitterMinuteNow.js'\r\nimport twitterFirstMinute from './twitterFirstMinute.js'\r\nimport mini from './mini.js'\r\nimport miniNow from './miniNow.js'\r\nimport miniMinute from './miniMinute.js'\r\nimport miniMinuteNow from './miniMinuteNow.js'\r\n\r\nexport default function getStyleByName(style) {\r\n\tswitch (style) {\r\n\t\t// \"default\" style name is deprecated.\r\n\t\tcase 'default':\r\n\t\tcase 'round':\r\n\t\t\treturn round\r\n\t\tcase 'round-minute':\r\n\t\t\treturn roundMinute\r\n\t\tcase 'approximate':\r\n\t\t\treturn approximate\r\n\t\t// \"time\" style name is deprecated.\r\n\t\tcase 'time':\r\n\t\tcase 'approximate-time':\r\n\t\t\treturn approximateTime\r\n\t\tcase 'mini':\r\n\t\t\treturn mini\r\n\t\tcase 'mini-now':\r\n\t\t\treturn miniNow\r\n\t\tcase 'mini-minute':\r\n\t\t\treturn miniMinute\r\n\t\tcase 'mini-minute-now':\r\n\t\t\treturn miniMinuteNow\r\n\t\tcase 'twitter':\r\n\t\t\treturn twitter\r\n\t\tcase 'twitter-now':\r\n\t\t\treturn twitterNow\r\n\t\tcase 'twitter-minute':\r\n\t\t\treturn twitterMinute\r\n\t\tcase 'twitter-minute-now':\r\n\t\t\treturn twitterMinuteNow\r\n\t\tcase 'twitter-first-minute':\r\n\t\t\treturn twitterFirstMinute\r\n\t\tdefault:\r\n\t\t\t// For historical reasons, the default style is \"approximate\".\r\n\t\t\treturn approximate\r\n\t}\r\n}", "export default {\n\t\"locale\": \"en\",\n\t\"long\": {\n\t\t\"year\": {\n\t\t\t\"previous\": \"last year\",\n\t\t\t\"current\": \"this year\",\n\t\t\t\"next\": \"next year\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} year ago\",\n\t\t\t\t\"other\": \"{0} years ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} year\",\n\t\t\t\t\"other\": \"in {0} years\"\n\t\t\t}\n\t\t},\n\t\t\"quarter\": {\n\t\t\t\"previous\": \"last quarter\",\n\t\t\t\"current\": \"this quarter\",\n\t\t\t\"next\": \"next quarter\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} quarter ago\",\n\t\t\t\t\"other\": \"{0} quarters ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} quarter\",\n\t\t\t\t\"other\": \"in {0} quarters\"\n\t\t\t}\n\t\t},\n\t\t\"month\": {\n\t\t\t\"previous\": \"last month\",\n\t\t\t\"current\": \"this month\",\n\t\t\t\"next\": \"next month\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} month ago\",\n\t\t\t\t\"other\": \"{0} months ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} month\",\n\t\t\t\t\"other\": \"in {0} months\"\n\t\t\t}\n\t\t},\n\t\t\"week\": {\n\t\t\t\"previous\": \"last week\",\n\t\t\t\"current\": \"this week\",\n\t\t\t\"next\": \"next week\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} week ago\",\n\t\t\t\t\"other\": \"{0} weeks ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} week\",\n\t\t\t\t\"other\": \"in {0} weeks\"\n\t\t\t}\n\t\t},\n\t\t\"day\": {\n\t\t\t\"previous\": \"yesterday\",\n\t\t\t\"current\": \"today\",\n\t\t\t\"next\": \"tomorrow\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} day ago\",\n\t\t\t\t\"other\": \"{0} days ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} day\",\n\t\t\t\t\"other\": \"in {0} days\"\n\t\t\t}\n\t\t},\n\t\t\"hour\": {\n\t\t\t\"current\": \"this hour\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} hour ago\",\n\t\t\t\t\"other\": \"{0} hours ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} hour\",\n\t\t\t\t\"other\": \"in {0} hours\"\n\t\t\t}\n\t\t},\n\t\t\"minute\": {\n\t\t\t\"current\": \"this minute\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} minute ago\",\n\t\t\t\t\"other\": \"{0} minutes ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} minute\",\n\t\t\t\t\"other\": \"in {0} minutes\"\n\t\t\t}\n\t\t},\n\t\t\"second\": {\n\t\t\t\"current\": \"now\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} second ago\",\n\t\t\t\t\"other\": \"{0} seconds ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} second\",\n\t\t\t\t\"other\": \"in {0} seconds\"\n\t\t\t}\n\t\t}\n\t},\n\t\"short\": {\n\t\t\"year\": {\n\t\t\t\"previous\": \"last yr.\",\n\t\t\t\"current\": \"this yr.\",\n\t\t\t\"next\": \"next yr.\",\n\t\t\t\"past\": \"{0} yr. ago\",\n\t\t\t\"future\": \"in {0} yr.\"\n\t\t},\n\t\t\"quarter\": {\n\t\t\t\"previous\": \"last qtr.\",\n\t\t\t\"current\": \"this qtr.\",\n\t\t\t\"next\": \"next qtr.\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} qtr. ago\",\n\t\t\t\t\"other\": \"{0} qtrs. ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} qtr.\",\n\t\t\t\t\"other\": \"in {0} qtrs.\"\n\t\t\t}\n\t\t},\n\t\t\"month\": {\n\t\t\t\"previous\": \"last mo.\",\n\t\t\t\"current\": \"this mo.\",\n\t\t\t\"next\": \"next mo.\",\n\t\t\t\"past\": \"{0} mo. ago\",\n\t\t\t\"future\": \"in {0} mo.\"\n\t\t},\n\t\t\"week\": {\n\t\t\t\"previous\": \"last wk.\",\n\t\t\t\"current\": \"this wk.\",\n\t\t\t\"next\": \"next wk.\",\n\t\t\t\"past\": \"{0} wk. ago\",\n\t\t\t\"future\": \"in {0} wk.\"\n\t\t},\n\t\t\"day\": {\n\t\t\t\"previous\": \"yesterday\",\n\t\t\t\"current\": \"today\",\n\t\t\t\"next\": \"tomorrow\",\n\t\t\t\"past\": {\n\t\t\t\t\"one\": \"{0} day ago\",\n\t\t\t\t\"other\": \"{0} days ago\"\n\t\t\t},\n\t\t\t\"future\": {\n\t\t\t\t\"one\": \"in {0} day\",\n\t\t\t\t\"other\": \"in {0} days\"\n\t\t\t}\n\t\t},\n\t\t\"hour\": {\n\t\t\t\"current\": \"this hour\",\n\t\t\t\"past\": \"{0} hr. ago\",\n\t\t\t\"future\": \"in {0} hr.\"\n\t\t},\n\t\t\"minute\": {\n\t\t\t\"current\": \"this minute\",\n\t\t\t\"past\": \"{0} min. ago\",\n\t\t\t\"future\": \"in {0} min.\"\n\t\t},\n\t\t\"second\": {\n\t\t\t\"current\": \"now\",\n\t\t\t\"past\": \"{0} sec. ago\",\n\t\t\t\"future\": \"in {0} sec.\"\n\t\t}\n\t},\n\t\"narrow\": {\n\t\t\"year\": {\n\t\t\t\"previous\": \"last yr.\",\n\t\t\t\"current\": \"this yr.\",\n\t\t\t\"next\": \"next yr.\",\n\t\t\t\"past\": \"{0}y ago\",\n\t\t\t\"future\": \"in {0}y\"\n\t\t},\n\t\t\"quarter\": {\n\t\t\t\"previous\": \"last qtr.\",\n\t\t\t\"current\": \"this qtr.\",\n\t\t\t\"next\": \"next qtr.\",\n\t\t\t\"past\": \"{0}q ago\",\n\t\t\t\"future\": \"in {0}q\"\n\t\t},\n\t\t\"month\": {\n\t\t\t\"previous\": \"last mo.\",\n\t\t\t\"current\": \"this mo.\",\n\t\t\t\"next\": \"next mo.\",\n\t\t\t\"past\": \"{0}mo ago\",\n\t\t\t\"future\": \"in {0}mo\"\n\t\t},\n\t\t\"week\": {\n\t\t\t\"previous\": \"last wk.\",\n\t\t\t\"current\": \"this wk.\",\n\t\t\t\"next\": \"next wk.\",\n\t\t\t\"past\": \"{0}w ago\",\n\t\t\t\"future\": \"in {0}w\"\n\t\t},\n\t\t\"day\": {\n\t\t\t\"previous\": \"yesterday\",\n\t\t\t\"current\": \"today\",\n\t\t\t\"next\": \"tomorrow\",\n\t\t\t\"past\": \"{0}d ago\",\n\t\t\t\"future\": \"in {0}d\"\n\t\t},\n\t\t\"hour\": {\n\t\t\t\"current\": \"this hour\",\n\t\t\t\"past\": \"{0}h ago\",\n\t\t\t\"future\": \"in {0}h\"\n\t\t},\n\t\t\"minute\": {\n\t\t\t\"current\": \"this minute\",\n\t\t\t\"past\": \"{0}m ago\",\n\t\t\t\"future\": \"in {0}m\"\n\t\t},\n\t\t\"second\": {\n\t\t\t\"current\": \"now\",\n\t\t\t\"past\": \"{0}s ago\",\n\t\t\t\"future\": \"in {0}s\"\n\t\t}\n\t},\n\t\"now\": {\n\t\t\"now\": {\n\t\t\t\"current\": \"now\",\n\t\t\t\"future\": \"in a moment\",\n\t\t\t\"past\": \"just now\"\n\t\t}\n\t},\n\t\"mini\": {\n\t\t\"year\": \"{0}yr\",\n\t\t\"month\": \"{0}mo\",\n\t\t\"week\": \"{0}wk\",\n\t\t\"day\": \"{0}d\",\n\t\t\"hour\": \"{0}h\",\n\t\t\"minute\": \"{0}m\",\n\t\t\"second\": \"{0}s\",\n\t\t\"now\": \"now\"\n\t},\n\t\"short-time\": {\n\t\t\"year\": \"{0} yr.\",\n\t\t\"month\": \"{0} mo.\",\n\t\t\"week\": \"{0} wk.\",\n\t\t\"day\": {\n\t\t\t\"one\": \"{0} day\",\n\t\t\t\"other\": \"{0} days\"\n\t\t},\n\t\t\"hour\": \"{0} hr.\",\n\t\t\"minute\": \"{0} min.\",\n\t\t\"second\": \"{0} sec.\"\n\t},\n\t\"long-time\": {\n\t\t\"year\": {\n\t\t\t\"one\": \"{0} year\",\n\t\t\t\"other\": \"{0} years\"\n\t\t},\n\t\t\"month\": {\n\t\t\t\"one\": \"{0} month\",\n\t\t\t\"other\": \"{0} months\"\n\t\t},\n\t\t\"week\": {\n\t\t\t\"one\": \"{0} week\",\n\t\t\t\"other\": \"{0} weeks\"\n\t\t},\n\t\t\"day\": {\n\t\t\t\"one\": \"{0} day\",\n\t\t\t\"other\": \"{0} days\"\n\t\t},\n\t\t\"hour\": {\n\t\t\t\"one\": \"{0} hour\",\n\t\t\t\"other\": \"{0} hours\"\n\t\t},\n\t\t\"minute\": {\n\t\t\t\"one\": \"{0} minute\",\n\t\t\t\"other\": \"{0} minutes\"\n\t\t},\n\t\t\"second\": {\n\t\t\t\"one\": \"{0} second\",\n\t\t\t\"other\": \"{0} seconds\"\n\t\t}\n\t}\n}"],
  "mappings": "0oBAAA,IAAAA,GAAAC,GAAA,CAAAC,GAAAC,KAAA,EAAC,SAASC,EAAE,EAAE,CAAW,OAAOF,IAAjB,UAAuC,OAAOC,GAApB,IAA2BA,GAAO,QAAQ,EAAE,EAAc,OAAO,QAAnB,YAA2B,OAAO,IAAI,OAAO,CAAC,GAAGC,EAAe,OAAO,WAApB,IAA+B,WAAWA,GAAG,MAAM,MAAM,EAAE,CAAC,GAAEF,GAAM,UAAU,CAAC,aAAa,IAAIE,EAAE,IAAI,EAAE,IAAIC,EAAE,KAAKC,EAAE,cAAc,EAAE,SAASC,EAAE,SAASC,EAAE,OAAO,EAAE,MAAMC,EAAE,OAAOC,EAAE,QAAQC,EAAE,UAAUC,EAAE,OAAOC,EAAE,OAAOC,EAAE,eAAeC,EAAE,6FAA6FC,EAAE,sFAAsFC,GAAE,CAAC,KAAK,KAAK,SAAS,2DAA2D,MAAM,GAAG,EAAE,OAAO,wFAAwF,MAAM,GAAG,EAAE,QAAQ,SAASb,EAAE,CAAC,IAAIc,EAAE,CAAC,KAAK,KAAK,KAAK,IAAI,EAAEb,EAAED,EAAE,IAAI,MAAM,IAAIA,GAAGc,GAAGb,EAAE,IAAI,EAAE,GAAGa,EAAEb,CAAC,GAAGa,EAAE,CAAC,GAAG,GAAG,CAAC,EAAEC,EAAE,SAASf,EAAEc,EAAEb,EAAE,CAAC,IAAIC,EAAE,OAAOF,CAAC,EAAE,MAAM,CAACE,GAAGA,EAAE,QAAQY,EAAEd,EAAE,GAAG,MAAMc,EAAE,EAAEZ,EAAE,MAAM,EAAE,KAAKD,CAAC,EAAED,CAAC,EAAEgB,GAAE,CAAC,EAAED,EAAE,EAAE,SAASf,EAAE,CAAC,IAAIc,EAAE,CAACd,EAAE,UAAU,EAAEC,EAAE,KAAK,IAAIa,CAAC,EAAEZ,EAAE,KAAK,MAAMD,EAAE,EAAE,EAAEgB,EAAEhB,EAAE,GAAG,OAAOa,GAAG,EAAE,IAAI,KAAKC,EAAEb,EAAE,EAAE,GAAG,EAAE,IAAIa,EAAEE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,SAASjB,EAAEc,EAAEb,EAAE,CAAC,GAAGa,EAAE,KAAK,EAAEb,EAAE,KAAK,EAAE,MAAM,CAACD,EAAEC,EAAEa,CAAC,EAAE,IAAIZ,EAAE,IAAID,EAAE,KAAK,EAAEa,EAAE,KAAK,IAAIb,EAAE,MAAM,EAAEa,EAAE,MAAM,GAAGG,EAAEH,EAAE,MAAM,EAAE,IAAIZ,EAAEI,CAAC,EAAEH,EAAEF,EAAEgB,EAAE,EAAEb,EAAEU,EAAE,MAAM,EAAE,IAAIZ,GAAGC,EAAE,GAAG,GAAGG,CAAC,EAAE,MAAM,EAAE,EAAEJ,GAAGD,EAAEgB,IAAId,EAAEc,EAAEb,EAAEA,EAAEa,KAAK,EAAE,EAAE,EAAE,SAASjB,EAAE,CAAC,OAAOA,EAAE,EAAE,KAAK,KAAKA,CAAC,GAAG,EAAE,KAAK,MAAMA,CAAC,CAAC,EAAE,EAAE,SAASA,EAAE,CAAC,MAAM,CAAC,EAAEM,EAAE,EAAEE,EAAE,EAAEH,EAAE,EAAE,EAAE,EAAEI,EAAE,EAAEL,EAAE,EAAED,EAAE,EAAE,EAAE,GAAGD,EAAE,EAAEK,CAAC,EAAEP,CAAC,GAAG,OAAOA,GAAG,EAAE,EAAE,YAAY,EAAE,QAAQ,KAAK,EAAE,CAAC,EAAE,EAAE,SAASA,EAAE,CAAC,OAAgBA,IAAT,MAAU,CAAC,EAAEkB,EAAE,KAAKC,EAAE,CAAC,EAAEA,EAAED,CAAC,EAAEL,GAAE,IAAIO,GAAE,SAASpB,EAAE,CAAC,OAAOA,aAAaqB,EAAC,EAAEC,GAAE,SAAStB,EAAEc,EAAEb,EAAEC,EAAE,CAAC,IAAIe,EAAE,GAAG,CAACH,EAAE,OAAOI,EAAE,GAAa,OAAOJ,GAAjB,SAAmB,CAAC,IAAIX,EAAEW,EAAE,YAAY,EAAEK,EAAEhB,CAAC,IAAIc,EAAEd,GAAGF,IAAIkB,EAAEhB,CAAC,EAAEF,EAAEgB,EAAEd,GAAG,IAAIC,EAAEU,EAAE,MAAM,GAAG,EAAE,GAAG,CAACG,GAAGb,EAAE,OAAO,EAAE,OAAOJ,EAAEI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAImB,EAAET,EAAE,KAAKK,EAAEI,CAAC,EAAET,EAAEG,EAAEM,CAAC,CAAC,MAAM,CAACrB,GAAGe,IAAIC,EAAED,GAAGA,GAAG,CAACf,GAAGgB,CAAC,EAAEM,EAAE,SAASxB,EAAEc,EAAE,CAAC,GAAGM,GAAEpB,CAAC,EAAE,OAAOA,EAAE,MAAM,EAAE,IAAIC,EAAY,OAAOa,GAAjB,SAAmBA,EAAE,CAAC,EAAE,OAAOb,EAAE,KAAKD,EAAEC,EAAE,KAAK,UAAU,IAAIoB,GAAEpB,CAAC,CAAC,EAAEwB,EAAET,GAAES,EAAE,EAAEH,GAAEG,EAAE,EAAEL,GAAEK,EAAE,EAAE,SAASzB,EAAEc,EAAE,CAAC,OAAOU,EAAExB,EAAE,CAAC,OAAOc,EAAE,GAAG,IAAIA,EAAE,GAAG,EAAEA,EAAE,GAAG,QAAQA,EAAE,OAAO,CAAC,CAAC,EAAE,IAAIO,GAAE,UAAU,CAAC,SAASR,EAAEb,EAAE,CAAC,KAAK,GAAGsB,GAAEtB,EAAE,OAAO,KAAK,EAAE,EAAE,KAAK,MAAMA,CAAC,CAAC,CAAC,IAAIe,EAAEF,EAAE,UAAU,OAAOE,EAAE,MAAM,SAASf,EAAE,CAAC,KAAK,GAAG,SAASA,EAAE,CAAC,IAAIc,EAAEd,EAAE,KAAKC,EAAED,EAAE,IAAI,GAAUc,IAAP,KAAS,OAAO,IAAI,KAAK,GAAG,EAAE,GAAGW,EAAE,EAAEX,CAAC,EAAE,OAAO,IAAI,KAAK,GAAGA,aAAa,KAAK,OAAO,IAAI,KAAKA,CAAC,EAAE,GAAa,OAAOA,GAAjB,UAAoB,CAAC,MAAM,KAAKA,CAAC,EAAE,CAAC,IAAIZ,EAAEY,EAAE,MAAMH,CAAC,EAAE,GAAGT,EAAE,CAAC,IAAIe,EAAEf,EAAE,CAAC,EAAE,GAAG,EAAEC,GAAGD,EAAE,CAAC,GAAG,KAAK,UAAU,EAAE,CAAC,EAAE,OAAOD,EAAE,IAAI,KAAK,KAAK,IAAIC,EAAE,CAAC,EAAEe,EAAEf,EAAE,CAAC,GAAG,EAAEA,EAAE,CAAC,GAAG,EAAEA,EAAE,CAAC,GAAG,EAAEA,EAAE,CAAC,GAAG,EAAEC,CAAC,CAAC,EAAE,IAAI,KAAKD,EAAE,CAAC,EAAEe,EAAEf,EAAE,CAAC,GAAG,EAAEA,EAAE,CAAC,GAAG,EAAEA,EAAE,CAAC,GAAG,EAAEA,EAAE,CAAC,GAAG,EAAEC,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,KAAKW,CAAC,CAAC,EAAEd,CAAC,EAAE,KAAK,GAAGA,EAAE,GAAG,CAAC,EAAE,KAAK,KAAK,CAAC,EAAEe,EAAE,KAAK,UAAU,CAAC,IAAIf,EAAE,KAAK,GAAG,KAAK,GAAGA,EAAE,YAAY,EAAE,KAAK,GAAGA,EAAE,SAAS,EAAE,KAAK,GAAGA,EAAE,QAAQ,EAAE,KAAK,GAAGA,EAAE,OAAO,EAAE,KAAK,GAAGA,EAAE,SAAS,EAAE,KAAK,GAAGA,EAAE,WAAW,EAAE,KAAK,GAAGA,EAAE,WAAW,EAAE,KAAK,IAAIA,EAAE,gBAAgB,CAAC,EAAEe,EAAE,OAAO,UAAU,CAAC,OAAOU,CAAC,EAAEV,EAAE,QAAQ,UAAU,CAAC,OAAQ,KAAK,GAAG,SAAS,IAAIL,CAAE,EAAEK,EAAE,OAAO,SAASf,EAAEc,EAAE,CAAC,IAAIb,EAAEuB,EAAExB,CAAC,EAAE,OAAO,KAAK,QAAQc,CAAC,GAAGb,GAAGA,GAAG,KAAK,MAAMa,CAAC,CAAC,EAAEC,EAAE,QAAQ,SAASf,EAAEc,EAAE,CAAC,OAAOU,EAAExB,CAAC,EAAE,KAAK,QAAQc,CAAC,CAAC,EAAEC,EAAE,SAAS,SAASf,EAAEc,EAAE,CAAC,OAAO,KAAK,MAAMA,CAAC,EAAEU,EAAExB,CAAC,CAAC,EAAEe,EAAE,GAAG,SAASf,EAAEc,EAAEb,EAAE,CAAC,OAAOwB,EAAE,EAAEzB,CAAC,EAAE,KAAKc,CAAC,EAAE,KAAK,IAAIb,EAAED,CAAC,CAAC,EAAEe,EAAE,KAAK,UAAU,CAAC,OAAO,KAAK,MAAM,KAAK,QAAQ,EAAE,GAAG,CAAC,EAAEA,EAAE,QAAQ,UAAU,CAAC,OAAO,KAAK,GAAG,QAAQ,CAAC,EAAEA,EAAE,QAAQ,SAASf,EAAEc,EAAE,CAAC,IAAIb,EAAE,KAAKC,EAAE,CAAC,CAACuB,EAAE,EAAEX,CAAC,GAAGA,EAAEP,EAAEkB,EAAE,EAAEzB,CAAC,EAAEU,EAAE,SAASV,GAAEc,EAAE,CAAC,IAAIG,GAAEQ,EAAE,EAAExB,EAAE,GAAG,KAAK,IAAIA,EAAE,GAAGa,EAAEd,EAAC,EAAE,IAAI,KAAKC,EAAE,GAAGa,EAAEd,EAAC,EAAEC,CAAC,EAAE,OAAOC,EAAEe,GAAEA,GAAE,MAAM,CAAC,CAAC,EAAEN,EAAE,SAASX,GAAEc,EAAE,CAAC,OAAOW,EAAE,EAAExB,EAAE,OAAO,EAAED,EAAC,EAAE,MAAMC,EAAE,OAAO,GAAG,GAAGC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,MAAMY,CAAC,CAAC,EAAEb,CAAC,CAAC,EAAEW,EAAE,KAAK,GAAGC,EAAE,KAAK,GAAGE,GAAE,KAAK,GAAGC,EAAE,OAAO,KAAK,GAAG,MAAM,IAAI,OAAOT,EAAE,CAAC,KAAKC,EAAE,OAAON,EAAEQ,EAAE,EAAE,CAAC,EAAEA,EAAE,GAAG,EAAE,EAAE,KAAKJ,EAAE,OAAOJ,EAAEQ,EAAE,EAAEG,CAAC,EAAEH,EAAE,EAAEG,EAAE,CAAC,EAAE,KAAKR,EAAE,IAAIa,GAAE,KAAK,QAAQ,EAAE,WAAW,EAAEC,IAAGP,EAAEM,GAAEN,EAAE,EAAEA,GAAGM,GAAE,OAAOR,EAAER,EAAEa,GAAEI,GAAEJ,IAAG,EAAEI,IAAGN,CAAC,EAAE,KAAK,EAAE,KAAKJ,EAAE,OAAOE,EAAEK,EAAE,QAAQ,CAAC,EAAE,KAAKZ,EAAE,OAAOO,EAAEK,EAAE,UAAU,CAAC,EAAE,KAAKb,EAAE,OAAOQ,EAAEK,EAAE,UAAU,CAAC,EAAE,KAAK,EAAE,OAAOL,EAAEK,EAAE,eAAe,CAAC,EAAE,QAAQ,OAAO,KAAK,MAAM,CAAC,CAAC,EAAED,EAAE,MAAM,SAASf,EAAE,CAAC,OAAO,KAAK,QAAQA,EAAE,EAAE,CAAC,EAAEe,EAAE,KAAK,SAASf,EAAEc,EAAE,CAAC,IAAIb,EAAEI,EAAEoB,EAAE,EAAEzB,CAAC,EAAEO,EAAE,OAAO,KAAK,GAAG,MAAM,IAAIG,GAAGT,EAAE,CAAC,EAAEA,EAAE,CAAC,EAAEM,EAAE,OAAON,EAAEQ,CAAC,EAAEF,EAAE,OAAON,EAAEK,CAAC,EAAEC,EAAE,QAAQN,EAAEO,CAAC,EAAED,EAAE,WAAWN,EAAEG,CAAC,EAAEG,EAAE,QAAQN,EAAEE,CAAC,EAAEI,EAAE,UAAUN,EAAE,CAAC,EAAEM,EAAE,UAAUN,EAAEC,CAAC,EAAEK,EAAE,eAAeN,GAAGI,CAAC,EAAEM,EAAEN,IAAI,EAAE,KAAK,IAAIS,EAAE,KAAK,IAAIA,EAAE,GAAGT,IAAIC,GAAGD,IAAIG,EAAE,CAAC,IAAII,EAAE,KAAK,MAAM,EAAE,IAAIH,EAAE,CAAC,EAAEG,EAAE,GAAGF,CAAC,EAAEC,CAAC,EAAEC,EAAE,KAAK,EAAE,KAAK,GAAGA,EAAE,IAAIH,EAAE,KAAK,IAAI,KAAK,GAAGG,EAAE,YAAY,CAAC,CAAC,EAAE,EAAE,MAAMF,GAAG,KAAK,GAAGA,CAAC,EAAEC,CAAC,EAAE,OAAO,KAAK,KAAK,EAAE,IAAI,EAAEI,EAAE,IAAI,SAASf,EAAEc,EAAE,CAAC,OAAO,KAAK,MAAM,EAAE,KAAKd,EAAEc,CAAC,CAAC,EAAEC,EAAE,IAAI,SAASf,EAAE,CAAC,OAAO,KAAKyB,EAAE,EAAEzB,CAAC,CAAC,EAAE,CAAC,EAAEe,EAAE,IAAI,SAASb,EAAEK,EAAE,CAAC,IAAIE,EAAEC,EAAE,KAAKR,EAAE,OAAOA,CAAC,EAAE,IAAIS,EAAEc,EAAE,EAAElB,CAAC,EAAEK,EAAE,SAASZ,EAAE,CAAC,IAAIc,GAAEU,EAAEd,CAAC,EAAE,OAAOe,EAAE,EAAEX,GAAE,KAAKA,GAAE,KAAK,EAAE,KAAK,MAAMd,EAAEE,CAAC,CAAC,EAAEQ,CAAC,CAAC,EAAE,GAAGC,IAAIL,EAAE,OAAO,KAAK,IAAIA,EAAE,KAAK,GAAGJ,CAAC,EAAE,GAAGS,IAAIH,EAAE,OAAO,KAAK,IAAIA,EAAE,KAAK,GAAGN,CAAC,EAAE,GAAGS,IAAI,EAAE,OAAOC,EAAE,CAAC,EAAE,GAAGD,IAAIN,EAAE,OAAOO,EAAE,CAAC,EAAE,IAAIC,GAAGJ,EAAE,CAAC,EAAEA,EAAEN,CAAC,EAAE,EAAEM,EAAEL,CAAC,EAAEH,EAAEQ,EAAE,CAAC,EAAET,EAAES,GAAGE,CAAC,GAAG,EAAEI,EAAE,KAAK,GAAG,QAAQ,EAAEb,EAAEW,EAAE,OAAOY,EAAE,EAAEV,EAAE,IAAI,CAAC,EAAEA,EAAE,SAAS,SAASf,EAAEc,EAAE,CAAC,OAAO,KAAK,IAAI,GAAGd,EAAEc,CAAC,CAAC,EAAEC,EAAE,OAAO,SAASf,EAAE,CAAC,IAAIc,EAAE,KAAKb,EAAE,KAAK,QAAQ,EAAE,GAAG,CAAC,KAAK,QAAQ,EAAE,OAAOA,EAAE,aAAaS,EAAE,IAAIR,EAAEF,GAAG,uBAAuBiB,EAAEQ,EAAE,EAAE,IAAI,EAAEtB,EAAE,KAAK,GAAGC,EAAE,KAAK,GAAGmB,EAAE,KAAK,GAAGlB,EAAEJ,EAAE,SAASK,GAAEL,EAAE,OAAOM,EAAE,SAASP,EAAEC,GAAEgB,GAAEd,GAAE,CAAC,OAAOH,IAAIA,EAAEC,EAAC,GAAGD,EAAEc,EAAEZ,CAAC,IAAIe,GAAEhB,EAAC,EAAE,MAAM,EAAEE,EAAC,CAAC,EAAEK,GAAE,SAASR,EAAE,CAAC,OAAOyB,EAAE,EAAEtB,EAAE,IAAI,GAAGH,EAAE,GAAG,CAAC,EAAES,GAAER,EAAE,UAAU,SAASD,EAAEc,GAAEb,GAAE,CAAC,IAAIC,GAAEF,EAAE,GAAG,KAAK,KAAK,OAAOC,GAAEC,GAAE,YAAY,EAAEA,EAAC,EAAES,GAAE,CAAC,GAAG,OAAO,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAKc,EAAE,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,EAAEF,EAAE,EAAE,GAAGE,EAAE,EAAEF,EAAE,EAAE,EAAE,GAAG,EAAE,IAAIhB,EAAEN,EAAE,YAAYsB,EAAEjB,GAAE,CAAC,EAAE,KAAKC,EAAED,GAAEiB,CAAC,EAAE,EAAE,KAAK,GAAG,GAAGE,EAAE,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,EAAE,OAAO,KAAK,EAAE,EAAE,GAAGlB,EAAEN,EAAE,YAAY,KAAK,GAAGI,EAAE,CAAC,EAAE,IAAIE,EAAEN,EAAE,cAAc,KAAK,GAAGI,EAAE,CAAC,EAAE,KAAKA,EAAE,KAAK,EAAE,EAAE,EAAE,OAAOF,CAAC,EAAE,GAAGsB,EAAE,EAAEtB,EAAE,EAAE,GAAG,EAAE,EAAEK,GAAE,CAAC,EAAE,GAAGA,GAAE,CAAC,EAAE,EAAEC,GAAEN,EAAEC,EAAE,EAAE,EAAE,EAAEK,GAAEN,EAAEC,EAAE,EAAE,EAAE,EAAE,OAAOA,CAAC,EAAE,GAAGqB,EAAE,EAAErB,EAAE,EAAE,GAAG,EAAE,EAAE,OAAO,KAAK,EAAE,EAAE,GAAGqB,EAAE,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,IAAIA,EAAE,EAAE,KAAK,IAAI,EAAE,GAAG,EAAE,EAAER,CAAC,EAAE,OAAOf,EAAE,QAAQU,EAAG,SAASZ,EAAEc,GAAE,CAAC,OAAOA,IAAGH,GAAEX,CAAC,GAAGiB,EAAE,QAAQ,IAAI,EAAE,CAAC,CAAE,CAAC,EAAEF,EAAE,UAAU,UAAU,CAAC,MAAO,IAAG,CAAC,KAAK,MAAM,KAAK,GAAG,kBAAkB,EAAE,EAAE,CAAC,EAAEA,EAAE,KAAK,SAASb,EAAEO,EAAEC,EAAE,CAAC,IAAIC,EAAEC,EAAEa,EAAE,EAAEhB,CAAC,EAAEI,EAAEW,EAAEtB,CAAC,EAAEa,GAAGF,EAAE,UAAU,EAAE,KAAK,UAAU,GAAG,EAAEG,EAAE,KAAKH,EAAEK,EAAEO,EAAE,EAAE,KAAKZ,CAAC,EAAE,OAAOK,GAAGP,EAAE,CAAC,EAAEA,EAAEH,CAAC,EAAEU,EAAE,GAAGP,EAAEL,CAAC,EAAEY,EAAEP,EAAEJ,CAAC,EAAEW,EAAE,EAAEP,EAAEN,CAAC,GAAGW,EAAED,GAAG,OAAOJ,EAAE,CAAC,GAAGK,EAAED,GAAG,MAAMJ,EAAEP,CAAC,EAAEY,EAAEf,EAAEU,EAAER,CAAC,EAAEa,EAAE,EAAEL,EAAE,CAAC,EAAEK,EAAEhB,EAAEW,GAAGC,CAAC,GAAGI,EAAEN,EAAEQ,EAAEO,EAAE,EAAEP,CAAC,CAAC,EAAEH,EAAE,YAAY,UAAU,CAAC,OAAO,KAAK,MAAMT,CAAC,EAAE,EAAE,EAAES,EAAE,QAAQ,UAAU,CAAC,OAAOI,EAAE,KAAK,EAAE,CAAC,EAAEJ,EAAE,OAAO,SAASf,EAAEc,EAAE,CAAC,GAAG,CAACd,EAAE,OAAO,KAAK,GAAG,IAAIC,EAAE,KAAK,MAAM,EAAEC,EAAEoB,GAAEtB,EAAEc,EAAE,EAAE,EAAE,OAAOZ,IAAID,EAAE,GAAGC,GAAGD,CAAC,EAAEc,EAAE,MAAM,UAAU,CAAC,OAAOU,EAAE,EAAE,KAAK,GAAG,IAAI,CAAC,EAAEV,EAAE,OAAO,UAAU,CAAC,OAAO,IAAI,KAAK,KAAK,QAAQ,CAAC,CAAC,EAAEA,EAAE,OAAO,UAAU,CAAC,OAAO,KAAK,QAAQ,EAAE,KAAK,YAAY,EAAE,IAAI,EAAEA,EAAE,YAAY,UAAU,CAAC,OAAO,KAAK,GAAG,YAAY,CAAC,EAAEA,EAAE,SAAS,UAAU,CAAC,OAAO,KAAK,GAAG,YAAY,CAAC,EAAEF,CAAC,EAAE,EAAEa,GAAEL,GAAE,UAAU,OAAOG,EAAE,UAAUE,GAAE,CAAC,CAAC,MAAMxB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,KAAKC,CAAC,EAAE,CAAC,KAAKC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,KAAKE,CAAC,EAAE,CAAC,KAAKE,CAAC,EAAE,CAAC,KAAKC,CAAC,CAAC,EAAE,QAAS,SAAST,EAAE,CAAC0B,GAAE1B,EAAE,CAAC,CAAC,EAAE,SAASc,EAAE,CAAC,OAAO,KAAK,GAAGA,EAAEd,EAAE,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC,CAAE,EAAEwB,EAAE,OAAO,SAASxB,EAAEc,EAAE,CAAC,OAAOd,EAAE,KAAKA,EAAEc,EAAEO,GAAEG,CAAC,EAAExB,EAAE,GAAG,IAAIwB,CAAC,EAAEA,EAAE,OAAOF,GAAEE,EAAE,QAAQJ,GAAEI,EAAE,KAAK,SAASxB,EAAE,CAAC,OAAOwB,EAAE,IAAIxB,CAAC,CAAC,EAAEwB,EAAE,GAAGL,EAAED,CAAC,EAAEM,EAAE,GAAGL,EAAEK,EAAE,EAAE,CAAC,EAAEA,CAAC,CAAE,ICAvhN,IAAAG,GAAAC,GAAA,CAAAC,GAAAC,KAAA,EAAC,SAASC,EAAEC,EAAE,CAAW,OAAOH,IAAjB,UAAuC,OAAOC,GAApB,IAA2BA,GAAO,QAAQE,EAAE,EAAc,OAAO,QAAnB,YAA2B,OAAO,IAAI,OAAOA,CAAC,GAAGD,EAAe,OAAO,WAApB,IAA+B,WAAWA,GAAG,MAAM,2BAA2BC,EAAE,CAAC,GAAEH,GAAM,UAAU,CAAC,aAAa,IAAIE,EAAE,QAAQC,EAAE,UAAU,OAAO,SAASC,EAAEC,EAAE,CAAC,IAAIC,EAAED,EAAE,UAAUC,EAAE,QAAQ,SAASJ,EAAE,CAAC,OAAO,KAAK,OAAO,EAAE,EAAEA,CAAC,EAAE,KAAK,MAAM,KAAK,MAAM,EAAE,GAAG,CAAC,EAAE,KAAK,MAAM,KAAK,MAAM,EAAE,EAAE,GAAGA,EAAE,EAAE,CAAC,EAAE,IAAIK,EAAED,EAAE,IAAIA,EAAE,IAAI,SAASF,EAAEC,EAAE,CAAC,OAAOD,EAAE,OAAOA,CAAC,EAAE,KAAK,OAAO,EAAE,EAAEC,CAAC,IAAIF,EAAE,KAAK,IAAI,EAAEC,EAAEF,CAAC,EAAEK,EAAE,KAAK,IAAI,EAAEH,EAAEC,CAAC,CAAC,EAAE,IAAIG,EAAEF,EAAE,QAAQA,EAAE,QAAQ,SAASF,EAAEC,EAAE,CAAC,IAAIC,EAAE,KAAK,OAAO,EAAEC,EAAE,CAAC,CAACD,EAAE,EAAED,CAAC,GAAGA,EAAE,GAAGC,EAAE,EAAEF,CAAC,IAAID,EAAE,CAAC,IAAIM,EAAE,KAAK,QAAQ,EAAE,EAAE,OAAOF,EAAE,KAAK,MAAM,EAAEE,CAAC,EAAE,QAAQP,CAAC,EAAE,QAAQ,KAAK,EAAE,KAAK,MAAM,EAAEO,EAAE,CAAC,EAAE,MAAMP,CAAC,EAAE,MAAM,KAAK,CAAC,CAAC,OAAOM,EAAE,KAAK,IAAI,EAAEJ,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAE,ICAlwB,IAAAK,GAAA,GAAAC,GAAAD,GAAA,aAAAE,KAAA,eAAAC,GAAAH,IAAA,IAAAI,EAA0E,wBCEpE,SAAUC,GAAwBC,EAAgBC,EAA6B,CACjF,IAAMC,EAAiCD,EAAsB,QAAQ,YAAa,KAAK,EACvF,MAAO,GAAGD,CAAM,GAAGE,CAA8B,wBAAwBA,CAA8B,SAC3G,CAEM,SAAUC,GAAaC,EAA0B,CACnD,IAAIC,EACJ,OAAID,aAAsB,MACtBC,EAAO,CAAC,GAAGD,CAAU,EACdA,aAAsB,IAC7BC,EAAO,MAAM,KAAMD,EAAoC,KAAI,CAAE,EAE7DC,EAAO,OAAO,KAAKD,CAAU,EAG1BC,CACX,CAEM,SAAUC,EAAgBF,EAA0B,CAQtD,MAAO,MALaD,GAAaC,CAAU,EACtC,KAAK,CAACG,EAAGC,IAAMA,EAAE,OAASD,EAAE,MAAM,EAClC,KAAK,GAAG,EACR,QAAQ,MAAO,KAAK,CAED,GAC5B,CC7BA,IAAAE,GAAkB,WAQZ,SAAUC,GAAqBC,EAAkB,CACnD,OAAIA,EAAa,MACTA,EAAa,GACbA,EAAaA,EAAa,KAE1BA,EAAaA,EAAa,KAI3BA,CACX,CAEM,SAAUC,GAAqBC,EAAeC,EAAaC,EAAa,CAE1E,IAAMC,KAAY,GAAAC,SAAMJ,CAAO,EAC3BK,EAAaF,EACjBE,EAAaA,EAAW,MAAMH,EAAQ,CAAC,EACvCG,EAAaA,EAAW,KAAKJ,CAAG,EAChCI,EAAaA,EAAW,KAAKF,EAAU,KAAI,CAAE,EAE7C,IAAMG,EAAWD,EAAW,IAAI,EAAG,GAAG,EAChCE,EAAWF,EAAW,IAAI,GAAI,GAAG,EACvC,OAAI,KAAK,IAAIC,EAAS,KAAKH,CAAS,CAAC,EAAI,KAAK,IAAIE,EAAW,KAAKF,CAAS,CAAC,EACxEE,EAAaC,EACN,KAAK,IAAIC,EAAS,KAAKJ,CAAS,CAAC,EAAI,KAAK,IAAIE,EAAW,KAAKF,CAAS,CAAC,IAC/EE,EAAaE,GAGVF,EAAW,KAAI,CAC1B,CC/BO,IAAMG,GAAkD,CAC3D,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,QAAS,EACT,IAAK,EACL,OAAQ,EACR,UAAW,EACX,IAAK,EACL,OAAQ,EACR,SAAU,EACV,MAAO,EACP,SAAU,EACV,KAAM,EACN,QAAS,EACT,IAAK,EACL,OAAQ,EACR,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,SAAU,EACV,IAAK,EACL,OAAQ,GAGCC,GAAyD,CAClE,QAAS,EACT,SAAU,EACV,MAAO,EACP,MAAO,EACP,IAAK,EACL,KAAM,EACN,KAAM,EACN,OAAQ,EACR,UAAW,EACX,QAAS,GACT,SAAU,GACV,SAAU,IAGDC,EAA+C,CACxD,GAAGD,GACH,IAAK,EACL,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,IAAK,EACL,OAAQ,EACR,KAAM,EACN,QAAS,EACT,IAAK,GACL,OAAQ,GACR,IAAK,GACL,OAAQ,GACR,IAAK,GACL,OAAQ,IAGCE,GAAsD,CAC/D,IAAK,EACL,IAAK,EACL,MAAO,EACP,KAAM,EACN,KAAM,EACN,IAAK,EACL,MAAO,EACP,MAAO,EACP,KAAM,EACN,IAAK,GACL,OAAQ,GACR,OAAQ,IAGCC,GAAsD,CAC/D,MAAO,EACP,OAAQ,EACR,MAAO,EACP,OAAQ,EACR,MAAO,EACP,MAAO,EACP,QAAS,EACT,OAAQ,EACR,MAAO,EACP,MAAO,GACP,SAAU,GACV,QAAS,GACT,WAAY,GACZ,WAAY,GACZ,UAAW,GACX,UAAW,GACX,YAAa,GACb,WAAY,GACZ,WAAY,GACZ,UAAW,GACX,eAAgB,GAChB,eAAgB,GAChB,gBAAiB,GACjB,gBAAiB,GACjB,eAAgB,GAChB,eAAgB,GAChB,gBAAiB,GACjB,gBAAiB,GACjB,eAAgB,GAChB,eAAgB,GAChB,eAAgB,GAChB,eAAgB,GAChB,iBAAkB,GAClB,iBAAkB,GAClB,gBAAiB,GACjB,gBAAiB,GACjB,eAAgB,GAChB,eAAgB,GAChB,UAAa,GACb,eAAgB,GAChB,eAAgB,IAGPC,GAA2E,CACpF,OAAQ,SACR,QAAS,SACT,OAAQ,SACR,QAAS,SACT,KAAM,OACN,MAAO,OACP,IAAK,IACL,KAAM,IACN,KAAM,OACN,MAAO,OACP,MAAO,QACP,OAAQ,QACR,QAAS,UACT,SAAU,UACV,KAAM,OACN,MAAO,QAGEC,GAAmE,CAC5E,EAAG,SACH,IAAK,SACL,OAAQ,SACR,QAAS,SACT,EAAG,SACH,IAAK,SACL,KAAM,SACN,OAAQ,SACR,QAAS,SACT,EAAG,OACH,GAAI,OACJ,IAAK,OACL,KAAM,OACN,MAAO,OACP,EAAG,IACH,IAAK,IACL,KAAM,IACN,EAAG,IACH,KAAM,OACN,MAAO,OACP,GAAI,QACJ,IAAK,QACL,IAAK,QACL,MAAO,QACP,OAAQ,QACR,IAAK,UACL,QAAS,UACT,SAAU,UACV,EAAG,OACH,GAAI,OACJ,KAAM,OACN,MAAO,OAGP,GAAGD,IAKME,GAAiB,MAAMC,EAChCL,EAAuB,CAC1B,uHAEK,SAAUM,GAAmBC,EAAa,CAC5C,IAAMC,EAAMD,EAAM,YAAW,EAC7B,OAAIP,GAAwBQ,CAAG,IAAM,OAC1BR,GAAwBQ,CAAG,EAC3BA,IAAQ,KAAOA,IAAQ,MAAQA,GAAO,MACtC,EACAA,EAAI,MAAM,KAAK,EACf,EACAA,EAAI,MAAM,MAAM,EAChB,GACAA,EAAI,MAAM,QAAQ,EAClB,EACAA,EAAI,MAAM,SAAS,EACnB,EAGJ,WAAWA,CAAG,CACzB,CAIO,IAAMC,GAAyB,MAAMJ,EAAgBJ,EAAuB,CAAC,+BAC9E,SAAUS,GAA0BH,EAAa,CACnD,IAAIC,EAAMD,EAAM,YAAW,EAC3B,OAAIN,GAAwBO,CAAG,IAAM,OAC1BP,GAAwBO,CAAG,GAGtCA,EAAMA,EAAI,QAAQ,oBAAqB,EAAE,EAClC,SAASA,CAAG,EACvB,CAIO,IAAMG,GAAe,0EACtB,SAAUC,GAAUL,EAAa,CACnC,GAAI,MAAM,KAAKA,CAAK,EAEhB,OAAAA,EAAQA,EAAM,QAAQ,MAAO,EAAE,EACxB,SAASA,CAAK,EAAI,IAG7B,GAAI,QAAQ,KAAKA,CAAK,EAElB,OAAAA,EAAQA,EAAM,QAAQ,QAAS,EAAE,EAC1B,CAAC,SAASA,CAAK,EAG1B,GAAI,WAAW,KAAKA,CAAK,EAErB,OAAAA,EAAQA,EAAM,QAAQ,WAAY,EAAE,EAC7B,SAASA,CAAK,EAGzB,IAAMM,EAAgB,SAASN,CAAK,EACpC,OAAOO,GAAqBD,CAAa,CAC7C,CAIA,IAAME,GAA2B,IAAIX,EAAc,aAAaC,EAAgBF,EAAoB,CAAC,IAC/Fa,GAAyB,IAAI,OAAOD,GAA0B,GAAG,EAEjEE,GAAmC,IAAIb,EAAc,aAAaC,EACpEH,EAA4B,CAC/B,IAEYgB,EAAqBC,GAAwB,gCAAiCJ,EAAwB,EACtGK,GAA6BD,GACtC,gCACAF,EAAgC,EAG9B,SAAUI,EAAeC,EAAY,CACvC,IAAMC,EAAY,CAAA,EACdC,EAAgBF,EAChBf,EAAQS,GAAuB,KAAKQ,CAAa,EACrD,KAAOjB,GACHkB,GAAwBF,EAAWhB,CAAK,EACxCiB,EAAgBA,EAAc,UAAUjB,EAAM,CAAC,EAAE,MAAM,EAAE,KAAI,EAC7DA,EAAQS,GAAuB,KAAKQ,CAAa,EAErD,OAAOD,CACX,CAEA,SAASE,GAAwBF,EAAWhB,EAAK,CAC7C,IAAMC,EAAMF,GAAmBC,EAAM,CAAC,CAAC,EACjCmB,EAAOvB,GAAqBI,EAAM,CAAC,EAAE,YAAW,CAAE,EACxDgB,EAAUG,CAAI,EAAIlB,CACtB,CC9RA,IAAAmB,GAA0B,WAC1BC,GAAiC,WCO3B,SAAUC,GAAgBC,EAA8BC,EAAwB,CAClFA,EAAcA,EAAY,IAAI,EAAG,KAAK,EACtCC,GAAiBF,EAAWC,CAAW,EACvCE,GAAiBH,EAAWC,CAAW,CAC3C,CAEM,SAAUG,EAAkBJ,EAA8BC,EAAwB,CACpFD,EAAU,OAAO,MAAOC,EAAY,KAAI,CAAE,EAC1CD,EAAU,OAAO,QAASC,EAAY,MAAK,EAAK,CAAC,EACjDD,EAAU,OAAO,OAAQC,EAAY,KAAI,CAAE,CAC/C,CAEM,SAAUI,GAAkBL,EAA8BC,EAAwB,CACpFD,EAAU,OAAO,OAAQC,EAAY,KAAI,CAAE,EAC3CD,EAAU,OAAO,SAAUC,EAAY,OAAM,CAAE,EAC/CD,EAAU,OAAO,SAAUC,EAAY,OAAM,CAAE,EAC/CD,EAAU,OAAO,cAAeC,EAAY,YAAW,CAAE,EACrDD,EAAU,IAAI,MAAM,EAAI,GACxBA,EAAU,OAAO,WAAYM,EAAS,EAAE,EAExCN,EAAU,OAAO,WAAYM,EAAS,EAAE,CAEhD,CAEM,SAAUJ,GAAiBF,EAA8BC,EAAwB,CACnFD,EAAU,MAAM,MAAOC,EAAY,KAAI,CAAE,EACzCD,EAAU,MAAM,QAASC,EAAY,MAAK,EAAK,CAAC,EAChDD,EAAU,MAAM,OAAQC,EAAY,KAAI,CAAE,CAC9C,CAEM,SAAUE,GAAiBH,EAA8BC,EAAwB,CACnFD,EAAU,MAAM,OAAQC,EAAY,KAAI,CAAE,EAC1CD,EAAU,MAAM,SAAUC,EAAY,OAAM,CAAE,EAC9CD,EAAU,MAAM,SAAUC,EAAY,OAAM,CAAE,EAC9CD,EAAU,MAAM,cAAeC,EAAY,YAAW,CAAE,CAC5D,CC7CA,IAAAM,GAAkB,WAGX,IAAMC,GAAqC,CAC9C,KAAM,IACN,KAAM,IACN,IAAK,KACL,KAAM,IACN,KAAM,IACN,IAAK,IACL,KAAM,KACN,KAAM,KACN,KAAM,IACN,KAAM,KACN,IAAK,KACL,MAAO,IACP,KAAM,IACN,KAAM,IACN,IAAK,KACL,IAAK,KACL,KAAM,IACN,KAAM,IACN,MAAO,EACP,KAAM,IACN,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,KACL,KAAM,KACN,IAAK,KACL,IAAK,GACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,KACL,KAAM,IAGN,IAAK,CACD,wBAAyB,EAAI,GAC7B,qBAAsB,GACtB,SAAWC,GAAiBC,GAAsBD,EAAME,EAAM,MAAOC,EAAQ,OAAQ,CAAC,EACtF,OAASH,GAAiBC,GAAsBD,EAAME,EAAM,QAASC,EAAQ,OAAQ,CAAC,GAE1F,MAAO,IACP,MAAO,IACP,IAAK,KACL,KAAM,KACN,IAAK,KACL,IAAK,KACL,IAAK,KACL,GAAI,CACA,wBAAyB,GAAK,GAC9B,qBAAsB,GAAK,GAC3B,SAAWH,GAAiBI,GAAqBJ,EAAME,EAAM,MAAOC,EAAQ,OAAQ,EAAG,CAAC,EACxF,OAASH,GAAiBI,GAAqBJ,EAAME,EAAM,SAAUC,EAAQ,OAAQ,EAAG,CAAC,GAE7F,IAAK,IACL,IAAK,IACL,KAAM,IACN,KAAM,IACN,MAAO,KACP,KAAM,KACN,IAAK,IACL,IAAK,KACL,IAAK,KACL,KAAM,IACN,IAAK,IACL,KAAM,EACN,IAAK,IACL,IAAK,KACL,GAAI,CACA,wBAAyB,GAAK,GAC9B,qBAAsB,GAAK,GAC3B,SAAWH,GAAiBI,GAAqBJ,EAAME,EAAM,MAAOC,EAAQ,OAAQ,EAAG,CAAC,EACxF,OAASH,GAAiBI,GAAqBJ,EAAME,EAAM,SAAUC,EAAQ,OAAQ,EAAG,CAAC,GAE7F,KAAM,IACN,IAAK,IACL,KAAM,KACN,IAAK,KACL,IAAK,KACL,KAAM,KACN,KAAM,KACN,IAAK,IACL,IAAK,KACL,KAAM,IACN,IAAK,EACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,KAAM,KACN,IAAK,KACL,IAAK,KACL,IAAK,KACL,KAAM,KACN,IAAK,IACL,IAAK,KACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,MAAO,IACP,KAAM,IACN,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,MAAO,IACP,KAAM,IACN,IAAK,IACL,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,IACN,KAAM,KACN,KAAM,IACN,IAAK,KACL,KAAM,IACN,IAAK,GACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,GAAI,CACA,wBAAyB,GAAK,GAC9B,qBAAsB,GAAK,GAC3B,SAAWH,GAAiBI,GAAqBJ,EAAME,EAAM,MAAOC,EAAQ,OAAQ,EAAG,CAAC,EACxF,OAASH,GAAiBI,GAAqBJ,EAAME,EAAM,SAAUC,EAAQ,OAAQ,EAAG,CAAC,GAE7F,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,MAAO,IACP,KAAM,IACN,IAAK,IACL,IAAK,KACL,IAAK,KACL,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,IACN,IAAK,KACL,IAAK,KACL,MAAO,IACP,KAAM,IACN,IAAK,IACL,KAAM,IACN,IAAK,IACL,IAAK,IACL,KAAM,KACN,KAAM,KACN,KAAM,IACN,IAAK,KACL,GAAI,CACA,wBAAyB,GAAK,GAC9B,qBAAsB,GAAK,GAC3B,SAAWH,GAAiBI,GAAqBJ,EAAME,EAAM,MAAOC,EAAQ,OAAQ,EAAG,CAAC,EACxF,OAASH,GAAiBI,GAAqBJ,EAAME,EAAM,SAAUC,EAAQ,OAAQ,EAAG,CAAC,GAE7F,IAAK,IACL,KAAM,KACN,IAAK,KACL,IAAK,IACL,KAAM,IACN,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,KACL,IAAK,KACL,KAAM,KACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,EACL,KAAM,KACN,IAAK,KACL,IAAK,IACL,IAAK,KACL,MAAO,IACP,KAAM,IACN,IAAK,IACL,KAAM,IACN,IAAK,GACL,KAAM,GACN,KAAM,GACN,IAAK,EACL,IAAK,EACL,IAAK,IACL,KAAM,KACN,IAAK,KACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,GAAI,EACJ,MAAO,IACP,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,KAcJ,SAAUC,GAAqBJ,EAAcK,EAAcC,EAAkB,EAAkBC,EAAO,EAAC,CACzG,IAAIC,EAAa,EACbC,EAAI,EACR,KAAOA,EAAI,GACPD,IACa,IAAI,KAAKR,EAAMK,EAAQ,EAAGG,CAAU,EACxC,OAAM,IAAOF,GAASG,IAEnC,OAAO,IAAI,KAAKT,EAAMK,EAAQ,EAAGG,EAAYD,CAAI,CACrD,CAYM,SAAUN,GAAsBD,EAAcK,EAAcC,EAAkBC,EAAO,EAAC,CAGxF,IAAMG,EAAoBJ,IAAY,EAAI,EAAIA,EACxCK,EAAO,IAAI,KAAKX,EAAMK,EAAQ,EAAI,EAAG,EAAG,EAAE,EAC1CO,EAAwBD,EAAK,OAAM,IAAO,EAAI,EAAIA,EAAK,OAAM,EAC/DE,EACJ,OAAID,IAA0BF,EAAmBG,EAAU,EAClDD,EAAwBF,EAAmBG,EAAU,EAAID,EAAwBF,EACrFG,EAAUD,EAAwBF,EACvCC,EAAK,QAAQA,EAAK,QAAO,EAAKE,CAAO,EAC9B,IAAI,KAAKb,EAAMK,EAAQ,EAAGM,EAAK,QAAO,EAAIJ,CAAI,CACzD,CAWM,SAAUO,GACZC,EACAJ,EACAK,EAAqC,CAAA,EAAE,CAEvC,GAAID,GAAiB,KACjB,OAAO,KAGX,GAAI,OAAOA,GAAkB,SACzB,OAAOA,EAGX,IAAME,EAAkBD,EAAkBD,CAAa,GAAKhB,GAAkBgB,CAAa,EAC3F,OAAIE,GAAmB,KACZ,KAGP,OAAOA,GAAmB,SACnBA,EAOPN,GAAQ,KACD,QAKP,GAAAO,SAAMP,CAAI,EAAE,QAAQM,EAAgB,SAASN,EAAK,YAAW,CAAE,CAAC,GAChE,IAAC,GAAAO,SAAMP,CAAI,EAAE,QAAQM,EAAgB,OAAON,EAAK,YAAW,CAAE,CAAC,EAExDM,EAAgB,wBAIpBA,EAAgB,oBAC3B,CF3TA,GAAAE,QAAM,OAAO,GAAAC,OAAa,EAEpB,IAAOC,GAAP,KAA4B,CAI9B,YAAYC,EAA+B,CACvCA,EAAQA,GAAS,IAAI,KACjBA,aAAiB,KACjB,KAAK,QAAUA,GAEf,KAAK,QAAUA,EAAM,SAAW,IAAI,KACpC,KAAK,eAAiBC,GAAiBD,EAAM,SAAU,KAAK,OAAO,EAE3E,CAMA,6BAA2B,CACvB,OAAO,IAAI,KAAK,KAAK,QAAQ,QAAO,EAAK,KAAK,kCAAkC,KAAK,OAAO,EAAI,GAAK,CACzG,CAOA,kCAAkCE,EAAaC,EAA+B,EACtE,CAACD,GAAQA,EAAK,QAAO,EAAK,KAG1BA,EAAO,IAAI,MAGf,IAAME,EAAwB,CAACF,EAAK,kBAAiB,EAC/CG,EAAuBF,GAA0B,KAAK,gBAAkBC,EAC9E,OAAOA,EAAwBC,CACnC,GAGSC,EAAP,MAAOC,CAAiB,CAK1B,YAAYC,EAAkCC,EAA+C,CAIzF,GAHA,KAAK,UAAYD,EACjB,KAAK,YAAc,CAAA,EACnB,KAAK,cAAgB,CAAA,EACjBC,EACA,QAAWC,KAAOD,EACd,KAAK,YAAYC,CAAgB,EAAID,EAAgBC,CAAgB,EAI7E,IAAMC,KAAW,GAAAd,SAAMW,EAAU,OAAO,EACxC,KAAK,MAAM,MAAOG,EAAS,KAAI,CAAE,EACjC,KAAK,MAAM,QAASA,EAAS,MAAK,EAAK,CAAC,EACxC,KAAK,MAAM,OAAQA,EAAS,KAAI,CAAE,EAClC,KAAK,MAAM,OAAQ,EAAE,EACrB,KAAK,MAAM,SAAU,CAAC,EACtB,KAAK,MAAM,SAAU,CAAC,EACtB,KAAK,MAAM,cAAe,CAAC,CAC/B,CAEA,IAAIC,EAAoB,CACpB,OAAIA,KAAa,KAAK,YACX,KAAK,YAAYA,CAAS,EAGjCA,KAAa,KAAK,cACX,KAAK,cAAcA,CAAS,EAGhC,IACX,CAEA,UAAUA,EAAoB,CAC1B,OAAOA,KAAa,KAAK,WAC7B,CAEA,sBAAoB,CAChB,OAAO,OAAO,KAAK,KAAK,WAAW,CACvC,CAEA,MAAMA,EAAsBC,EAAa,CACrC,OAAID,KAAa,KAAK,YACX,MAEX,KAAK,cAAcA,CAAS,EAAIC,EACzB,KACX,CAEA,OAAOD,EAAsBC,EAAa,CACtC,YAAK,YAAYD,CAAS,EAAIC,EAC9B,OAAO,KAAK,cAAcD,CAAS,EAC5B,IACX,CAEA,OAAOA,EAAoB,CACvB,OAAO,KAAK,YAAYA,CAAS,EACjC,OAAO,KAAK,cAAcA,CAAS,CACvC,CAEA,OAAK,CACD,IAAMA,EAAY,IAAIL,EAAkB,KAAK,SAAS,EACtDK,EAAU,YAAc,CAAA,EACxBA,EAAU,cAAgB,CAAA,EAE1B,QAAWF,KAAO,KAAK,YACnBE,EAAU,YAAYF,CAAgB,EAAI,KAAK,YAAYA,CAAgB,EAG/E,QAAWA,KAAO,KAAK,cACnBE,EAAU,cAAcF,CAAgB,EAAI,KAAK,cAAcA,CAAgB,EAGnF,OAAOE,CACX,CAEA,YAAU,CACN,MAAO,CAAC,KAAK,UAAU,MAAM,GAAK,CAAC,KAAK,UAAU,QAAQ,GAAK,CAAC,KAAK,UAAU,QAAQ,CAC3F,CAEA,YAAU,CACN,MAAO,CAAC,KAAK,UAAU,SAAS,GAAK,CAAC,KAAK,UAAU,KAAK,GAAK,CAAC,KAAK,UAAU,OAAO,CAC1F,CAEA,wBAAsB,CAClB,OAAO,KAAK,UAAU,SAAS,GAAK,CAAC,KAAK,UAAU,KAAK,GAAK,CAAC,KAAK,UAAU,OAAO,CACzF,CAEA,uBAAqB,CACjB,OAAO,KAAK,UAAU,OAAO,GAAK,CAAC,KAAK,UAAU,MAAM,CAC5D,CAEA,aAAW,CACP,IAAMV,EAAO,KAAK,8BAA6B,EAM/C,MAJI,EAAAA,EAAK,YAAW,IAAO,KAAK,IAAI,MAAM,GACtCA,EAAK,SAAQ,IAAO,KAAK,IAAI,OAAO,EAAI,GACxCA,EAAK,QAAO,IAAO,KAAK,IAAI,KAAK,GACjC,KAAK,IAAI,MAAM,GAAK,MAAQA,EAAK,SAAQ,GAAM,KAAK,IAAI,MAAM,GAC9D,KAAK,IAAI,QAAQ,GAAK,MAAQA,EAAK,WAAU,GAAM,KAAK,IAAI,QAAQ,EAG5E,CAEA,UAAQ,CACJ,MAAO,oCAAoC,KAAK,UAAU,KAAK,WAAW,CAAC,oBAAoB,KAAK,UAChG,KAAK,aAAa,CACrB,iBAAiB,KAAK,UAAU,KAAK,SAAS,CAAC,GACpD,CAEA,OAAK,CACD,SAAO,GAAAL,SAAM,KAAK,KAAI,CAAE,CAC5B,CAEA,MAAI,CACA,IAAMK,EAAO,KAAK,8BAA6B,EACzCY,EAAqB,KAAK,UAAU,kCAAkCZ,EAAM,KAAK,IAAI,gBAAgB,CAAC,EAC5G,OAAO,IAAI,KAAKA,EAAK,QAAO,EAAKY,EAAqB,GAAK,CAC/D,CAEQ,+BAA6B,CACjC,IAAMZ,EAAO,IAAI,KACb,KAAK,IAAI,MAAM,EACf,KAAK,IAAI,OAAO,EAAI,EACpB,KAAK,IAAI,KAAK,EACd,KAAK,IAAI,MAAM,EACf,KAAK,IAAI,QAAQ,EACjB,KAAK,IAAI,QAAQ,EACjB,KAAK,IAAI,aAAa,CAAC,EAG3B,OAAAA,EAAK,YAAY,KAAK,IAAI,MAAM,CAAC,EAC1BA,CACX,CAEA,OAAO,4BACHM,EACAO,EAAwC,CAExC,IAAIb,KAAO,GAAAL,SAAMW,EAAU,OAAO,EAClC,QAAWE,KAAOK,EACdb,EAAOA,EAAK,IAAIa,EAAUL,CAAgB,EAAGA,CAAgB,EAGjE,IAAMM,EAAa,IAAIT,EAAkBC,CAAS,EAClD,OAAIO,EAAU,MAAWA,EAAU,QAAaA,EAAU,QACtDE,GAAkBD,EAAYd,CAAI,EAClCgB,EAAkBF,EAAYd,CAAI,EAC9BM,EAAU,iBAAmB,MAC7BQ,EAAW,OAAO,iBAAkB,CAACR,EAAU,QAAQ,kBAAiB,CAAE,IAG9EW,GAAiBH,EAAYd,CAAI,EAC7BM,EAAU,iBAAmB,MAC7BQ,EAAW,MAAM,iBAAkB,CAACR,EAAU,QAAQ,kBAAiB,CAAE,EAGzEO,EAAU,GACVC,EAAW,OAAO,MAAOd,EAAK,KAAI,CAAE,EACpCc,EAAW,OAAO,QAASd,EAAK,MAAK,EAAK,CAAC,EAC3Cc,EAAW,OAAO,OAAQd,EAAK,KAAI,CAAE,IAEjCa,EAAU,MACVC,EAAW,MAAM,UAAWd,EAAK,IAAG,CAAE,EAG1Cc,EAAW,MAAM,MAAOd,EAAK,KAAI,CAAE,EAC/Ba,EAAU,OACVC,EAAW,OAAO,QAASd,EAAK,MAAK,EAAK,CAAC,EAC3Cc,EAAW,OAAO,OAAQd,EAAK,KAAI,CAAE,IAErCc,EAAW,MAAM,QAASd,EAAK,MAAK,EAAK,CAAC,EACtCa,EAAU,KACVC,EAAW,OAAO,OAAQd,EAAK,KAAI,CAAE,EAErCc,EAAW,MAAM,OAAQd,EAAK,KAAI,CAAE,KAM7Cc,CACX,GAGSI,GAAP,MAAOC,CAAa,CAUtB,YACIb,EACAc,EACAC,EACAC,EACAC,EAAuB,CAEvB,KAAK,UAAYjB,EACjB,KAAK,QAAUA,EAAU,QACzB,KAAK,MAAQc,EACb,KAAK,KAAOC,EACZ,KAAK,MAAQC,GAAS,IAAIlB,EAAkBE,CAAS,EACrD,KAAK,IAAMiB,CACf,CAEA,OAAK,CACD,IAAMC,EAAS,IAAIL,EAAc,KAAK,UAAW,KAAK,MAAO,KAAK,IAAI,EACtE,OAAAK,EAAO,MAAQ,KAAK,MAAQ,KAAK,MAAM,MAAK,EAAK,KACjDA,EAAO,IAAM,KAAK,IAAM,KAAK,IAAI,MAAK,EAAK,KACpCA,CACX,CAEA,MAAI,CACA,OAAO,KAAK,MAAM,KAAI,CAC1B,CAEA,UAAQ,CACJ,MAAO,0BAA0B,KAAK,KAAK,YAAY,KAAK,IAAI,UACpE,GG5QE,IAAgBC,EAAhB,KAAsD,CAA5D,aAAA,CAOY,KAAA,mBAA8B,KAC9B,KAAA,cAAyB,IA2BrC,CAzBI,qBAAmB,CACf,MAAO,SACX,CAEA,QAAQC,EAAuB,CAC3B,IAAMC,EAAe,KAAK,aAAaD,CAAO,EAC9C,OAAIC,GAAgB,KAAK,mBACd,KAAK,eAGhB,KAAK,cAAgB,IAAI,OAAO,GAAG,KAAK,oBAAmB,CAAE,GAAGA,EAAa,MAAM,GAAIA,EAAa,KAAK,EACzG,KAAK,mBAAqBA,EACnB,KAAK,cAChB,CAEA,QAAQD,EAAyBE,EAAuB,CACpD,IAAMC,EAASD,EAAM,CAAC,GAAK,GAC3BA,EAAM,MAAQA,EAAM,MAAQC,EAAO,OACnCD,EAAM,CAAC,EAAIA,EAAM,CAAC,EAAE,UAAUC,EAAO,MAAM,EAC3C,QAAS,EAAI,EAAG,EAAID,EAAM,OAAQ,IAC9BA,EAAM,EAAI,CAAC,EAAIA,EAAM,CAAC,EAG1B,OAAO,KAAK,aAAaF,EAASE,CAAK,CAC3C,GCpCJ,IAAME,GAAyB,IAAI,OAC/B,kEAAkEC,CAAkB,aACpF,GAAG,EAGDC,GAAsB,IAAI,OAC5B,uFACsED,CAAkB,aACxF,GAAG,EAGDE,GAA6B,IAAI,OACnC,uFACsEC,EAA0B,aAChG,GAAG,EAGcC,GAArB,cAA0DC,CAAsC,CAC5F,YAAoBC,EAAmB,CACnC,MAAK,EADW,KAAA,WAAAA,CAEpB,CAEA,aAAaC,EAAuB,CAChC,OAAI,KAAK,WACEL,GAEJK,EAAQ,OAAO,YAAcR,GAAyBE,EACjE,CAEA,aAAaM,EAAyBC,EAAuB,CACzD,IAAMC,EAAYC,EAAeF,EAAM,CAAC,CAAC,EACzC,OAAOG,EAAkB,4BAA4BJ,EAAQ,UAAWE,CAAS,CACrF,GC3BJ,IAAMG,GAAU,IAAI,OAChB,mBACQC,EAAsB,+DAGlBA,EAAsB,sCAG1BC,EAAgBC,CAAgB,CAAC,0BAG7BC,EAAY,4BAGxB,GAAG,EAGDC,GAAa,EACbC,GAAgB,EAChBC,GAAmB,EACnBC,GAAa,EAEEC,GAArB,cAA2DC,CAAsC,CAC7F,cAAY,CACR,OAAOV,EACX,CAEA,aAAaW,EAAyBC,EAAuB,CACzD,IAAMC,EAASF,EAAQ,oBAAoBC,EAAM,MAAOA,EAAM,CAAC,CAAC,EAE1DE,EAAQX,EAAiBS,EAAML,EAAgB,EAAE,YAAW,CAAE,EAC9DQ,EAAMC,GAA0BJ,EAAMP,EAAU,CAAC,EACvD,GAAIU,EAAM,GAEN,OAAAH,EAAM,MAAQA,EAAM,MAAQA,EAAMP,EAAU,EAAE,OACvC,KAMX,GAHAQ,EAAO,MAAM,OAAO,QAASC,CAAK,EAClCD,EAAO,MAAM,OAAO,MAAOE,CAAG,EAE1BH,EAAMJ,EAAU,EAAG,CACnB,IAAMS,EAAaC,GAAUN,EAAMJ,EAAU,CAAC,EAC9CK,EAAO,MAAM,OAAO,OAAQI,CAAU,MACnC,CACH,IAAME,EAAOC,GAAqBT,EAAQ,QAASI,EAAKD,CAAK,EAC7DD,EAAO,MAAM,MAAM,OAAQM,CAAI,EAGnC,GAAIP,EAAMN,EAAa,EAAG,CACtB,IAAMe,EAAUL,GAA0BJ,EAAMN,EAAa,CAAC,EAE9DO,EAAO,IAAMA,EAAO,MAAM,MAAK,EAC/BA,EAAO,IAAI,OAAO,MAAOQ,CAAO,EAGpC,OAAOR,CACX,GC3DJ,IAAMS,GAAU,IAAI,OAChB,IAAIC,EAAgBC,CAAgB,CAAC,uBAE7BC,EAAsB,2CAGtBA,EAAsB,gCAItBC,EAAY,yBAGpB,GAAG,EAGDC,GAAmB,EACnBC,GAAa,EACbC,GAAgB,EAChBC,GAAa,EAYEC,GAArB,cAA2DC,CAAsC,CAC7F,cAAY,CACR,OAAOV,EACX,CAEA,aAAaW,EAAyBC,EAAuB,CACzD,IAAMC,EAAQX,EAAiBU,EAAMP,EAAgB,EAAE,YAAW,CAAE,EAC9DS,EAAMC,GAA0BH,EAAMN,EAAU,CAAC,EACvD,GAAIQ,EAAM,GACN,OAAO,KAGX,IAAME,EAAaL,EAAQ,wBAAwB,CAC/C,IAAKG,EACL,MAAOD,EACV,EAED,GAAID,EAAMJ,EAAU,EAAG,CACnB,IAAMS,EAAOC,GAAUN,EAAMJ,EAAU,CAAC,EACxCQ,EAAW,OAAO,OAAQC,CAAI,MAC3B,CACH,IAAMA,EAAOE,GAAqBR,EAAQ,QAASG,EAAKD,CAAK,EAC7DG,EAAW,MAAM,OAAQC,CAAI,EAGjC,GAAI,CAACL,EAAML,EAAa,EACpB,OAAOS,EAIX,IAAMI,EAAUL,GAA0BH,EAAML,EAAa,CAAC,EACxDc,EAASV,EAAQ,oBAAoBC,EAAM,MAAOA,EAAM,CAAC,CAAC,EAChE,OAAAS,EAAO,MAAQL,EACfK,EAAO,IAAML,EAAW,MAAK,EAC7BK,EAAO,IAAI,OAAO,MAAOD,CAAO,EAEzBC,CACX,GCrEJ,IAAMC,GAAU,IAAI,OAChB,iBACQC,EAAgBC,CAAgB,CAAC,qBAGxBC,EAAY,uCAG7B,GAAG,EAGDC,GAAe,EACfC,GAAmB,EACnBC,GAAa,EASEC,GAArB,cAA+CC,CAAsC,CACjF,cAAY,CACR,OAAOR,EACX,CAEA,aAAaS,EAAyBC,EAAuB,CACzD,IAAMC,EAAYD,EAAML,EAAgB,EAAE,YAAW,EAGrD,GAAIK,EAAM,CAAC,EAAE,QAAU,GAAK,CAACE,GAA2BD,CAAS,EAC7D,OAAO,KAGX,IAAME,EAASJ,EAAQ,oBACnBC,EAAM,OAASA,EAAMN,EAAY,GAAK,IAAI,OAC1CM,EAAM,MAAQA,EAAM,CAAC,EAAE,MAAM,EAEjCG,EAAO,MAAM,MAAM,MAAO,CAAC,EAE3B,IAAMC,EAAQZ,EAAiBS,CAAS,EAGxC,GAFAE,EAAO,MAAM,OAAO,QAASC,CAAK,EAE9BJ,EAAMJ,EAAU,EAAG,CACnB,IAAMS,EAAOC,GAAUN,EAAMJ,EAAU,CAAC,EACxCO,EAAO,MAAM,OAAO,OAAQE,CAAI,MAC7B,CACH,IAAMA,EAAOE,GAAqBR,EAAQ,QAAS,EAAGK,CAAK,EAC3DD,EAAO,MAAM,MAAM,OAAQE,CAAI,EAGnC,OAAOF,CACX,GChDJ,IAAMK,GAAU,IAAI,OAChB,4BACWC,EAAgBC,CAAgB,CAAC,kDAG5C,GAAG,EAGDC,GAAoB,EACpBC,GAAmB,EACnBC,GAAqB,EACrBC,GAAoB,EAELC,GAArB,cAAwDC,CAAsC,CAC1F,cAAY,CACR,OAAOR,EACX,CAEA,aAAaS,EAAyBC,EAAuB,CACzD,IAAMC,EAAQD,EAAML,EAAkB,EAChC,SAASK,EAAML,EAAkB,CAAC,EAClCH,EAAiBQ,EAAMN,EAAgB,EAAE,YAAW,CAAE,EAE5D,GAAIO,EAAQ,GAAKA,EAAQ,GACrB,OAAO,KAGX,IAAMC,EAAO,SAASF,EAAMP,EAAiB,CAAC,EAG9C,MAAO,CACH,IAHQ,SAASO,EAAMJ,EAAiB,CAAC,EAIzC,MAAOK,EACP,KAAMC,EAEd,GC3CJ,IAAMC,GAAU,IAAI,OAAO,mCAAyC,GAAG,EAEjEC,GAAc,EACdC,GAAa,EAOEC,GAArB,cAAsDC,CAAsC,CACxF,cAAY,CACR,OAAOJ,EACX,CAEA,aAAaK,EAAyBC,EAAuB,CACzD,IAAMC,EAAO,SAASD,EAAMJ,EAAU,CAAC,EACjCM,EAAQ,SAASF,EAAML,EAAW,CAAC,EAEzC,OAAOI,EAAQ,wBAAuB,EAAG,MAAM,MAAO,CAAC,EAAE,OAAO,QAASG,CAAK,EAAE,OAAO,OAAQD,CAAI,CACvG,GCnBJ,SAASE,GAAmBC,EAAsBC,EAAuBC,EAAuBC,EAAa,CACzG,OAAO,IAAI,OACH,GAAGH,CAAY,GACZC,CAAa,2HAYbC,CAAa,GACpBC,CAAK,CAEb,CAGA,SAASC,GAAoBC,EAAwBC,EAAuB,CACxE,OAAO,IAAI,OACP,KAAKD,CAAc,0IAWZC,CAAe,GACtB,GAAG,CAEX,CAEA,IAAMC,GAAa,EACbC,GAAe,EACfC,GAAe,EACfC,GAAqB,EACrBC,GAAmB,EAEHC,GAAhB,KAA4C,CAK9C,YAAYC,EAAa,GAAK,CAiVtB,KAAA,oBAAsB,KACtB,KAAA,oBAAsB,KACtB,KAAA,yBAA2B,KAqB3B,KAAA,qBAAuB,KACvB,KAAA,sBAAwB,KACxB,KAAA,0BAA4B,KAzWhC,KAAK,WAAaA,CACtB,CAEA,cAAY,CACR,MAAO,GACX,CAEA,4BAA0B,CACtB,MAAO,eACX,CAEA,eAAa,CACT,MAAO,WACX,CAEA,iBAAe,CACX,MAAO,WACX,CAEA,QAAQC,EAAuB,CAC3B,OAAO,KAAK,kCAAiC,CACjD,CAEA,QAAQA,EAAyBC,EAAuB,CACpD,IAAMC,EAAkB,KAAK,6BAA6BF,EAASC,CAAK,EACxE,GAAI,CAACC,EACD,OAAAD,EAAM,OAASA,EAAM,CAAC,EAAE,OACjB,KAGX,IAAME,EAAQF,EAAM,MAAQA,EAAM,CAAC,EAAE,OAC/BG,EAAOH,EAAM,CAAC,EAAE,UAAUA,EAAM,CAAC,EAAE,MAAM,EACzCI,EAASL,EAAQ,oBAAoBG,EAAOC,EAAMF,CAAe,EACvED,EAAM,OAASA,EAAM,CAAC,EAAE,OAExB,IAAMK,EAAgBN,EAAQ,KAAK,UAAUC,EAAM,KAAK,EAElDM,EADmB,KAAK,oCAAmC,EACzB,KAAKD,CAAa,EAG1D,OAAIF,EAAK,MAAM,UAAU,GAAKG,GAAkBA,EAAe,CAAC,EAAE,MAAM,uBAAuB,EACpF,KAIP,CAACA,GAEDA,EAAe,CAAC,EAAE,MAAM,uBAAuB,EAExC,KAAK,sCAAsCF,CAAM,GAG5DA,EAAO,IAAM,KAAK,+BAA+BL,EAASO,EAAgBF,CAAM,EAC5EA,EAAO,MACPA,EAAO,MAAQE,EAAe,CAAC,GAG5B,KAAK,mCAAmCF,CAAM,EACzD,CAEA,6BACIL,EACAC,EACAO,EAAS,GAAK,CAEd,IAAMC,EAAaT,EAAQ,wBAAuB,EAC9CU,EAAS,EACTC,EAAW,KAGXC,EAAO,SAASX,EAAMR,EAAU,CAAC,EACrC,GAAImB,EAAO,IAAK,CACZ,GAAI,KAAK,YAAcX,EAAMP,EAAY,GAAK,KAC1C,OAAO,KAGXgB,EAASE,EAAO,IAChBA,EAAO,KAAK,MAAMA,EAAO,GAAG,EAGhC,GAAIA,EAAO,GACP,OAAO,KAIX,GAAIX,EAAMP,EAAY,GAAK,KAAM,CAC7B,GAAIO,EAAMP,EAAY,EAAE,QAAU,GAAK,CAACO,EAAMJ,EAAgB,EAE1D,OAAO,KAGXa,EAAS,SAAST,EAAMP,EAAY,CAAC,EAGzC,GAAIgB,GAAU,GACV,OAAO,KAQX,GALIE,EAAO,KACPD,EAAWE,EAAS,IAIpBZ,EAAMJ,EAAgB,GAAK,KAAM,CACjC,GAAIe,EAAO,GAAI,OAAO,KACtB,IAAME,EAAOb,EAAMJ,EAAgB,EAAE,CAAC,EAAE,YAAW,EAC/CiB,GAAQ,MACRH,EAAWE,EAAS,GAChBD,GAAQ,KACRA,EAAO,IAIXE,GAAQ,MACRH,EAAWE,EAAS,GAChBD,GAAQ,KACRA,GAAQ,KAmBpB,GAdAH,EAAW,OAAO,OAAQG,CAAI,EAC9BH,EAAW,OAAO,SAAUC,CAAM,EAE9BC,IAAa,KACbF,EAAW,OAAO,WAAYE,CAAQ,EAElCC,EAAO,GACPH,EAAW,MAAM,WAAYI,EAAS,EAAE,EAExCJ,EAAW,MAAM,WAAYI,EAAS,EAAE,EAK5CZ,EAAML,EAAkB,GAAK,KAAM,CACnC,IAAMmB,EAAc,SAASd,EAAML,EAAkB,EAAE,UAAU,EAAG,CAAC,CAAC,EACtE,GAAImB,GAAe,IAAM,OAAO,KAEhCN,EAAW,OAAO,cAAeM,CAAW,EAIhD,GAAId,EAAMN,EAAY,GAAK,KAAM,CAC7B,IAAMqB,EAAS,SAASf,EAAMN,EAAY,CAAC,EAC3C,GAAIqB,GAAU,GAAI,OAAO,KAEzBP,EAAW,OAAO,SAAUO,CAAM,EAGtC,OAAOP,CACX,CAEA,+BACIT,EACAC,EACAI,EAAqB,CAErB,IAAMI,EAAaT,EAAQ,wBAAuB,EAGlD,GAAIC,EAAML,EAAkB,GAAK,KAAM,CACnC,IAAMmB,EAAc,SAASd,EAAML,EAAkB,EAAE,UAAU,EAAG,CAAC,CAAC,EACtE,GAAImB,GAAe,IAAM,OAAO,KAEhCN,EAAW,OAAO,cAAeM,CAAW,EAIhD,GAAId,EAAMN,EAAY,GAAK,KAAM,CAC7B,IAAMqB,EAAS,SAASf,EAAMN,EAAY,CAAC,EAC3C,GAAIqB,GAAU,GAAI,OAAO,KAEzBP,EAAW,OAAO,SAAUO,CAAM,EAGtC,IAAIJ,EAAO,SAASX,EAAMR,EAAU,CAAC,EACjCiB,EAAS,EACTC,EAAW,GAUf,GAPIV,EAAMP,EAAY,GAAK,KACvBgB,EAAS,SAAST,EAAMP,EAAY,CAAC,EAC9BkB,EAAO,MACdF,EAASE,EAAO,IAChBA,EAAO,KAAK,MAAMA,EAAO,GAAG,GAG5BF,GAAU,IAAME,EAAO,GACvB,OAAO,KAQX,GALIA,GAAQ,KACRD,EAAWE,EAAS,IAIpBZ,EAAMJ,EAAgB,GAAK,KAAM,CACjC,GAAIe,EAAO,GACP,OAAO,KAGX,IAAME,EAAOb,EAAMJ,EAAgB,EAAE,CAAC,EAAE,YAAW,EAC/CiB,GAAQ,MACRH,EAAWE,EAAS,GAChBD,GAAQ,KACRA,EAAO,EACFH,EAAW,UAAU,KAAK,GAC3BA,EAAW,MAAM,MAAOA,EAAW,IAAI,KAAK,EAAI,CAAC,IAKzDK,GAAQ,MACRH,EAAWE,EAAS,GAChBD,GAAQ,KAAIA,GAAQ,KAGvBP,EAAO,MAAM,UAAU,UAAU,IAC9BM,GAAYE,EAAS,IACrBR,EAAO,MAAM,MAAM,WAAYQ,EAAS,EAAE,EAEtCR,EAAO,MAAM,IAAI,MAAM,GAAK,IAC5BA,EAAO,MAAM,OAAO,OAAQ,CAAC,IAGjCA,EAAO,MAAM,MAAM,WAAYQ,EAAS,EAAE,EAEtCR,EAAO,MAAM,IAAI,MAAM,GAAK,IAC5BA,EAAO,MAAM,OAAO,OAAQA,EAAO,MAAM,IAAI,MAAM,EAAI,EAAE,IAMzE,OAAAI,EAAW,OAAO,OAAQG,CAAI,EAC9BH,EAAW,OAAO,SAAUC,CAAM,EAE9BC,GAAY,EACZF,EAAW,OAAO,WAAYE,CAAQ,EAEpBN,EAAO,MAAM,UAAU,UAAU,GAAKA,EAAO,MAAM,IAAI,MAAM,EAAI,GAE3EA,EAAO,MAAM,IAAI,MAAM,EAAI,GAAKO,EAEhCH,EAAW,MAAM,WAAYI,EAAS,EAAE,EACjCD,GAAQ,KACfH,EAAW,OAAO,OAAQG,EAAO,EAAE,EACnCH,EAAW,OAAO,WAAYI,EAAS,EAAE,GAEtCD,EAAO,GACdH,EAAW,MAAM,WAAYI,EAAS,EAAE,EACjCD,GAAQ,IACfH,EAAW,MAAM,WAAYI,EAAS,EAAE,EAI5CJ,EAAW,KAAI,EAAG,QAAO,EAAKJ,EAAO,MAAM,KAAI,EAAG,QAAO,GACzDI,EAAW,MAAM,MAAOA,EAAW,IAAI,KAAK,EAAI,CAAC,EAG9CA,CACX,CAEQ,sCAAsCJ,EAAM,CAYhD,GAVIA,EAAO,KAAK,MAAM,MAAM,GAKxBA,EAAO,KAAK,MAAM,WAAW,GAK7BA,EAAO,KAAK,MAAM,WAAW,EAC7B,OAAO,KAIX,IAAMY,EAAoBZ,EAAO,KAAK,MAAM,oBAAoB,EAChE,GAAIY,EAAmB,CACnB,IAAMC,EAAwBD,EAAkB,CAAC,EAcjD,GAXI,KAAK,YAKLC,EAAc,SAAS,GAAG,GAAK,CAACA,EAAc,MAAM,eAAe,GAK/C,SAASA,CAAa,EACxB,GAClB,OAAO,KAIf,OAAOb,CACX,CAEQ,mCAAmCA,EAAM,CAC7C,GAAIA,EAAO,KAAK,MAAM,WAAW,EAC7B,OAAO,KAIX,IAAMY,EAAoBZ,EAAO,KAAK,MAAM,qCAAqC,EACjF,GAAIY,EAAmB,CAEnB,GAAI,KAAK,WACL,OAAO,KAGX,IAAME,EAA0BF,EAAkB,CAAC,EAC7CC,EAAwBD,EAAkB,CAAC,EAEjD,GAAIC,EAAc,SAAS,GAAG,GAAK,CAACA,EAAc,MAAM,eAAe,EACnE,OAAO,KAIX,IAAME,EAAkB,SAASF,CAAa,EACxCG,EAAoB,SAASF,CAAe,EAClD,GAAIC,EAAkB,IAAMC,EAAoB,GAC5C,OAAO,KAIf,OAAOhB,CACX,CAMA,mCAAiC,CAC7B,IAAMlB,EAAgB,KAAK,cAAa,EAClCC,EAAgB,KAAK,cAAa,EAExC,OAAI,KAAK,sBAAwBD,GAAiB,KAAK,sBAAwBC,EACpE,KAAK,0BAGhB,KAAK,yBAA2BH,GAC5B,KAAK,2BAA0B,EAC/BE,EACAC,EACA,KAAK,aAAY,CAAE,EAEvB,KAAK,oBAAsBD,EAC3B,KAAK,oBAAsBC,EACpB,KAAK,yBAChB,CAMA,qCAAmC,CAC/B,IAAMG,EAAiB,KAAK,eAAc,EACpCC,EAAkB,KAAK,gBAAe,EAE5C,OAAI,KAAK,uBAAyBD,GAAkB,KAAK,wBAA0BC,EACxE,KAAK,2BAGhB,KAAK,0BAA4BF,GAAoBC,EAAgBC,CAAe,EACpF,KAAK,qBAAuBD,EAC5B,KAAK,sBAAwBC,EACtB,KAAK,0BAChB,GC1aJ,IAAqB8B,GAArB,cAAoDC,EAA4B,CAC5E,YAAYC,EAAU,CAClB,MAAMA,CAAU,CACpB,CAEA,gBAAc,CACV,MAAO,iEACX,CAEA,eAAa,CACT,MAAO,uBACX,CAEA,eAAa,CACT,MAAO,sFACX,CAEA,6BAA6BC,EAAyBC,EAAuB,CACzE,IAAMC,EAAa,MAAM,6BAA6BF,EAASC,CAAK,EACpE,GAAIC,EAAY,CACZ,GAAID,EAAM,CAAC,EAAE,SAAS,OAAO,EAAG,CAC5B,IAAME,EAAOD,EAAW,IAAI,MAAM,EAC9BC,GAAQ,GAAKA,EAAO,IACpBD,EAAW,OAAO,OAAQA,EAAW,IAAI,MAAM,EAAI,EAAE,EACrDA,EAAW,OAAO,WAAYE,EAAS,EAAE,GAClCD,EAAO,GACdD,EAAW,OAAO,WAAYE,EAAS,EAAE,EAIjD,GAAIH,EAAM,CAAC,EAAE,SAAS,WAAW,EAAG,CAChCC,EAAW,OAAO,WAAYE,EAAS,EAAE,EACzC,IAAMD,EAAOD,EAAW,IAAI,MAAM,EAC9BC,GAAQ,GAAKA,GAAQ,GACrBD,EAAW,OAAO,OAAQA,EAAW,IAAI,MAAM,EAAI,EAAE,EAIzDD,EAAM,CAAC,EAAE,SAAS,SAAS,IAC3BC,EAAW,OAAO,WAAYE,EAAS,EAAE,EAC5BF,EAAW,IAAI,MAAM,EACvB,IACPA,EAAW,OAAO,OAAQA,EAAW,IAAI,MAAM,CAAC,GAK5D,OAAOA,CACX,GChDE,SAAUG,GAAiBC,EAAoB,CACjD,IAAMC,EAAW,CAAA,EACjB,QAAWC,KAAOF,EAEdC,EAASC,CAAG,EAAI,CAACF,EAAUE,CAAG,EAGlC,OAAOD,CACX,CAEM,SAAUE,GAAoBC,EAA+BJ,EAAoB,CACnF,IAAMK,EAASD,EAAW,MAAK,EAE3BE,EAAOF,EAAW,MAAK,EAC3B,QAAWF,KAAOF,EAEdM,EAAOA,EAAK,IAAIN,EAAUE,CAAG,EAAGA,CAAgB,EAGpD,OAAI,QAASF,GAAa,MAAOA,GAAa,SAAUA,GAAa,UAAWA,GAAa,SAAUA,KACnGK,EAAO,MAAM,MAAOC,EAAK,KAAI,CAAE,EAC/BD,EAAO,MAAM,QAASC,EAAK,MAAK,EAAK,CAAC,EACtCD,EAAO,MAAM,OAAQC,EAAK,KAAI,CAAE,IAGhC,WAAYN,GAAa,WAAYA,GAAa,SAAUA,KAC5DK,EAAO,MAAM,SAAUC,EAAK,OAAM,CAAE,EACpCD,EAAO,MAAM,SAAUC,EAAK,OAAM,CAAE,EACpCD,EAAO,MAAM,OAAQC,EAAK,KAAI,CAAE,GAG7BD,CACX,CC/BA,IAAME,GAAU,IAAI,OAAO,IAAIC,CAAkB,2CAA4C,GAAG,EAC1FC,GAAiB,IAAI,OAAO,IAAIC,EAA0B,2CAA4C,GAAG,EAE1FC,GAArB,cAAuDC,CAAsC,CACzF,YAAoBC,EAAmB,CACnC,MAAK,EADW,KAAA,WAAAA,CAEpB,CAEA,cAAY,CACR,OAAO,KAAK,WAAaJ,GAAiBF,EAC9C,CAEA,aAAaO,EAAyBC,EAAuB,CACzD,IAAMC,EAAYC,EAAeF,EAAM,CAAC,CAAC,EACnCG,EAAkBC,GAAiBH,CAAS,EAElD,OAAOI,EAAkB,4BAA4BN,EAAQ,UAAWI,CAAe,CAC3F,GClBJ,IAAMG,GAAU,IAAI,OAChB,IAAIC,CAAkB,wEACtB,GAAG,EAGDC,GAAiB,IAAI,OACvB,IAAWC,GAA6B,iCACxC,GAAG,EAEDC,GAAsB,EAEPC,GAArB,cAAyDC,CAAsC,CAC3F,YAAoBC,EAAmB,CACnC,MAAK,EADW,KAAA,WAAAA,CAEpB,CAEA,cAAY,CACR,OAAO,KAAK,WAAaL,GAAiBF,EAC9C,CAEA,aAAaQ,EAAyBC,EAAuB,CACzD,IAAMC,EAAYC,EAAeF,EAAML,EAAmB,CAAC,EAC3D,OAAOQ,EAAkB,4BAA4BJ,EAAQ,UAAWE,CAAS,CACrF,GCtBE,IAAgBG,GAAhB,KAAsB,CAGxB,OAAOC,EAAyBC,EAAwB,CACpD,OAAOA,EAAQ,OAAQC,GAAM,KAAK,QAAQF,EAASE,CAAC,CAAC,CACzD,GAMkBC,EAAhB,KAA8B,CAehC,OAAOH,EAAyBC,EAAwB,CACpD,GAAIA,EAAQ,OAAS,EACjB,OAAOA,EAGX,IAAMG,EAAiC,CAAA,EACnCC,EAAYJ,EAAQ,CAAC,EACrBK,EAAa,KAEjB,QAASC,EAAI,EAAGA,EAAIN,EAAQ,OAAQM,IAAK,CACrCD,EAAaL,EAAQM,CAAC,EAEtB,IAAMC,EAAcR,EAAQ,KAAK,UAAUK,EAAU,MAAQA,EAAU,KAAK,OAAQC,EAAW,KAAK,EACpG,GAAI,CAAC,KAAK,mBAAmBE,EAAaH,EAAWC,EAAYN,CAAO,EACpEI,EAAc,KAAKC,CAAS,EAC5BA,EAAYC,MACT,CACH,IAAMG,EAAOJ,EACPK,EAAQJ,EACRK,EAAe,KAAK,aAAaH,EAAaC,EAAMC,EAAOV,CAAO,EACxEA,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,GAAG,KAAK,YAAY,IAAI,WAAWS,CAAI,QAAQC,CAAK,SAASC,CAAY,EAAE,CAC3F,CAAC,EAEDN,EAAYM,GAIpB,OAAIN,GAAa,MACbD,EAAc,KAAKC,CAAS,EAGzBD,CACX,GC1DJ,IAA8BQ,GAA9B,cAAoEC,CAAc,CAG9E,mBAAmBC,EAAaC,EAAeC,EAAU,CACrD,MAAO,CAACD,EAAc,KAAO,CAACC,EAAW,KAAOF,EAAY,MAAM,KAAK,eAAc,CAAE,GAAK,IAChG,CAEA,aAAaA,EAAaG,EAAYC,EAAQ,CAe1C,GAdI,CAACD,EAAW,MAAM,uBAAsB,GAAM,CAACC,EAAS,MAAM,uBAAsB,IACpFA,EAAS,MAAM,qBAAoB,EAAG,QAASC,GAAO,CAC7CF,EAAW,MAAM,UAAUE,CAAG,GAC/BF,EAAW,MAAM,MAAME,EAAKD,EAAS,MAAM,IAAIC,CAAG,CAAC,CAE3D,CAAC,EAEDF,EAAW,MAAM,qBAAoB,EAAG,QAASE,GAAO,CAC/CD,EAAS,MAAM,UAAUC,CAAG,GAC7BD,EAAS,MAAM,MAAMC,EAAKF,EAAW,MAAM,IAAIE,CAAG,CAAC,CAE3D,CAAC,GAGDF,EAAW,MAAM,KAAI,EAAG,QAAO,EAAKC,EAAS,MAAM,KAAI,EAAG,QAAO,EAAI,CACrE,IAAIE,EAAaH,EAAW,MAAM,MAAK,EACnCI,EAAWH,EAAS,MAAM,MAAK,EAC/BA,EAAS,MAAM,uBAAsB,GAAMG,EAAS,IAAI,EAAG,MAAM,EAAE,QAAQD,CAAU,GACrFC,EAAWA,EAAS,IAAI,EAAG,MAAM,EACjCH,EAAS,MAAM,MAAM,MAAOG,EAAS,KAAI,CAAE,EAC3CH,EAAS,MAAM,MAAM,QAASG,EAAS,MAAK,EAAK,CAAC,EAClDH,EAAS,MAAM,MAAM,OAAQG,EAAS,KAAI,CAAE,GACrCJ,EAAW,MAAM,uBAAsB,GAAMG,EAAW,IAAI,GAAI,MAAM,EAAE,SAASC,CAAQ,GAChGD,EAAaA,EAAW,IAAI,GAAI,MAAM,EACtCH,EAAW,MAAM,MAAM,MAAOG,EAAW,KAAI,CAAE,EAC/CH,EAAW,MAAM,MAAM,QAASG,EAAW,MAAK,EAAK,CAAC,EACtDH,EAAW,MAAM,MAAM,OAAQG,EAAW,KAAI,CAAE,GACzCF,EAAS,MAAM,sBAAqB,GAAMG,EAAS,IAAI,EAAG,OAAO,EAAE,QAAQD,CAAU,GAC5FC,EAAWA,EAAS,IAAI,EAAG,OAAO,EAClCH,EAAS,MAAM,MAAM,OAAQG,EAAS,KAAI,CAAE,GACrCJ,EAAW,MAAM,sBAAqB,GAAMG,EAAW,IAAI,GAAI,OAAO,EAAE,SAASC,CAAQ,GAChGD,EAAaA,EAAW,IAAI,GAAI,OAAO,EACvCH,EAAW,MAAM,MAAM,OAAQG,EAAW,KAAI,CAAE,GAEhD,CAACF,EAAUD,CAAU,EAAI,CAACA,EAAYC,CAAQ,EAItD,IAAMI,EAASL,EAAW,MAAK,EAC/B,OAAAK,EAAO,MAAQL,EAAW,MAC1BK,EAAO,IAAMJ,EAAS,MACtBI,EAAO,MAAQ,KAAK,IAAIL,EAAW,MAAOC,EAAS,KAAK,EACpDD,EAAW,MAAQC,EAAS,MAC5BI,EAAO,KAAOL,EAAW,KAAOH,EAAcI,EAAS,KAEvDI,EAAO,KAAOJ,EAAS,KAAOJ,EAAcG,EAAW,KAGpDK,CACX,GCpDJ,IAAqBC,GAArB,cAAqDC,EAA6B,CAC9E,gBAAc,CACV,MAAO,sCACX,GCXE,SAAUC,GAAoBC,EAA2BC,EAAyB,CACpF,IAAMC,EAASF,EAAW,MAAK,EACzBG,EAAYH,EAAW,MACvBI,EAAYH,EAAW,MAG7B,GADAC,EAAO,MAAQG,GAAuBF,EAAWC,CAAS,EACtDJ,EAAW,KAAO,MAAQC,EAAW,KAAO,KAAM,CAClD,IAAMK,EAAUN,EAAW,KAAO,KAAOA,EAAW,MAAQA,EAAW,IACjEO,EAAUN,EAAW,KAAO,KAAOA,EAAW,MAAQA,EAAW,IACjEO,EAAcH,GAAuBC,EAASC,CAAO,EAE3D,GAAIP,EAAW,KAAO,MAAQQ,EAAY,KAAI,EAAG,QAAO,EAAKN,EAAO,MAAM,KAAI,EAAG,QAAO,EAAI,CAGxF,IAAMO,EAAYD,EAAY,MAAK,EAAG,IAAI,EAAG,KAAK,EAC9CA,EAAY,UAAU,KAAK,EAC3BE,EAAkBF,EAAaC,CAAS,EAExCE,GAAiBH,EAAaC,CAAS,EAI/CP,EAAO,IAAMM,EAGjB,OAAON,CACX,CAEM,SAAUG,GACZO,EACAC,EAAgC,CAEhC,IAAMC,EAAoBF,EAAc,MAAK,EAE7C,OAAIC,EAAc,UAAU,MAAM,GAC9BC,EAAkB,OAAO,OAAQD,EAAc,IAAI,MAAM,CAAC,EAC1DC,EAAkB,OAAO,SAAUD,EAAc,IAAI,QAAQ,CAAC,EAE1DA,EAAc,UAAU,QAAQ,GAChCC,EAAkB,OAAO,SAAUD,EAAc,IAAI,QAAQ,CAAC,EAE1DA,EAAc,UAAU,aAAa,EACrCC,EAAkB,OAAO,cAAeD,EAAc,IAAI,aAAa,CAAC,EAExEC,EAAkB,MAAM,cAAeD,EAAc,IAAI,aAAa,CAAC,IAG3EC,EAAkB,MAAM,SAAUD,EAAc,IAAI,QAAQ,CAAC,EAC7DC,EAAkB,MAAM,cAAeD,EAAc,IAAI,aAAa,CAAC,KAG3EC,EAAkB,MAAM,OAAQD,EAAc,IAAI,MAAM,CAAC,EACzDC,EAAkB,MAAM,SAAUD,EAAc,IAAI,QAAQ,CAAC,EAC7DC,EAAkB,MAAM,SAAUD,EAAc,IAAI,QAAQ,CAAC,EAC7DC,EAAkB,MAAM,cAAeD,EAAc,IAAI,aAAa,CAAC,GAGvEA,EAAc,UAAU,gBAAgB,GACxCC,EAAkB,OAAO,iBAAkBD,EAAc,IAAI,gBAAgB,CAAC,EAG9EA,EAAc,UAAU,UAAU,EAClCC,EAAkB,OAAO,WAAYD,EAAc,IAAI,UAAU,CAAC,EAC3DA,EAAc,IAAI,UAAU,GAAK,MAAQC,EAAkB,IAAI,UAAU,GAAK,MACrFA,EAAkB,MAAM,WAAYD,EAAc,IAAI,UAAU,CAAC,EAGjEC,EAAkB,IAAI,UAAU,GAAKC,EAAS,IAAMD,EAAkB,IAAI,MAAM,EAAI,KAChFD,EAAc,UAAU,MAAM,EAC9BC,EAAkB,OAAO,OAAQA,EAAkB,IAAI,MAAM,EAAI,EAAE,EAEnEA,EAAkB,MAAM,OAAQA,EAAkB,IAAI,MAAM,EAAI,EAAE,GAInEA,CACX,CCxEA,IAA8BE,GAA9B,cAAmEC,CAAc,CAG7E,mBAAmBC,EAAqBC,EAA8BC,EAAyB,CAC3F,OACMD,EAAc,MAAM,WAAU,GAAMC,EAAW,MAAM,WAAU,GAC5DA,EAAW,MAAM,WAAU,GAAMD,EAAc,MAAM,WAAU,IACpED,EAAY,MAAM,KAAK,eAAc,CAAE,GAAK,IAEpD,CAEA,aAAaA,EAAqBC,EAA8BC,EAAyB,CACrF,IAAMC,EAASF,EAAc,MAAM,WAAU,EACvCG,GAAoBH,EAAeC,CAAU,EAC7CE,GAAoBF,EAAYD,CAAa,EAEnD,OAAAE,EAAO,MAAQF,EAAc,MAC7BE,EAAO,KAAOF,EAAc,KAAOD,EAAcE,EAAW,KACrDC,CACX,GCnBJ,IAAqBE,GAArB,cAAoDC,EAA4B,CAC5E,gBAAc,CACV,OAAO,IAAI,OAAO,0CAA0C,CAChE,GCLJ,IAAMC,GAAwB,IAAI,OAAO,2CAA4C,GAAG,EAEnEC,GAArB,KAA+C,CAC3C,YAA6BC,EAAmC,CAAnC,KAAA,kBAAAA,CAAsC,CAEnE,OAAOC,EAAyBC,EAAwB,CACpD,IAAMF,EAAoBC,EAAQ,OAAO,WAAa,CAAA,EAEtD,OAAAC,EAAQ,QAASC,GAAU,CACvB,IAAMC,EAASH,EAAQ,KAAK,UAAUE,EAAO,MAAQA,EAAO,KAAK,MAAM,EACjEE,EAAQP,GAAsB,KAAKM,CAAM,EAC/C,GAAI,CAACC,EACD,OAGJ,IAAMC,EAAeD,EAAM,CAAC,EAAE,YAAW,EACnCE,EAAUJ,EAAO,MAAM,KAAI,GAAMA,EAAO,SAAW,IAAI,KACvDK,EAAc,CAAE,GAAG,KAAK,kBAAmB,GAAGR,CAAiB,EAC/DS,EAA0BC,GAAiBJ,EAAcC,EAASC,CAAW,EACnF,GAAIC,GAA2B,KAC3B,OAEJR,EAAQ,MAAM,IAAK,CACf,QAAQ,IACJ,yBAAyBK,CAAY,WAAWG,CAAuB,SAASN,EAAO,KAAK,EAAE,CAEtG,CAAC,EAED,IAAMQ,EAAwBR,EAAO,MAAM,IAAI,gBAAgB,EAC3DQ,IAA0B,MAAQF,GAA2BE,IAIzDR,EAAO,MAAM,UAAU,gBAAgB,GAMvCG,GAAgBD,EAAM,CAAC,IAK3BF,EAAO,MAAM,WAAU,GAGnBG,GAAgBD,EAAM,CAAC,IAK/BF,EAAO,MAAQE,EAAM,CAAC,EAEjBF,EAAO,MAAM,UAAU,gBAAgB,GACxCA,EAAO,MAAM,OAAO,iBAAkBM,CAAuB,EAG7DN,EAAO,KAAO,MAAQ,CAACA,EAAO,IAAI,UAAU,gBAAgB,GAC5DA,EAAO,IAAI,OAAO,iBAAkBM,CAAuB,EAEnE,CAAC,EAEMP,CACX,GCnEJ,IAAMU,GAA0B,IAAI,OAAO,mEAAoE,GAAG,EAC5GC,GAA6B,EAC7BC,GAAoC,EACpCC,GAAsC,EAEvBC,GAArB,KAAiD,CAC7C,OAAOC,EAAyBC,EAAwB,CACpD,OAAAA,EAAQ,QAAQ,SAAUC,EAAM,CAC5B,GAAIA,EAAO,MAAM,UAAU,gBAAgB,EACvC,OAGJ,IAAMC,EAASH,EAAQ,KAAK,UAAUE,EAAO,MAAQA,EAAO,KAAK,MAAM,EACjEE,EAAQT,GAAwB,KAAKQ,CAAM,EACjD,GAAI,CAACC,EACD,OAGJJ,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,yBAAyBI,EAAM,CAAC,CAAC,YAAYF,CAAM,EAAE,CACrE,CAAC,EAED,IAAMG,EAAa,SAASD,EAAMP,EAAiC,CAAC,EAC9DS,EAAe,SAASF,EAAMN,EAAmC,GAAK,GAAG,EAC3ES,EAAiBF,EAAa,GAAKC,EAEnCC,EAAiB,GAAK,KAGtBH,EAAMR,EAA0B,IAAM,MACtCW,EAAiB,CAACA,GAGlBL,EAAO,KAAO,MACdA,EAAO,IAAI,OAAO,iBAAkBK,CAAc,EAGtDL,EAAO,MAAM,OAAO,iBAAkBK,CAAc,EACpDL,EAAO,MAAQE,EAAM,CAAC,EAC1B,CAAC,EAEMH,CACX,GCtCJ,IAAqBO,GAArB,KAA0C,CACtC,OAAOC,EAAyBC,EAAwB,CACpD,GAAIA,EAAQ,OAAS,EACjB,OAAOA,EAGX,IAAMC,EAAkB,CAAA,EAEpBC,EAAaF,EAAQ,CAAC,EAC1B,QAASG,EAAI,EAAGA,EAAIH,EAAQ,OAAQG,IAAK,CACrC,IAAMC,EAASJ,EAAQG,CAAC,EAGpBC,EAAO,MAAQF,EAAW,MAAQA,EAAW,KAAK,OAC9CE,EAAO,KAAK,OAASF,EAAW,KAAK,SACrCA,EAAaE,IAGjBH,EAAgB,KAAKC,CAAU,EAC/BA,EAAaE,GAKrB,OAAIF,GAAc,MACdD,EAAgB,KAAKC,CAAU,EAG5BD,CACX,GC5BJ,IAAAI,GAAkB,WAGlB,IAAqBC,GAArB,KAAuC,CACnC,OAAOC,EAAyBC,EAAwB,CACpD,OAAKD,EAAQ,OAAO,aAIpBC,EAAQ,QAAQ,SAAUC,EAAM,CAC5B,IAAIC,KAAY,GAAAC,SAAMJ,EAAQ,OAAO,EA+CrC,GA7CIE,EAAO,MAAM,WAAU,GAAMC,EAAU,QAAQD,EAAO,MAAM,MAAK,CAAE,IACnEC,EAAYA,EAAU,IAAI,EAAG,KAAK,EAClCE,GAAiBH,EAAO,MAAOC,CAAS,EACpCD,EAAO,KAAOA,EAAO,IAAI,WAAU,IACnCG,GAAiBH,EAAO,IAAKC,CAAS,EAClCD,EAAO,MAAM,MAAK,EAAG,QAAQA,EAAO,IAAI,MAAK,CAAE,IAC/CC,EAAYA,EAAU,IAAI,EAAG,KAAK,EAClCE,GAAiBH,EAAO,IAAKC,CAAS,KAK9CD,EAAO,MAAM,uBAAsB,GAAMC,EAAU,QAAQD,EAAO,MAAM,MAAK,CAAE,IAC3EC,EAAU,IAAG,GAAMD,EAAO,MAAM,IAAI,SAAS,EAC7CC,EAAYA,EAAU,IAAID,EAAO,MAAM,IAAI,SAAS,EAAI,CAAC,EAEzDC,EAAYA,EAAU,IAAYD,EAAO,MAAM,IAAI,SAAS,CAAC,EAGjEA,EAAO,MAAM,MAAM,MAAOC,EAAU,KAAI,CAAE,EAC1CD,EAAO,MAAM,MAAM,QAASC,EAAU,MAAK,EAAK,CAAC,EACjDD,EAAO,MAAM,MAAM,OAAQC,EAAU,KAAI,CAAE,EAC3CH,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,+BAA+BE,CAAM,KAAKA,EAAO,KAAK,GAAG,CACzE,CAAC,EAEGA,EAAO,KAAOA,EAAO,IAAI,uBAAsB,IAE3CC,EAAU,IAAG,EAAKD,EAAO,IAAI,IAAI,SAAS,EAC1CC,EAAYA,EAAU,IAAID,EAAO,IAAI,IAAI,SAAS,EAAI,CAAC,EAEvDC,EAAYA,EAAU,IAAYD,EAAO,IAAI,IAAI,SAAS,CAAC,EAG/DA,EAAO,IAAI,MAAM,MAAOC,EAAU,KAAI,CAAE,EACxCD,EAAO,IAAI,MAAM,QAASC,EAAU,MAAK,EAAK,CAAC,EAC/CD,EAAO,IAAI,MAAM,OAAQC,EAAU,KAAI,CAAE,EACzCH,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,+BAA+BE,CAAM,KAAKA,EAAO,GAAG,GAAG,CACvE,CAAC,IAMLA,EAAO,MAAM,sBAAqB,GAAMC,EAAU,QAAQD,EAAO,MAAM,MAAK,CAAE,EAC9E,QAASI,EAAI,EAAGA,EAAI,GAAKH,EAAU,QAAQD,EAAO,MAAM,MAAK,CAAE,EAAGI,IAC9DJ,EAAO,MAAM,MAAM,OAAQA,EAAO,MAAM,IAAI,MAAM,EAAI,CAAC,EACvDF,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,+BAA+BE,CAAM,KAAKA,EAAO,KAAK,GAAG,CACzE,CAAC,EAEGA,EAAO,KAAO,CAACA,EAAO,IAAI,UAAU,MAAM,IAC1CA,EAAO,IAAI,MAAM,OAAQA,EAAO,IAAI,IAAI,MAAM,EAAI,CAAC,EACnDF,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,+BAA+BE,CAAM,KAAKA,EAAO,GAAG,GAAG,CACvE,CAAC,EAIjB,CAAC,EAEMD,CACX,GChFJ,IAAqBM,GAArB,cAAkDC,EAAM,CACpD,YAAoBC,EAAmB,CACnC,MAAK,EADW,KAAA,WAAAA,CAEpB,CAEA,QAAQC,EAASC,EAAqB,CAClC,OAAIA,EAAO,KAAK,QAAQ,IAAK,EAAE,EAAE,MAAM,eAAe,GAClDD,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,6BAA6BC,EAAO,IAAI,GAAG,CAC3D,CAAC,EAEM,IAGNA,EAAO,MAAM,YAAW,EAQzBA,EAAO,KAAO,CAACA,EAAO,IAAI,YAAW,GACrCD,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,4BAA4BC,CAAM,KAAKA,EAAO,GAAG,GAAG,CACpE,CAAC,EAEM,IAGP,KAAK,WACE,KAAK,kBAAkBD,EAASC,CAAM,EAG1C,IAnBHD,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,4BAA4BC,CAAM,KAAKA,EAAO,KAAK,GAAG,CACtE,CAAC,EAEM,GAgBf,CAEQ,kBAAkBD,EAASC,EAAqB,CACpD,OAAIA,EAAO,MAAM,uBAAsB,GACnCD,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,6CAA6CC,CAAM,KAAKA,EAAO,GAAG,GAAG,CACrF,CAAC,EAEM,IAGPA,EAAO,MAAM,WAAU,IAAO,CAACA,EAAO,MAAM,UAAU,MAAM,GAAK,CAACA,EAAO,MAAM,UAAU,QAAQ,IACjGD,EAAQ,MAAM,IAAK,CACf,QAAQ,IAAI,+CAA+CC,CAAM,KAAKA,EAAO,GAAG,GAAG,CACvF,CAAC,EAEM,IAGJ,EACX,GC7CJ,IAAMC,GAAU,IAAI,OAChB,qJAWA,GAAG,EAGDC,GAAoB,EACpBC,GAAqB,EACrBC,GAAoB,EACpBC,GAAoB,EACpBC,GAAsB,EACtBC,GAAsB,EACtBC,GAA2B,EAC3BC,GAAwB,EACxBC,GAA0B,EAEXC,GAArB,cAA6CC,CAAsC,CAC/E,cAAY,CACR,OAAOX,EACX,CAEA,aAAaY,EAAyBC,EAAuB,CACzD,IAAMC,EAAoD,CAAA,EAK1D,GAJAA,EAAW,KAAU,SAASD,EAAMZ,EAAiB,CAAC,EACtDa,EAAW,MAAW,SAASD,EAAMX,EAAkB,CAAC,EACxDY,EAAW,IAAS,SAASD,EAAMV,EAAiB,CAAC,EAEjDU,EAAMT,EAAiB,GAAK,KAY5B,GAXAU,EAAW,KAAU,SAASD,EAAMT,EAAiB,CAAC,EACtDU,EAAW,OAAY,SAASD,EAAMR,EAAmB,CAAC,EAEtDQ,EAAMP,EAAmB,GAAK,OAC9BQ,EAAW,OAAY,SAASD,EAAMP,EAAmB,CAAC,GAG1DO,EAAMN,EAAwB,GAAK,OACnCO,EAAW,YAAiB,SAASD,EAAMN,EAAwB,CAAC,GAGpEM,EAAML,EAAqB,GAAK,KAChCM,EAAW,eAAoB,MAC5B,CACH,IAAMC,EAAa,SAASF,EAAML,EAAqB,CAAC,EAEpDQ,EAAe,EACfH,EAAMJ,EAAuB,GAAK,OAClCO,EAAe,SAASH,EAAMJ,EAAuB,CAAC,GAG1D,IAAIQ,EAASF,EAAa,GACtBE,EAAS,EACTA,GAAUD,EAEVC,GAAUD,EAGdF,EAAW,eAAoBG,EAIvC,OAAOH,CACX,GCvEJ,IAAqBI,GAArB,cAA0DC,CAAc,CACpE,aAAaC,EAAqBC,EAA8BC,EAAyB,CACrF,IAAMC,EAAYD,EAAW,MAAK,EAClC,OAAAC,EAAU,MAAQF,EAAc,MAChCE,EAAU,KAAOF,EAAc,KAAOD,EAAcG,EAAU,KAE9DA,EAAU,MAAM,OAAO,UAAWF,EAAc,MAAM,IAAI,SAAS,CAAC,EAChEE,EAAU,KACVA,EAAU,IAAI,OAAO,UAAWF,EAAc,MAAM,IAAI,SAAS,CAAC,EAG/DE,CACX,CAEA,mBAAmBH,EAAqBC,EAA8BC,EAAyB,CAK3F,OAHID,EAAc,MAAM,uBAAsB,GAC1C,CAACA,EAAc,MAAM,UAAU,MAAM,GACrCC,EAAW,MAAM,UAAU,KAAK,GACJF,EAAY,MAAM,SAAS,GAAK,IACpE,GCtBE,SAAUI,GAA2BC,EAA8BC,EAAa,GAAK,CACvF,OAAAD,EAAc,QAAQ,QAAQ,IAAIE,EAAiB,EAEnDF,EAAc,SAAS,QAAQ,IAAIG,EAA8B,EACjEH,EAAc,SAAS,QAAQ,IAAII,EAA8B,EACjEJ,EAAc,SAAS,QAAQ,IAAIK,EAAuB,EAI1DL,EAAc,SAAS,KAAK,IAAIM,EAA4B,EAC5DN,EAAc,SAAS,KAAK,IAAIK,EAAuB,EACvDL,EAAc,SAAS,KAAK,IAAIO,EAAoB,EACpDP,EAAc,SAAS,KAAK,IAAIQ,GAAqBP,CAAU,CAAC,EACzDD,CACX,CCtBA,IAAAS,GAAkB,WCDlB,IAAAC,GAAkB,WAUZ,SAAUC,GAAIC,EAAgC,CAChD,IAAMC,KAAa,GAAAC,SAAMF,EAAU,OAAO,EACpCG,EAAY,IAAIC,EAAkBJ,EAAW,CAAA,CAAE,EACrD,OAAAK,EAAkBF,EAAWF,CAAU,EACvCK,GAAkBH,EAAWF,CAAU,EACnCD,EAAU,iBAAmB,MAC7BG,EAAU,OAAO,iBAAkBF,EAAW,UAAS,CAAE,EAEtDE,CACX,CAEM,SAAUI,GAAMP,EAAgC,CAClD,IAAMC,KAAa,GAAAC,SAAMF,EAAU,OAAO,EACpCG,EAAY,IAAIC,EAAkBJ,EAAW,CAAA,CAAE,EACrD,OAAAK,EAAkBF,EAAWF,CAAU,EACvCO,GAAiBL,EAAWF,CAAU,EAC/BE,CACX,CAKM,SAAUM,GAAUT,EAAgC,CACtD,OAAOU,GAAaV,EAAW,CAAC,CACpC,CAEM,SAAUU,GAAaV,EAAkCW,EAAc,CACzE,OAAOC,GAAYZ,EAAW,CAACW,CAAM,CACzC,CAKM,SAAUE,GAASb,EAAgC,CACrD,OAAOY,GAAYZ,EAAW,CAAC,CACnC,CAEM,SAAUY,GAAYZ,EAAkCc,EAAa,CACvE,IAAIb,KAAa,GAAAC,SAAMF,EAAU,OAAO,EAClCG,EAAY,IAAIC,EAAkBJ,EAAW,CAAA,CAAE,EACrD,OAAAC,EAAaA,EAAW,IAAIa,EAAO,KAAK,EACxCT,EAAkBF,EAAWF,CAAU,EACvCO,GAAiBL,EAAWF,CAAU,EAC/BE,CACX,CAEM,SAAUY,GAAQf,EAAkCgB,EAAY,GAAE,CACpE,IAAMf,KAAa,GAAAC,SAAMF,EAAU,OAAO,EACpCG,EAAY,IAAIC,EAAkBJ,EAAW,CAAA,CAAE,EACrD,OAAAG,EAAU,MAAM,OAAQa,CAAS,EACjCb,EAAU,MAAM,WAAYc,EAAS,EAAE,EACvCZ,EAAkBF,EAAWF,CAAU,EAChCE,CACX,CAaM,SAAUe,GAAQC,EAAkCC,EAAY,GAAE,CACpE,IAAMC,EAAY,IAAIC,EAAkBH,EAAW,CAAA,CAAE,EACrD,OAAAE,EAAU,MAAM,WAAYE,EAAS,EAAE,EACvCF,EAAU,MAAM,OAAQD,CAAS,EAC1BC,CACX,CAYM,SAAUG,GAASC,EAAgC,CACrD,IAAMC,EAAY,IAAIC,EAAkBF,EAAW,CAAA,CAAE,EAC/CG,KAAa,GAAAC,SAAMJ,EAAU,OAAO,EAC1C,OAAIG,EAAW,KAAI,EAAK,GAGpBE,GAAgBJ,EAAWE,CAAU,EAEzCF,EAAU,OAAO,OAAQ,CAAC,EAC1BA,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,cAAe,CAAC,EACzBA,CACX,CAEM,SAAUK,GAAQN,EAAkCO,EAAY,EAAC,CACnE,IAAMN,EAAY,IAAIC,EAAkBF,EAAW,CAAA,CAAE,EACrD,OAAAC,EAAU,MAAM,WAAYO,EAAS,EAAE,EACvCP,EAAU,MAAM,OAAQM,CAAS,EACjCN,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,cAAe,CAAC,EACzBA,CACX,CAEM,SAAUQ,GAAUT,EAAkCO,EAAY,GAAE,CACtE,IAAMN,EAAY,IAAIC,EAAkBF,EAAW,CAAA,CAAE,EACrD,OAAAC,EAAU,MAAM,WAAYO,EAAS,EAAE,EACvCP,EAAU,MAAM,OAAQM,CAAS,EACjCN,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,cAAe,CAAC,EACzBA,CACX,CAEM,SAAUS,GAAKV,EAAgC,CACjD,IAAMC,EAAY,IAAIC,EAAkBF,EAAW,CAAA,CAAE,EACrD,OAAAC,EAAU,MAAM,WAAYO,EAAS,EAAE,EACvCP,EAAU,MAAM,OAAQ,EAAE,EAC1BA,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,SAAU,CAAC,EAC3BA,EAAU,MAAM,cAAe,CAAC,EACzBA,CACX,CDlIA,IAAMU,GAAU,wEAEKC,GAArB,cAAgDC,CAAsC,CAClF,aAAaC,EAAuB,CAChC,OAAOH,EACX,CAEA,aAAaG,EAAyBC,EAAuB,CACzD,IAAIC,KAAa,GAAAC,SAAMH,EAAQ,OAAO,EAChCI,EAAYH,EAAM,CAAC,EAAE,YAAW,EAChCI,EAAYL,EAAQ,wBAAuB,EAEjD,OAAQI,EAAW,CACf,IAAK,MACD,OAAkBE,GAAIN,EAAQ,SAAS,EAE3C,IAAK,QACD,OAAkBO,GAAMP,EAAQ,SAAS,EAE7C,IAAK,YACD,OAAkBQ,GAAUR,EAAQ,SAAS,EAEjD,IAAK,WACL,IAAK,MACL,IAAK,OACD,OAAkBS,GAAST,EAAQ,SAAS,EAEhD,IAAK,UACD,OAAkBU,GAAQV,EAAQ,SAAS,EAE/C,QACQI,EAAU,MAAM,cAAc,IAC1BF,EAAW,KAAI,EAAK,IACpBA,EAAaA,EAAW,IAAI,GAAI,KAAK,GAGzCS,EAAkBN,EAAWH,CAAU,EACvCG,EAAU,MAAM,OAAQ,CAAC,GAE7B,MAGR,OAAOA,CACX,GE9CJ,IAAMO,GAAU,kFAEKC,GAArB,cAAgDC,CAAsC,CAClF,cAAY,CACR,OAAOF,EACX,CACA,aAAaG,EAAyBC,EAAuB,CACzD,OAAQA,EAAM,CAAC,EAAE,YAAW,EAAI,CAC5B,IAAK,YACD,OAAwBC,GAAUF,EAAQ,SAAS,EACvD,IAAK,UACL,IAAK,QACD,OAAwBG,GAAQH,EAAQ,SAAS,EACrD,IAAK,WACD,OAAwBI,GAASJ,EAAQ,SAAS,EACtD,IAAK,UACD,OAAwBK,GAAQL,EAAQ,SAAS,EACrD,IAAK,OACL,IAAK,SACD,OAAwBM,GAAKN,EAAQ,SAAS,EAEtD,OAAO,IACX,GCfE,SAAUO,GACZC,EACAC,EACAC,EAAmC,CAEnC,IAAMC,EAAUH,EAAU,4BAA2B,EAC/CI,EAAgBC,GAAiBF,EAASF,EAASC,CAAQ,EAE7DI,EAAa,IAAIC,EAAkBP,CAAS,EAChD,OAAAM,EAAaE,GAAoBF,EAAY,CAAE,IAAOF,CAAa,CAAE,EACrEE,EAAW,OAAO,UAAWL,CAAO,EAE7BK,CACX,CAQM,SAAUD,GAAiBF,EAAeF,EAAkBC,EAAmC,CACjG,IAAMO,EAAaN,EAAQ,OAAM,EACjC,OAAQD,EAAU,CACd,IAAK,OACD,OAAOQ,GAAwBP,EAASF,CAAO,EACnD,IAAK,OACD,OAAOU,GAAyBR,EAASF,CAAO,EACpD,IAAK,OAGD,OAAIQ,GAAcG,EAAQ,OACfX,GAAWW,EAAQ,OAAS,EAAIX,EAKvCQ,GAAcG,EAAQ,SAClBX,GAAWW,EAAQ,SAAiB,EACpCX,GAAWW,EAAQ,OAAe,EAC/B,EAAIX,EAKXA,EAAUQ,GAAcR,GAAWW,EAAQ,OACpCF,GAAwBP,EAASF,CAAO,EAExCS,GAAwBP,EAASF,CAAO,EAAI,EAG/D,OAAOY,GAAwBV,EAASF,CAAO,CACnD,CAEM,SAAUY,GAAwBV,EAAeF,EAAgB,CACnE,IAAMa,EAAWH,GAAyBR,EAASF,CAAO,EACpDc,EAAUL,GAAwBP,EAASF,CAAO,EAExD,OAAOc,EAAU,CAACD,EAAWC,EAAUD,CAC3C,CAEM,SAAUJ,GAAwBP,EAAeF,EAAgB,CACnE,IAAMQ,EAAaN,EAAQ,OAAM,EAC7Ba,EAAef,EAAUQ,EAC7B,OAAIO,EAAe,IACfA,GAAgB,GAEbA,CACX,CAEM,SAAUL,GAAyBR,EAAeF,EAAgB,CACpE,IAAMQ,EAAaN,EAAQ,OAAM,EAC7Bc,EAAgBhB,EAAUQ,EAC9B,OAAIQ,GAAiB,IACjBA,GAAiB,GAEdA,CACX,CCjFA,IAAMC,GAAU,IAAI,OAChB,2EAGQC,EAAgBC,EAAkB,CAAC,gFAI3C,GAAG,EAGDC,GAAe,EACfC,GAAgB,EAChBC,GAAgB,EAEDC,GAArB,cAA6CC,CAAsC,CAC/E,cAAY,CACR,OAAOP,EACX,CAEA,aAAaQ,EAAyBC,EAAuB,CACzD,IAAMC,EAAYD,EAAML,EAAa,EAAE,YAAW,EAC5CO,EAAUT,GAAmBQ,CAAS,EACtCE,EAASH,EAAMN,EAAY,EAC3BU,EAAUJ,EAAMJ,EAAa,EAC/BS,EAAeF,GAAUC,EAC7BC,EAAeA,GAAgB,GAC/BA,EAAeA,EAAa,YAAW,EAEvC,IAAIC,EAAW,KACf,OAAID,GAAgB,QAAUA,GAAgB,OAC1CC,EAAW,OACJD,GAAgB,OACvBC,EAAW,OACJD,GAAgB,SACvBC,EAAW,QAGRC,GAAiCR,EAAQ,UAAWG,EAASI,CAAQ,CAChF,GC3CJ,IAAAE,GAAkB,WAIlB,IAAMC,GAAU,IAAI,OAChB,2CAA2CC,EAAgBC,EAAoB,CAAC,qBAChF,GAAG,EAGDC,GAAsB,EACtBC,GAAsB,EAEPC,GAArB,cAAwDC,CAAsC,CAC1F,cAAY,CACR,OAAON,EACX,CAEA,aAAaO,EAAyBC,EAAuB,CACzD,IAAMC,EAAWD,EAAML,EAAmB,EAAE,YAAW,EACjDO,EAAWF,EAAMJ,EAAmB,EAAE,YAAW,EACjDO,EAAWT,GAAqBQ,CAAQ,EAE9C,GAAID,GAAY,QAAUA,EAAS,WAAW,OAAO,EAAG,CACpD,IAAMG,EAAY,CAAA,EAClB,OAAAA,EAAUD,CAAQ,EAAI,EACfE,EAAkB,4BAA4BN,EAAQ,UAAWK,CAAS,EAGrF,GAAIH,GAAY,QAAUA,GAAY,OAAQ,CAC1C,IAAMG,EAAY,CAAA,EAClB,OAAAA,EAAUD,CAAQ,EAAI,GACfE,EAAkB,4BAA4BN,EAAQ,UAAWK,CAAS,EAGrF,IAAME,EAAaP,EAAQ,wBAAuB,EAC9CQ,KAAO,GAAAC,SAAMT,EAAQ,UAAU,OAAO,EAG1C,OAAIG,EAAS,MAAM,OAAO,GACtBK,EAAOA,EAAK,IAAI,CAACA,EAAK,IAAI,GAAG,EAAG,GAAG,EACnCD,EAAW,MAAM,MAAOC,EAAK,KAAI,CAAE,EACnCD,EAAW,MAAM,QAASC,EAAK,MAAK,EAAK,CAAC,EAC1CD,EAAW,MAAM,OAAQC,EAAK,KAAI,CAAE,GAI/BL,EAAS,MAAM,QAAQ,GAC5BK,EAAOA,EAAK,IAAI,CAACA,EAAK,KAAI,EAAK,EAAG,GAAG,EACrCD,EAAW,MAAM,MAAOC,EAAK,KAAI,CAAE,EACnCD,EAAW,OAAO,OAAQC,EAAK,KAAI,CAAE,EACrCD,EAAW,OAAO,QAASC,EAAK,MAAK,EAAK,CAAC,GAItCL,EAAS,MAAM,OAAO,IAC3BK,EAAOA,EAAK,IAAI,CAACA,EAAK,KAAI,EAAK,EAAG,GAAG,EACrCA,EAAOA,EAAK,IAAI,CAACA,EAAK,MAAK,EAAI,OAAO,EAEtCD,EAAW,MAAM,MAAOC,EAAK,KAAI,CAAE,EACnCD,EAAW,MAAM,QAASC,EAAK,MAAK,EAAK,CAAC,EAC1CD,EAAW,OAAO,OAAQC,EAAK,KAAI,CAAE,GAGlCD,CACX,GCrBE,IAAOG,GAAP,MAAOC,CAAM,CAIf,YAAYC,EAA6B,CACrCA,EAAgBA,GAAiBC,GAAyB,EAC1D,KAAK,QAAU,CAAC,GAAGD,EAAc,OAAO,EACxC,KAAK,SAAW,CAAC,GAAGA,EAAc,QAAQ,CAC9C,CAKA,OAAK,CACD,OAAO,IAAID,EAAO,CACd,QAAS,CAAC,GAAG,KAAK,OAAO,EACzB,SAAU,CAAC,GAAG,KAAK,QAAQ,EAC9B,CACL,CAMA,UAAUG,EAAcC,EAAyCC,EAAsB,CACnF,IAAMC,EAAU,KAAK,MAAMH,EAAMC,EAAeC,CAAM,EACtD,OAAOC,EAAQ,OAAS,EAAIA,EAAQ,CAAC,EAAE,MAAM,KAAI,EAAK,IAC1D,CAEA,MAAMH,EAAcC,EAAyCC,EAAsB,CAC/E,IAAME,EAAU,IAAIC,GAAeL,EAAMC,EAAeC,CAAM,EAE1DC,EAAU,CAAA,EACd,YAAK,QAAQ,QAASG,GAAU,CAC5B,IAAMC,EAAgBV,EAAO,cAAcO,EAASE,CAAM,EAC1DH,EAAUA,EAAQ,OAAOI,CAAa,CAC1C,CAAC,EAEDJ,EAAQ,KAAK,CAACK,EAAGC,IACND,EAAE,MAAQC,EAAE,KACtB,EAED,KAAK,SAAS,QAAQ,SAAUC,EAAO,CACnCP,EAAUO,EAAQ,OAAON,EAASD,CAAO,CAC7C,CAAC,EAEMA,CACX,CAEQ,OAAO,cAAcC,EAAyBE,EAAc,CAChE,IAAMH,EAAU,CAAA,EACVQ,EAAUL,EAAO,QAAQF,CAAO,EAEhCQ,EAAeR,EAAQ,KACzBS,EAAgBT,EAAQ,KACxBU,EAAQH,EAAQ,KAAKE,CAAa,EAEtC,KAAOC,GAAO,CAEV,IAAMC,EAAQD,EAAM,MAAQF,EAAa,OAASC,EAAc,OAChEC,EAAM,MAAQC,EAEd,IAAMC,EAASV,EAAO,QAAQF,EAASU,CAAK,EAC5C,GAAI,CAACE,EAAQ,CAETH,EAAgBD,EAAa,UAAUE,EAAM,MAAQ,CAAC,EACtDA,EAAQH,EAAQ,KAAKE,CAAa,EAClC,SAGJ,IAAII,EAA8B,KAC9BD,aAAkBE,GAClBD,EAAeD,EACRA,aAAkBG,GACzBF,EAAeb,EAAQ,oBAAoBU,EAAM,MAAOA,EAAM,CAAC,CAAC,EAChEG,EAAa,MAAQD,GAErBC,EAAeb,EAAQ,oBAAoBU,EAAM,MAAOA,EAAM,CAAC,EAAGE,CAAM,EAG5EZ,EAAQ,MAAM,IAAM,QAAQ,IAAI,GAAGE,EAAO,YAAY,IAAI,qBAAqBW,CAAY,EAAE,CAAC,EAE9Fd,EAAQ,KAAKc,CAAY,EACzBJ,EAAgBD,EAAa,UAAUG,EAAQE,EAAa,KAAK,MAAM,EACvEH,EAAQH,EAAQ,KAAKE,CAAa,EAGtC,OAAOV,CACX,GAGSE,GAAP,KAAqB,CAUvB,YAAYL,EAAcoB,EAAmClB,EAAsB,CAC/E,KAAK,KAAOF,EACZ,KAAK,UAAY,IAAIqB,GAAsBD,CAAO,EAClD,KAAK,OAASlB,GAAU,CAAA,EAExB,KAAK,QAAU,KAAK,UAAU,OAClC,CAEA,wBAAwBoB,EAA8D,CAClF,OAAIA,aAAsBH,EACfG,EAGJ,IAAIH,EAAkB,KAAK,UAAWG,CAAU,CAC3D,CAEA,oBACIP,EACAQ,EACAC,EACAC,EAAiE,CAEjE,IAAMzB,EAAO,OAAOuB,GAAmB,SAAWA,EAAiB,KAAK,KAAK,UAAUR,EAAOQ,CAAc,EAEtGG,EAAQF,EAAkB,KAAK,wBAAwBA,CAAe,EAAI,KAC1EG,EAAMF,EAAgB,KAAK,wBAAwBA,CAAa,EAAI,KAE1E,OAAO,IAAIP,GAAc,KAAK,UAAWH,EAAOf,EAAM0B,EAAOC,CAAG,CACpE,CAEA,MAAMC,EAAsB,CACpB,KAAK,OAAO,QACR,KAAK,OAAO,iBAAiB,SAC7B,KAAK,OAAO,MAAMA,CAAK,EAEqB,KAAK,OAAO,MAChD,MAAMA,CAAK,EAG/B,GC/KJ,IAAMC,GAAU,IAAI,OAChB,0GAIA,GAAG,EAGDC,GAAgB,EAChBC,GAAe,EAEfC,GAAsB,EACtBC,GAAuB,EAEvBC,GAAa,EAEEC,GAArB,KAA0C,CAItC,YAAYC,EAAqB,CAC7B,KAAK,iBAAmBA,EAAeH,GAAuBD,GAC9D,KAAK,eAAiBI,EAAeJ,GAAsBC,EAC/D,CAEA,SAAO,CACH,OAAOJ,EACX,CAEA,QAAQQ,EAAyBC,EAAuB,CAGpD,GAAIA,EAAMR,EAAa,EAAE,QAAU,GAAKQ,EAAM,MAAQ,GAAKA,EAAM,MAAQD,EAAQ,KAAK,OAAQ,CAC1F,IAAME,EAAeF,EAAQ,KAAKC,EAAM,MAAQ,CAAC,EACjD,GAAIC,GAAgB,KAAOA,GAAgB,IACvC,OAIR,IAAMC,EAAQF,EAAM,MAAQA,EAAMR,EAAa,EAAE,OAC3CW,EAAOH,EAAM,CAAC,EAAE,OAClBA,EAAMR,EAAa,EAAE,OACrBQ,EAAM,CAAC,EAAE,OAASA,EAAMR,EAAa,EAAE,OAASQ,EAAMP,EAAY,EAAE,MAAM,EAU9E,GANIU,EAAK,MAAM,UAAU,GAAKA,EAAK,MAAM,2BAA2B,GAMhE,CAACH,EAAMJ,EAAU,GAAKI,EAAM,CAAC,EAAE,QAAQ,GAAG,EAAI,EAC9C,OAGJ,IAAMI,EAASL,EAAQ,oBAAoBG,EAAOC,CAAI,EAClDE,EAAQ,SAASL,EAAM,KAAK,gBAAgB,CAAC,EAC7CM,EAAM,SAASN,EAAM,KAAK,cAAc,CAAC,EAE7C,IAAIK,EAAQ,GAAKA,EAAQ,KACjBA,EAAQ,GACR,GAAIC,GAAO,GAAKA,GAAO,IAAMD,GAAS,GAClC,CAACC,EAAKD,CAAK,EAAI,CAACA,EAAOC,CAAG,MAE1B,QAAO,KAKnB,GAAIA,EAAM,GAAKA,EAAM,GACjB,OAAO,KAMX,GAHAF,EAAO,MAAM,OAAO,MAAOE,CAAG,EAC9BF,EAAO,MAAM,OAAO,QAASC,CAAK,EAE9BL,EAAMJ,EAAU,EAAG,CACnB,IAAMW,EAAgB,SAASP,EAAMJ,EAAU,CAAC,EAC1CY,EAAOC,GAAqBF,CAAa,EAC/CH,EAAO,MAAM,OAAO,OAAQI,CAAI,MAC7B,CACH,IAAMA,EAAOE,GAAqBX,EAAQ,QAASO,EAAKD,CAAK,EAC7DD,EAAO,MAAM,MAAM,OAAQI,CAAI,EAGnC,OAAOJ,CACX,GC5FJ,IAAMO,GAAU,IAAI,OAAO,yCAAyCC,CAAkB,aAAc,GAAG,EACjGC,GAAkB,IAAI,OACxB,yCAAyCC,EAA0B,aACnE,GAAG,EAGcC,GAArB,cAAkEC,CAAsC,CACpG,YAAoBC,EAA8B,GAAI,CAClD,MAAK,EADW,KAAA,mBAAAA,CAEpB,CAEA,cAAY,CACR,OAAO,KAAK,mBAAqBN,GAAUE,EAC/C,CAEA,aAAaK,EAAyBC,EAAuB,CACzD,IAAMC,EAASD,EAAM,CAAC,EAAE,YAAW,EAC/BE,EAAYC,EAAeH,EAAM,CAAC,CAAC,EACvC,OAAQC,EAAQ,CACZ,IAAK,OACL,IAAK,OACL,IAAK,IACDC,EAAYE,GAAiBF,CAAS,EACtC,MAGR,OAAOG,EAAkB,4BAA4BN,EAAQ,UAAWG,CAAS,CACrF,GC5BJ,SAASI,GAA+BC,EAAqB,CACzD,OAAOA,EAAO,KAAK,MAAM,oBAAoB,GAAK,IACtD,CAEA,SAASC,GAA6BD,EAAqB,CACvD,OAAOA,EAAO,KAAK,MAAM,oBAAoB,GAAK,IACtD,CAOA,IAAqBE,GAArB,cAAwDC,CAAc,CAClE,gBAAc,CACV,MAAO,QACX,CAEA,mBAAmBC,EAAqBC,EAA8BC,EAAyB,CAQ3F,MANI,CAACF,EAAY,MAAM,KAAK,eAAc,CAAE,GAMxC,CAACL,GAA+BM,CAAa,GAAK,CAACJ,GAA6BI,CAAa,EACtF,GAIJ,CAAC,CAACC,EAAW,MAAM,IAAI,KAAK,GAAK,CAAC,CAACA,EAAW,MAAM,IAAI,OAAO,GAAK,CAAC,CAACA,EAAW,MAAM,IAAI,MAAM,CAC5G,CAEA,aAAaF,EAAqBC,EAA8BC,EAAyB,CACrF,IAAIC,EAAYC,EAAeH,EAAc,IAAI,EAC7CN,GAA+BM,CAAa,IAC5CE,EAAYE,GAAiBF,CAAS,GAG1C,IAAMG,EAAaC,EAAkB,4BACjC,IAAIC,GAAsBN,EAAW,MAAM,KAAI,CAAE,EACjDC,CAAS,EAGb,OAAO,IAAIM,GACPP,EAAW,UACXD,EAAc,MACd,GAAGA,EAAc,IAAI,GAAGD,CAAW,GAAGE,EAAW,IAAI,GACrDI,CAAU,CAElB,GCvBG,IAAMI,GAAS,IAAIC,GAAOC,GAA0B,EAAK,CAAC,EAKpDC,GAAS,IAAIF,GAAOG,GAAoB,GAAM,EAAK,CAAC,EAKpDC,GAAK,IAAIJ,GAAOG,GAAoB,GAAO,EAAI,CAAC,EAoBvD,SAAUE,GAA0BC,EAAe,GAAK,CAC1D,IAAMC,EAASC,GAAoB,GAAOF,CAAY,EACtD,OAAAC,EAAO,QAAQ,QAAQ,IAAIE,EAAoB,EAC/CF,EAAO,QAAQ,QAAQ,IAAIG,EAAoB,EAC/CH,EAAO,QAAQ,QAAQ,IAAII,EAAmB,EAC9CJ,EAAO,QAAQ,QAAQ,IAAIK,EAA4B,EACvDL,EAAO,QAAQ,QAAQ,IAAIM,EAAsC,EAC1DN,CACX,CAQM,SAAUC,GAAoBM,EAAa,GAAMR,EAAe,GAAK,CACvE,OAAOS,GACH,CACI,QAAS,CACL,IAAIC,GAAsBV,CAAY,EACtC,IAAIW,GAA6BH,CAAU,EAC3C,IAAII,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GACJ,IAAIC,GAAuBT,CAAU,EACrC,IAAIU,GAA0BV,CAAU,EACxC,IAAIW,GAA4BX,CAAU,GAE9C,SAAU,CAAC,IAAIY,GAA8B,IAAIC,GAA0B,IAAIC,EAAyB,GAE5Gd,CAAU,CAElB,CC4BA,IAAYe,GAAZ,SAAYA,EAAQ,CAChBA,EAAAA,EAAA,GAAA,CAAA,EAAA,KACAA,EAAAA,EAAA,GAAA,CAAA,EAAA,IACJ,GAHYA,IAAAA,EAAQ,CAAA,EAAA,EAKpB,IAAYC,GAAZ,SAAYA,EAAO,CACfA,EAAAA,EAAA,OAAA,CAAA,EAAA,SACAA,EAAAA,EAAA,OAAA,CAAA,EAAA,SACAA,EAAAA,EAAA,QAAA,CAAA,EAAA,UACAA,EAAAA,EAAA,UAAA,CAAA,EAAA,YACAA,EAAAA,EAAA,SAAA,CAAA,EAAA,WACAA,EAAAA,EAAA,OAAA,CAAA,EAAA,SACAA,EAAAA,EAAA,SAAA,CAAA,EAAA,UACJ,GARYA,IAAAA,EAAO,CAAA,EAAA,EAUnB,IAAYC,GAAZ,SAAYA,EAAK,CACbA,EAAAA,EAAA,QAAA,CAAA,EAAA,UACAA,EAAAA,EAAA,SAAA,CAAA,EAAA,WACAA,EAAAA,EAAA,MAAA,CAAA,EAAA,QACAA,EAAAA,EAAA,MAAA,CAAA,EAAA,QACAA,EAAAA,EAAA,IAAA,CAAA,EAAA,MACAA,EAAAA,EAAA,KAAA,CAAA,EAAA,OACAA,EAAAA,EAAA,KAAA,CAAA,EAAA,OACAA,EAAAA,EAAA,OAAA,CAAA,EAAA,SACAA,EAAAA,EAAA,UAAA,CAAA,EAAA,YACAA,EAAAA,EAAA,QAAA,EAAA,EAAA,UACAA,EAAAA,EAAA,SAAA,EAAA,EAAA,WACAA,EAAAA,EAAA,SAAA,EAAA,EAAA,UACJ,GAbYA,IAAAA,EAAK,CAAA,EAAA,EAkCV,IAAMC,GAAYA,GAKnB,SAAUC,GAAMC,EAAcC,EAA+BC,EAAsB,CACrF,OAAOJ,GAAO,MAAME,EAAMC,EAAKC,CAAM,CACzC,C5CpLA,IAAAC,GAAkC,iB6CAlC,IAAIC,GAAgB,KAIdC,GAAc,CAAA,EAIdC,GAAwB,CAAA,EAEvB,SAASC,IAAmB,CACjC,OAAOH,EACR,CAEM,SAASI,GAAiBC,EAAQ,CACvCL,GAAgBK,CACjB,CAMM,SAASC,GAAcD,EAAQ,CACrC,OAAOJ,GAAYI,CAAD,CAClB,CAOM,SAASE,GAAcC,EAAY,CACxC,GAAI,CAACA,EACH,MAAM,IAAIC,MAAM,uBAAV,EAIRR,GAAYO,EAAWH,MAAZ,EAAsBG,EACjCN,GAAsBM,EAAWH,OAAOK,YAAlB,CAAD,EAAoCF,EAAWH,MACrE,CAQM,SAASM,GAAcN,EAAQ,CACrC,GAAIJ,GAAYI,CAAD,EACd,OAAOA,EAER,GAAIH,GAAsBG,EAAOK,YAAP,CAAD,EACxB,OAAOR,GAAsBG,EAAOK,YAAP,CAAD,CAE7B,CCxCc,SAAfE,GAAsCC,EAAsB,CAAA,IAAdC,EAAc,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAJ,CAAA,EAChDC,EAAgBD,EAAQC,eAAiB,SAC/C,OAAQA,EAAR,CACE,IAAK,SACH,OAAOC,GAAoBH,CAAD,EAG5B,IAAK,WAEH,OAAOG,GAAoBH,CAAD,EAC5B,QACE,MAAM,IAAII,WAAJ,mCAAA,OAAkDF,CAAlD,CAAA,CATV,CAWD,CAgBM,SAASC,GAAoBH,EAAQ,CAC1C,IAAMK,EAAiBC,GAAqBN,CAAD,EAC3C,GAAIK,EACF,OAAOA,EAIT,QADME,EAAQP,EAAOQ,MAAM,GAAb,EACPR,EAAOS,OAAS,GAAG,CACxBF,EAAMG,IAAN,EACAV,EAASO,EAAMI,KAAK,GAAX,EACT,IAAMN,EAAiBC,GAAqBN,CAAD,EAC3C,GAAIK,EACF,OAAOA,CAEV,CACF,CClDD,IAAIO,EAAI,CACPC,GAAI,SAACC,EAAD,CAAA,OAAOA,GAAK,EAAI,MAAQ,OAAxB,EACJC,GAAI,SAACD,EAAD,CAAA,OAAOA,GAAK,GAAKA,GAAK,EAAI,MAAQ,OAAlC,EACJE,GAAI,SAACF,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGQ,EAAOF,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EACrE,OAAOT,GAAK,EAAI,OACbA,GAAK,EAAI,MACTA,GAAK,EAAI,MACRQ,GAAQ,GAAKA,GAAQ,GAAM,MAC3BA,GAAQ,IAAMA,GAAQ,GAAM,OAC7B,OACH,EACDE,IAAK,SAACV,EAAM,CACX,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBM,EAAK,CAACR,EAAE,CAAD,EACvC,OAAOH,GAAK,GAAKW,EAAK,MAAQ,OAC9B,EACDC,GAAI,SAACZ,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGa,EAAMP,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EAAgBD,EAAOF,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EACjG,OAAOI,GAAO,GAAKL,GAAQ,GAAK,MAC5BK,GAAO,GAAKA,GAAO,IAAOL,EAAO,IAAMA,EAAO,IAAM,MACrDF,GAAMO,GAAO,GAAMA,GAAO,GAAKA,GAAO,GAAOL,GAAQ,IAAMA,GAAQ,GAAM,OACzE,OACH,EACDM,GAAI,SAACd,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGa,EAAMP,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EAAgBD,EAAOF,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EAAgBM,EAAWT,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EAClI,OAAOI,GAAO,GAAKL,GAAQ,IAAMA,GAAQ,IAAMA,GAAQ,GAAK,MACzDK,GAAO,GAAKL,GAAQ,IAAMA,GAAQ,IAAMA,GAAQ,GAAK,OACnDK,GAAO,GAAKA,GAAO,GAAMA,GAAO,KAAOL,EAAO,IAAMA,EAAO,MAAQA,EAAO,IAAMA,EAAO,MAAQA,EAAO,IAAMA,EAAO,IAAM,MAC3HR,GAAK,GAAKM,GAAMS,GAAY,EAAI,OAChC,OACH,EACDC,GAAI,SAAChB,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKe,EAAIf,EAAE,CAAD,GAAO,GAAIQ,EAAK,CAACR,EAAE,CAAD,EAAKgB,EAAMF,EAAER,MAAM,EAAR,EAAaW,EAAOH,EAAER,MAAM,EAAR,EAAaY,EAAMH,EAAET,MAAM,EAAR,EAAaa,EAAOJ,EAAET,MAAM,EAAR,EACvI,OAAOE,GAAMQ,GAAO,GAAKC,GAAQ,IAAMC,GAAO,GAAKC,GAAQ,GAAK,MAC7DX,GAAOQ,GAAO,GAAKA,GAAO,IAAOC,EAAO,IAAMA,EAAO,KAAQC,GAAO,GAAKA,GAAO,IAAOC,EAAO,IAAMA,EAAO,IAAM,MACjH,OACH,EACDC,GAAI,SAACvB,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EAAKqB,EAAWP,EAAER,MAAM,EAAR,EACjE,OAAOT,GAAK,GAAKW,EAAK,MACnBM,GAAK,GAAKO,GAAY,GAAKb,EAAK,OAChC,OACH,EACDc,IAAK,SAACzB,EAAM,CACX,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKe,EAAIf,EAAE,CAAD,GAAO,GAAIQ,EAAK,CAACR,EAAE,CAAD,EAAKgB,EAAMF,EAAER,MAAM,EAAR,EAAaY,EAAMH,EAAET,MAAM,EAAR,EAC/F,OAAOE,IAAOM,GAAK,GAAKA,GAAK,GAAKA,GAAK,IAAMN,GAAMQ,GAAO,GAAKA,GAAO,GAAKA,GAAO,GAAK,CAACR,GAAMU,GAAO,GAAKA,GAAO,GAAKA,GAAO,EAAI,MAAQ,OACzI,EACDK,GAAI,SAAC1B,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EACjD,OAAOH,GAAK,GAAKW,EAAK,MAClBM,GAAK,GAAKA,GAAK,GAAMN,EAAK,MAC1BA,EACD,QADM,MAET,EACDgB,GAAI,SAAC3B,EAAD,CAAA,OAAOA,GAAK,EAAI,OAChBA,GAAK,EAAI,MACTA,GAAK,EAAI,MACTA,GAAK,EAAI,MACTA,GAAK,EAAI,OACT,OALA,EAMJ4B,GAAI,SAAC5B,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKG,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAC/D,OAAOA,GAAK,GAAK,CAACM,IAAOW,GAAK,GAAKA,GAAK,GAAK,MAAQ,OACrD,EACDY,IAAK,SAAC7B,EAAM,CACX,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKe,EAAIf,EAAE,CAAD,GAAO,GAAIQ,EAAK,CAACR,EAAE,CAAD,EAAKiB,EAAOH,EAAER,MAAM,EAAR,EAAaa,EAAOJ,EAAET,MAAM,EAAR,EACjG,OAAOE,GAAMS,GAAQ,GAAKE,GAAQ,EAAI,MACnCX,GAAMS,GAAQ,GAAKE,GAAQ,EAAI,MAC/BX,IAAOS,GAAQ,GAAKA,GAAQ,IAAOE,GAAQ,GAAKA,GAAQ,EAAK,MAC7D,OACH,EACDQ,GAAI,SAAC9B,EAAD,CAAA,MAAO,OAAP,EACJ+B,GAAI,SAAC/B,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EAAKqB,EAAWP,EAAER,MAAM,EAAR,EACjE,OAAOT,GAAK,EAAI,MACbiB,GAAK,GAAKO,GAAY,GAAKb,EAAK,OAChC,OACH,EACDqB,GAAI,SAAChC,EAAD,CAAA,OAAOA,GAAK,GAAKA,EAAI,EAAI,MAAQ,OAAjC,EACJiC,GAAI,SAACjC,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EAAKqB,EAAWP,EAAER,MAAM,EAAR,EACjE,OAAOT,GAAK,GAAKA,EAAI,EAAI,MACtBiB,GAAK,GAAKO,GAAY,GAAKb,EAAK,OAChC,OACH,EACDuB,GAAI,SAAClC,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EACrD,OAAOA,GAAK,EAAI,MACbA,GAAK,EAAI,MACRM,GAAMN,GAAK,GAAKA,GAAK,EAAK,MAC1BM,GAAMN,GAAK,GAAKA,GAAK,GAAM,OAC5B,OACH,EACDmC,GAAI,SAACnC,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EACrD,OAAQA,GAAK,GAAKA,GAAK,GAAM,MACzBA,GAAK,GAAKA,GAAK,GAAM,MACpBM,GAAMN,GAAK,GAAKA,GAAK,IAAQM,GAAMN,GAAK,IAAMA,GAAK,GAAO,MAC5D,OACH,EACDoC,GAAI,SAACpC,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EACjD,OAAOc,GAAK,GAAKN,GAAMM,GAAK,GAAK,CAACN,EAAK,MACpCM,GAAK,GAAKN,EAAK,MACf,OACH,EACD0B,GAAI,SAACrC,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKmC,GAAKnC,EAAE,CAAD,GAAO,IAAIoC,QAAQ,MAAO,EAA5B,EAAiCjC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGmB,EAAMF,EAAER,MAAM,EAAR,EAAaW,EAAOH,EAAER,MAAM,EAAR,EACjI,OAAOH,GAAMa,GAAO,GAAKC,GAAQ,IAAMkB,EAAI,IAAM,GAAKA,EAAI,KAAO,GAAK,MAAQ,OAC9E,EACDE,IAAK,SAACxC,EAAD,CAAA,OAAOA,GAAK,EAAI,OACjBA,GAAK,EAAI,MACT,OAFC,EAGLyC,GAAI,SAACzC,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBa,EAAIf,EAAE,CAAD,GAAO,GAAIG,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGa,EAAMP,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EAAgBD,EAAOF,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EACjH,OAAOI,GAAO,IAAML,EAAO,IAAMA,EAAO,IAAM,MAC1CK,GAAO,GAAKA,GAAO,IAAOL,EAAO,IAAMA,EAAO,IAAM,MACrDU,GAAK,EAAI,OACT,OACH,EACDwB,GAAI,SAAC1C,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBa,EAAIf,EAAE,CAAD,GAAO,GAAIwC,EAAIzB,EAAE0B,OAAQtC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGa,EAAMP,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EAAgBD,EAAOF,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EAAgBa,EAAOJ,EAAET,MAAM,EAAR,EAAaY,EAAMH,EAAET,MAAM,EAAR,EACzK,OAAOH,GAAMO,GAAO,GAAML,GAAQ,IAAMA,GAAQ,IAAOmC,GAAK,GAAMrB,GAAQ,IAAMA,GAAQ,GAAM,OAC3FT,GAAO,GAAKL,GAAQ,IAAMmC,GAAK,GAAKtB,GAAO,GAAKC,GAAQ,IAAMqB,GAAK,GAAKtB,GAAO,EAAI,MACnF,OACH,EACDwB,GAAI,SAAC7C,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKe,EAAIf,EAAE,CAAD,GAAO,GAAIQ,EAAK,CAACR,EAAE,CAAD,EAAKgB,EAAMF,EAAER,MAAM,EAAR,EAAaW,EAAOH,EAAER,MAAM,EAAR,EAAaY,EAAMH,EAAET,MAAM,EAAR,EAAaa,EAAOJ,EAAET,MAAM,EAAR,EACvI,OAAOE,GAAMQ,GAAO,GAAKC,GAAQ,IAAMC,GAAO,GAAKC,GAAQ,GAAK,MAAQ,OACxE,EACDwB,GAAI,SAAC9C,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBC,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGQ,EAAOF,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EACrE,OAAOT,GAAK,EAAI,MACbA,GAAK,EAAI,MACTA,GAAK,GAAMQ,GAAQ,GAAKA,GAAQ,GAAM,MACrCA,GAAQ,IAAMA,GAAQ,GAAM,OAC7B,OACH,EACDuC,GAAI,SAAC/C,EAAD,CAAA,OAAQA,GAAK,GAAKA,GAAK,EAAK,MAAQ,OAApC,EACJgD,GAAI,SAAChD,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EAAKgB,EAAMF,EAAER,MAAM,EAAR,EAAaW,EAAOH,EAAER,MAAM,EAAR,EAChF,OAAOT,GAAK,GAAKW,EAAK,MACnBA,GAAOQ,GAAO,GAAKA,GAAO,IAAOC,EAAO,IAAMA,EAAO,IAAM,MAC3DT,GAAMM,GAAK,IAAME,GAAO,GAAKA,GAAO,IAAMR,GAAOQ,GAAO,GAAKA,GAAO,GAAMR,GAAOS,GAAQ,IAAMA,GAAQ,GAAM,OAC7G,OACH,EACD6B,GAAI,SAACjD,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EAAKqB,EAAWP,EAAER,MAAM,EAAR,EACjE,OAAQQ,GAAK,GAAKA,GAAK,EAAK,MACzBA,GAAK,GAAKO,GAAY,GAAKb,EAAK,OAChC,OACH,EACDuC,GAAI,SAAClD,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBM,EAAK,CAACR,EAAE,CAAD,EAAKG,EAAKC,OAAOJ,EAAE,CAAD,CAAF,GAAUH,EAAGQ,EAAOF,GAAMH,EAAE,CAAD,EAAIM,MAAM,EAAX,EACjF,OAAOT,GAAK,GAAKW,EAAK,MACnB,CAACA,GAAMX,GAAK,GAAKA,GAAK,GAAMQ,GAAQ,GAAKA,GAAQ,GAAM,MACvD,OACH,EACD2C,GAAI,SAACnD,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EAAKgB,EAAMF,EAAER,MAAM,EAAR,EAAaW,EAAOH,EAAER,MAAM,EAAR,EAChF,OAAOE,GAAMQ,GAAO,GAAKC,GAAQ,GAAK,MACnCT,GAAOQ,GAAO,GAAKA,GAAO,IAAOC,EAAO,IAAMA,EAAO,IAAM,MAC3DT,GAAMQ,GAAO,GAAKR,GAAOQ,GAAO,GAAKA,GAAO,GAAMR,GAAOS,GAAQ,IAAMA,GAAQ,GAAM,OACrF,OACH,EACDgC,GAAI,SAACpD,EAAD,CAAA,OAAOA,GAAK,EAAI,MAChBA,GAAK,EAAI,MACT,OAFA,EAGJqD,GAAI,SAACrD,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKe,EAAIf,EAAE,CAAD,GAAO,GACtD,OAAQH,GAAK,GAAKA,GAAK,GAAMiB,GAAK,GAAKC,GAAK,EAAI,MAAQ,OACxD,EACDoC,GAAI,SAACtD,EAAM,CACV,IAAMG,EAAIC,OAAOJ,CAAD,EAAIK,MAAM,GAAhB,EAAsBY,EAAId,EAAE,CAAD,EAAKQ,EAAK,CAACR,EAAE,CAAD,EAAKiB,EAAOH,EAAER,MAAM,EAAR,EAC7D,OAAOE,GAAMS,GAAQ,EAAI,MACtBT,GAAMS,GAAQ,EAAI,MAClBT,IAAOS,GAAQ,GAAKA,GAAQ,IAAM,CAACT,EAAK,MACxC,OACH,CAlLM,EAqLRb,EAAEyD,GAAKzD,EAAEG,GACTH,EAAE0D,GAAK1D,EAAEC,GACTD,EAAE2D,GAAK3D,EAAEC,GACTD,EAAE4D,GAAK5D,EAAEG,GACTH,EAAE6D,IAAM7D,EAAEC,GACVD,EAAE8D,GAAK9D,EAAEC,GACTD,EAAE+D,IAAM/D,EAAEC,GACVD,EAAEgE,GAAKhE,EAAEY,IACTZ,EAAEiE,GAAKjE,EAAEC,GACTD,EAAEkE,GAAKlE,EAAEC,GACTD,EAAEmE,GAAKnE,EAAEY,IACTZ,EAAEoE,GAAKpE,EAAEY,IACTZ,EAAEqE,GAAKrE,EAAEC,GACTD,EAAEsE,GAAKtE,EAAEG,GACTH,EAAEuE,GAAKvE,EAAEY,IACTZ,EAAEwE,IAAMxE,EAAE2B,IACV3B,EAAEyE,GAAKzE,EAAEC,GACTD,EAAE0E,IAAM1E,EAAEC,GACVD,EAAE2E,GAAK3E,EAAEY,IACTZ,EAAE4E,GAAK5E,EAAEY,IACTZ,EAAE6E,GAAK7E,EAAEG,GACTH,EAAE8E,GAAK9E,EAAEC,GACTD,EAAE+E,GAAK/E,EAAEG,GACTH,EAAEgF,GAAKhF,EAAEkB,GACTlB,EAAEiF,IAAMjF,EAAE+B,IACV/B,EAAEkF,GAAKlF,EAAEC,GACTD,EAAEmF,GAAKnF,EAAEkC,GACTlC,EAAEoF,GAAKpF,EAAEY,IACTZ,EAAEqF,GAAKrF,EAAEgC,GACThC,EAAEsF,GAAKtF,EAAEgC,GACThC,EAAEuF,GAAKvF,EAAEyB,GACTzB,EAAEwF,GAAKxF,EAAEgC,GACThC,EAAEyF,IAAMzF,EAAEC,GACVD,EAAE0F,GAAK1F,EAAEgC,GACThC,EAAE2F,GAAK3F,EAAEC,GACTD,EAAE4F,IAAM5F,EAAEgC,GACVhC,EAAE6F,GAAK7F,EAAEC,GACTD,EAAE8F,GAAK9F,EAAEC,GACTD,EAAE+F,GAAK/F,EAAEgC,GACThC,EAAEgG,GAAKhG,EAAEG,GACTH,EAAEiG,GAAKjG,EAAEgC,GACThC,EAAEkG,GAAKlG,EAAEC,GACTD,EAAEmG,GAAKnG,EAAEC,GACTD,EAAEoG,GAAKpG,EAAEC,GACTD,EAAEqG,GAAKrG,EAAEC,GACTD,EAAEsG,IAAMtG,EAAEgC,GACVhC,EAAEuG,GAAKvG,EAAEgC,GACThC,EAAEwG,GAAKxG,EAAEC,GACTD,EAAEyG,GAAKzG,EAAEC,GACTD,EAAE0G,GAAK1G,EAAEC,GACTD,EAAE2G,GAAK3G,EAAEgC,GACThC,EAAE4G,GAAK5G,EAAEgC,GACThC,EAAE6G,GAAK7G,EAAEC,GACTD,EAAE8G,GAAK9G,EAAEC,GACTD,EAAE+G,GAAK/G,EAAEY,IACTZ,EAAEgH,GAAKhH,EAAEC,GACTD,EAAEiH,GAAKjH,EAAEC,GACTD,EAAEkH,GAAKlH,EAAEC,GACTD,EAAEmH,IAAMnH,EAAEG,GACVH,EAAEoH,GAAKpH,EAAEC,GACTD,EAAEqH,GAAKrH,EAAEC,GACTD,EAAEsH,IAAMtH,EAAEgC,GACVhC,EAAEuH,GAAKvH,EAAEY,IACTZ,EAAEwH,GAAKxH,EAAEC,GACTD,EAAEyH,GAAKzH,EAAE4B,GACT5B,EAAE0H,GAAK1H,EAAEC,GACTD,EAAE2H,GAAK3H,EAAEC,GACTD,EAAE4H,GAAK5H,EAAEkB,GACTlB,EAAE6H,GAAK7H,EAAEgC,GACThC,EAAE8H,GAAK9H,EAAEY,IACTZ,EAAE+H,GAAK/H,EAAEY,IACTZ,EAAEgI,GAAKhI,EAAEC,GACTD,EAAEiI,GAAKjI,EAAEC,GACTD,EAAEkI,GAAKlI,EAAEgC,GACThC,EAAEmI,GAAKnI,EAAEiD,GACTjD,EAAEoI,GAAKpI,EAAEC,GACTD,EAAEqI,GAAKrI,EAAEgC,GACThC,EAAEsI,GAAKtI,EAAEC,GACTD,EAAEuI,GAAKvI,EAAEC,GACTD,EAAEwI,GAAKxI,EAAEqD,GACTrD,EAAEyI,GAAKzI,EAAEY,IACTZ,EAAE0I,GAAK1I,EAAEC,GACTD,EAAE2I,GAAK3I,EAAEgC,GACThC,EAAE4I,IAAM5I,EAAEC,GACVD,EAAE6I,GAAK7I,EAAEgC,GACThC,EAAE8I,GAAK9I,EAAEC,GACTD,EAAE+I,GAAK/I,EAAEY,IACTZ,EAAEgJ,GAAKhJ,EAAEgC,GACThC,EAAEiJ,IAAMjJ,EAAEgC,GACVhC,EAAEkJ,GAAKlJ,EAAEgC,GACThC,EAAEmJ,GAAKnJ,EAAEG,GAET,IAAAiJ,GAAepJ,ECpRA,SAAfqJ,GAA6CC,EAAQ,CAKpD,OAAIA,IAAW,QACPA,EAEDC,GAA2BD,CAAD,CACjC,CAYD,IAAME,GAAmB,gBACzB,SAASD,GAA2BE,EAAa,CAChD,IAAMC,EAAQD,EAAYC,MAAMF,EAAlB,EACd,GAAI,CAACE,EACJ,MAAM,IAAIC,UAAJ,mBAAA,OAAiCF,CAAjC,CAAA,EAEP,OAAOC,EAAM,CAAD,CACZ,0XCxBoBE,GAAAA,UAAAA,CACpB,SAAAA,EAAYC,EAAQC,EAAS,CAAAC,GAAA,KAAAH,CAAA,EAC5B,IAAMI,EAAUJ,EAAYK,mBAAmBJ,CAA/B,EAChB,GAAIG,EAAQE,SAAW,EACtB,MAAM,IAAIC,WAAW,uBAAyBN,CAAxC,EAEP,GAAIC,GAAWA,EAAQM,OAAS,WAC/B,MAAM,IAAID,WAAW,qCAAf,EAEP,KAAKE,EAAIC,GAAoBC,GAAqBP,EAAQ,CAAD,CAAR,CAArB,CAC5B,kCACD,SAAOQ,EAAQ,CACd,OAAO,KAAKH,EAAEG,CAAP,CACP,qCACD,SAA0BR,EAAS,CAClC,OAAI,OAAOA,GAAY,WACtBA,EAAU,CAACA,CAAD,GAEJA,EAAQS,OAAO,SAAAZ,EAAM,CAAA,OAAIS,GAAoBC,GAAqBV,CAAD,CAArB,CAAvB,CAArB,CACP;4rCChBK,IAAMa,GAAQ,CACnB,SACA,SACA,OACA,MACA,OACA,QACA,UACA,MARmB,EAYfC,GAAiB,CACrB,OACA,QAFqB,EAMjBC,GAAe,CACnB,OACA,QACA,QAHmB,EAOfC,GAAwB,CAC5B,SACA,UAF4B,EAUTC,EAAAA,UAAAA,CAQnB,SAAAA,GAAwC,CAAA,IAA5BC,EAA4B,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAlB,CAAA,EAAIC,EAAc,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAJ,CAAA,EAAIC,GAAA,KAAAH,CAAA,EACtC,IACEI,EAGEF,EAHFE,QACAC,EAEEH,EAFFG,MACAC,EACEJ,EADFI,cAQF,GALA,KAAKF,QAAU,SACf,KAAKC,MAAQ,OACb,KAAKC,cAAgB,SAGjBF,IAAYG,OAAW,CACzB,GAAIV,GAAeW,QAAQJ,CAAvB,EAAkC,EACpC,MAAM,IAAIK,WAAJ,6BAAA,OAA4CL,CAA5C,CAAA,EAER,KAAKA,QAAUA,CAChB,CAGD,GAAIC,IAAUE,OAAW,CACvB,GAAIT,GAAaU,QAAQH,CAArB,EAA8B,EAChC,MAAM,IAAII,WAAJ,2BAAA,OAA0CJ,CAA1C,CAAA,EAER,KAAKA,MAAQA,CACd,CAGD,GAAIC,IAAkBC,OAAW,CAC/B,GAAIR,GAAsBS,QAAQF,CAA9B,EAA+C,EACjD,MAAM,IAAIG,WAAJ,mCAAA,OAAkDH,CAAlD,CAAA,EAER,KAAKA,cAAgBA,CACtB,CAaD,GATI,OAAOL,GAAY,WACrBA,EAAU,CAACA,CAAD,GAGZA,EAAQS,KAAKC,GAAgB,CAA7B,EAEA,KAAKC,OAASZ,EAAmBa,mBAAmBZ,EAAS,CAC3DK,cAAe,KAAKA,aADuC,CAA/C,EAEX,CAFW,EAGV,CAAC,KAAKM,OACR,MAAM,IAAIE,MAAM,+BAAV,EAIJC,GAAYF,mBAAmB,KAAKD,MAApC,EAA4CI,OAAS,EACvD,KAAKC,YAAc,IAAIF,GAAY,KAAKH,MAArB,EAEnBM,QAAQC,KAAR,IAAA,OAAiB,KAAKP,OAAtB,2BAAA,CAAA,EAIE,OAAOQ,KAAS,KAAeA,KAAKC,cACtC,KAAKC,aAAe,IAAIF,KAAKC,aAAa,KAAKT,MAA3B,EACpB,KAAKW,gBAAkB,KAAKD,aAAaE,gBAAlB,EAAoCD,iBAE3D,KAAKA,gBAAkB,OAGzB,KAAKX,OAASa,GAAc,KAAKb,OAAQ,CACvCN,cAAe,KAAKA,aADmB,CAAd,CAG5B,kCAcD,UAAS,CACP,IAAAoB,EAAuBC,GAAgBC,SAAD,EAAtCC,EAAAC,GAAAJ,EAAA,CAAA,EAAOK,EAAPF,EAAA,CAAA,EAAeG,EAAfH,EAAA,CAAA,EACA,OAAO,KAAKI,QAAQF,EAAQC,CAArB,EAA2BE,QAAQ,MAAO,KAAKC,aAAaC,KAAKC,IAAIN,CAAT,CAAlB,CAA1C,CACR,8BAyBD,UAAgB,CACd,IAAAO,EAAuBX,GAAgBC,SAAD,EAAtCW,EAAAT,GAAAQ,EAAA,CAAA,EAAOP,EAAPQ,EAAA,CAAA,EAAeP,EAAfO,EAAA,CAAA,EACMC,EAAO,KAAKP,QAAQF,EAAQC,CAArB,EACPS,EAAaD,EAAKhC,QAAQ,KAAb,EAEnB,GAAIiC,EAAa,EACf,MAAO,CAAC,CACNC,KAAM,UACNC,MAAOH,CAFD,CAAD,EAKT,IAAII,EAAQ,CAAA,EACZ,OAAIH,EAAa,GACfG,EAAMlC,KAAK,CACTgC,KAAM,UACNC,MAAOH,EAAKK,MAAM,EAAGJ,CAAd,CAFE,CAAX,EAKFG,EAAQA,EAAME,OACZ,KAAKC,oBAAoBX,KAAKC,IAAIN,CAAT,CAAzB,EACGiB,IAAI,SAAAC,EAAI,CAAA,OAAAC,GAAAA,GAAA,CAAA,EAAUD,CAAV,EAAA,CAAA,EAAA,CAAgBjB,KAAAA,CAAhB,CAAA,CAAA,CADX,CADM,EAIJS,EAAa,EAAeD,EAAKxB,OAAS,GAC5C4B,EAAMlC,KAAK,CACTgC,KAAM,UACNC,MAAOH,EAAKK,MAAMJ,EAAa,CAAxB,CAFE,CAAX,EAKKG,CACR,wBAYD,SAAQD,EAAOX,EAAM,CAmBnB,IAAMmB,EAAeC,GAAc,KAAKxC,MAAN,EAAc,KAAKP,KAAhC,EAAuC2B,CAAvC,EAGrB,GAAI,OAAOmB,GAAiB,SAC1B,OAAOA,EAGT,GAAI,KAAK/C,UAAY,QAEnB,GAAIuC,IAAU,IAAMA,IAAU,GAAI,CAChC,IAAMU,EAAUF,EAAY,WAAA,OAAYR,IAAU,GAAK,GAAK,IAAMP,KAAKC,IAAIM,CAAT,CAAtC,CAAA,EAC5B,GAAIU,EACF,OAAOA,CAEV,SAEQV,IAAU,GAAKA,IAAU,EAAG,CACnC,IAAMU,EAAUF,EAAY,OAAA,OAAQR,IAAU,EAAI,GAAK,IAAMP,KAAKC,IAAIM,CAAT,CAAjC,CAAA,EAC5B,GAAIU,EACF,OAAOA,CAEV,SAEQV,IAAU,GACbQ,EAAaG,QACf,OAAOH,EAAaG,QAO1B,IAAMC,EAAqBJ,EAAaK,GAAWb,CAAD,EAAU,OAAS,QAA9B,EAGvC,GAAI,OAAOY,GAAuB,SAChC,OAAOA,EAKT,IAAME,EAAa,KAAKxC,aAAe,KAAKA,YAAYyC,OAAOtB,KAAKC,IAAIM,CAAT,CAAxB,GAA4C,QAGnF,OAAOY,EAAmBE,CAAD,GAAgBF,EAAmBI,KAC7D,6BAQD,SAAa5B,EAAQ,CACnB,OAAO,KAAKT,aAAe,KAAKA,aAAasC,OAAO7B,CAAzB,EAAmC8B,OAAO9B,CAAD,CACrE,oCAQD,SAAoBA,EAAQ,CAG1B,OAAO,KAAKT,cAAgB,KAAKA,aAAawC,cAC5C,KAAKxC,aAAawC,cAAc/B,CAAhC,EACA,CAAC,CACCW,KAAM,UACNC,MAAO,KAAKR,aAAaJ,CAAlB,CAFR,CAAD,CAIH,gCAOD,UAAkB,CAChB,MAAO,CACLnB,OAAQ,KAAKA,OACbP,MAAO,KAAKA,MACZD,QAAS,KAAKA,QACdmB,gBAAiB,KAAKA,eAJjB,CAMR,UAiBHwC,EAAmBC,mBAAqB,SAASC,EAAuB,CAAA,IAAdC,EAAc,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAJ,CAAA,EAElE,GAAI,OAAOD,GAAY,SACrBA,EAAU,CAACA,CAAD,UACD,CAACE,MAAMC,QAAQH,CAAd,EACV,MAAM,IAAII,UAAU,4BAAd,EAER,OAAOJ,EAAQK,OAAO,SAAAC,EAAM,CAAA,OAAIC,GAAcD,EAAQL,CAAT,CAAjB,CAArB,CACR,EAMDH,EAAmBU,UAAYC,GAM/BX,EAAmBY,iBAAmBA,GAMtCZ,EAAmBa,iBAAmBA,GAKtCb,EAAmBc,YAAcA,GAKjC,IAAMC,GAAa,0BACnB,SAASC,GAAUC,EAAM,CACvB,GAAIC,GAAOD,CAAP,IAAgB,SAClB,MAAM,IAAIX,UAAUS,EAAd,EAER,GAAI,OAAOE,GAAS,SAClB,MAAM,IAAIE,WAAJ,GAAA,OAAkBJ,GAAlB,IAAA,EAAA,OAAiCE,CAAjC,CAAA,EAKR,GAHIA,EAAKA,EAAKG,OAAS,CAAf,IAAsB,MAC5BH,EAAOA,EAAKI,MAAM,EAAGJ,EAAKG,OAAS,CAA5B,GAELE,GAAMC,QAAQN,CAAd,EAAsB,EACxB,MAAM,IAAIE,WAAJ,GAAA,OAAkBJ,GAAlB,IAAA,EAAA,OAAiCE,CAAjC,CAAA,EAER,OAAOA,CACR,CAMD,IAAMO,GAAe,4BACrB,SAASC,GAAYC,EAAO,CAE1B,GADAA,EAAQC,OAAOD,CAAD,EACVC,OAAOC,UACL,CAACD,OAAOC,SAASF,CAAhB,EACH,MAAM,IAAIP,WAAJ,GAAA,OAAkBK,GAAlB,IAAA,EAAA,OAAmCE,CAAnC,CAAA,EAGV,OAAOA,CACR,CAWD,SAASG,GAAeC,EAAQ,CAC9B,MAAO,GAAIA,IAAW,IACvB,CAED,SAASC,GAAWD,EAAQ,CAC1B,OAAOA,EAAS,GAAKA,IAAW,GAAKD,GAAeC,CAAD,CACpD,CAED,SAASE,GAAgBC,EAAM,CAC7B,GAAIA,EAAKb,OAAS,EAChB,MAAM,IAAId,UAAJ,6BAAA,EAER,MAAO,CACLmB,GAAYQ,EAAK,CAAD,CAAL,EACXjB,GAAUiB,EAAK,CAAD,CAAL,CAFJ,CAIR,6nBChaoBC,GAAAA,UAAAA,CACpB,SAAAA,GAAc,CAAAC,GAAA,KAAAD,CAAA,EACb,KAAKE,MAAQ,CAAA,CACb,+BAED,UAAa,CAAA,QACRA,EAAQ,KAAKA,MADLC,EAAA,UAAA,OAANC,EAAM,IAAA,MAAAD,CAAA,EAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,CAAA,EAAA,UAAAA,CAAA,EAEZ,QAAAC,EAAA,EAAAC,EAAkBH,EAAlBE,EAAAC,EAAA,OAAAD,IAAwB,CAAnB,IAAME,EAAGD,EAAAD,CAAA,EACb,GAAIG,GAAOP,CAAP,IAAiB,SACpB,OAEDA,EAAQA,EAAMM,CAAD,CACb,CACD,OAAON,CACP,oBAED,UAAa,CAAA,QAAAQ,EAAA,UAAA,OAANN,EAAM,IAAA,MAAAM,CAAA,EAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANP,EAAMO,CAAA,EAAA,UAAAA,CAAA,EAIZ,QAHMC,EAAQR,EAAKS,IAAL,EACRC,EAAUV,EAAKS,IAAL,EACZX,EAAQ,KAAKA,MACjBa,EAAA,EAAAC,EAAkBZ,EAAlBW,EAAAC,EAAA,OAAAD,IAAwB,CAAnB,IAAMP,EAAGQ,EAAAD,CAAA,EACTN,GAAOP,EAAMM,CAAD,CAAZ,IAAsB,WACzBN,EAAMM,CAAD,EAAQ,CAAA,GAEdN,EAAQA,EAAMM,CAAD,CACb,CACD,OAAON,EAAMY,CAAD,EAAYF,CACxB;weCpBa,SAAfK,GAAqCC,EAASC,EAAuB,CAIpE,QAAAC,EAAAC,GAAmBH,CAAnB,EAAAI,EAAA,EAAAA,EAAAF,EAAA,GAAA,MAA4B,CAAA,IAAnBG,EAAmBD,EAAA,MAC3B,GAAIH,EAAsBI,CAAD,EACxB,OAAOA,EAGR,QADMC,EAAQD,EAAOE,MAAM,GAAb,EACPD,EAAME,OAAS,GAGrB,GAFAF,EAAMG,IAAN,EACAJ,EAASC,EAAMI,KAAK,GAAX,EACLT,EAAsBI,CAAD,EACxB,OAAOA,CAGT,CAED,MAAM,IAAIM,MAAJ,8DAAA,OAAwEX,EAAQU,KAAK,IAAb,CAAxE,CAAA,CACN,CAmBM,SAASE,IAA8B,CAI7C,IAAMC,GAAkB,OAAOC,KAAP,IAAA,YAAAC,GAAOD,IAAP,KAAgB,SACxC,OAAOD,GAAmB,OAAOC,KAAKE,gBAAmB,UACzD,oQC1Dc,SAAfC,GAAsCC,EAAQ,CAC7C,OAAOC,GAASD,CAAD,IACdE,MAAMC,QAAQH,EAAOI,KAArB,GAEAF,MAAMC,QAAQH,EAAOK,SAArB,GAEAH,MAAMC,QAAQH,EAAOM,OAArB,GACA,OAAON,EAAOM,SAAY,UAC1BJ,MAAMC,QAAQH,EAAOO,MAArB,GACA,OAAOP,EAAOO,QAAW,UAEzBL,MAAMC,QAAQH,EAAOQ,KAArB,GAEA,OAAOR,EAAOS,QAAW,WAE1B,CAED,IAAMC,GAAqB,CAAA,EAAGC,YAC9B,SAASV,GAASD,EAAQ,CACzB,OAAOY,GAAOZ,CAAP,IAAkBa,QAAab,IAAW,MAAQA,EAAOW,cAAgBD,EAChF,CCpBM,IAAMI,EAAS,GAETC,GAAO,GAAKD,EAEZE,GAAM,GAAKD,GAEXE,GAAO,EAAID,GAGXE,GAAQ,MAAQF,GAGhBG,GAAQ,OAAS,IAAOH,GAE9B,SAASI,EAAiBC,EAAM,CACtC,OAAQA,EAAR,CACC,IAAK,SACJ,MAAO,GACR,IAAK,SACJ,OAAOP,EACR,IAAK,OACJ,OAAOC,GACR,IAAK,MACJ,OAAOC,GACR,IAAK,OACJ,OAAOC,GACR,IAAK,QACJ,OAAOC,GACR,IAAK,OACJ,OAAOC,EAdT,CAgBA,CC7Bc,SAAfG,GAA2CC,EAAM,CAEhD,OAAIA,EAAKC,SAAWC,OACZF,EAAKC,OAGNE,EAAiBH,EAAKI,MAAQJ,EAAKK,QAAnB,GAAgC,CACvD,CCTM,SAASC,EAAiBC,EAAO,CACvC,OAAQA,EAAR,CACC,IAAK,QACJ,OAAOC,KAAKC,MACb,QACC,OAAOD,KAAKD,KAJd,CAMA,CAGM,SAASG,GAAgCH,EAAO,CACtD,OAAQA,EAAR,CACC,IAAK,QAGJ,MAAO,GACR,QAGC,MAAO,GART,CAUA,oQClBc,SAAfI,GAAuCC,EAAxBC,EAOZ,CAAA,IANFC,EAMED,EANFC,SACAC,EAKEF,EALFE,UAEAC,EAGEH,EAHFG,IACAC,EAEEJ,EAFFI,OACAC,EACEL,EADFK,MAEIC,EAEJ,OAAIL,IACCA,EAASM,IAAMN,EAASO,QAC3BF,EAAUP,EAAI,iBAAA,OAAkBE,EAASM,IAAMN,EAASO,IAA1C,CAAA,GAGZF,IAAYG,QAEXV,EAAKW,YAAcD,SAEtBH,EAAUP,EAAKW,UAEX,OAAOJ,GAAY,aACtBA,EAAUA,EAAQH,EAAKC,CAAN,IAIhBE,IAAYG,SACfH,EAAUP,EAAKO,SAIZK,GAAOL,CAAP,IAAmB,WAClBL,GAAYA,EAASM,IAAMD,EAAQL,EAASM,EAAV,IAAkBE,OACvDH,EAAUA,EAAQL,EAASM,EAAV,EAEjBD,EAAUA,EAAO,SAGf,OAAOA,GAAY,aACtBA,EAAUA,EAAQJ,EAAW,CAC5BE,OAAAA,EACAQ,kBAF4B,SAEVC,EAAQC,EAAU,CACnC,OAAOF,GACNC,EACAC,GAAYb,GAAYA,EAASc,SACjC,CAAEV,MAAAA,CAAF,CAHuB,CAKxB,CAR2B,CAAZ,GAadC,IAAYG,QACXV,EAAKiB,OACJjB,EAAKiB,KAAKd,EAAW,CACxBC,IAAAA,EACAC,OAAAA,CAFwB,CAArB,EAKHE,EAAU,EAGVA,EAAU,kBAITA,IAAYG,SACXR,EACCF,EAAKgB,UAAYd,EAASc,WAC7BT,EAAUM,GAAkBb,EAAKgB,SAAUd,EAASc,SAAU,CAAEV,MAAAA,CAAF,CAAnC,GAI5BC,EAAU,GAIRA,IAAYG,QACfQ,QAAQC,KAAK,2DAA6DC,KAAKC,UAAUrB,EAAM,KAAM,CAA3B,CAA1E,EAEMO,CACP,CAED,SAASM,GAAkBC,EAAQC,EAAnCO,EAAwD,CAAA,IAAThB,EAASgB,EAAThB,MACxCiB,EAAeC,EAAiBV,CAAD,EAOjCW,EAMJ,GALIV,IAAa,MAChBU,EAAiBD,EAAiBV,CAAD,EAEjCW,EAAiBD,EAAiBT,CAAD,EAE9BQ,IAAiBb,QAAae,IAAmBf,OACpD,OAAOa,EAAeE,GAAkB,EAAIC,GAAgCpB,CAAD,EAE5E,wrBC7Ec,SAAfqB,GAAgCC,EAAOC,EAAxBC,EAAmF,CAAA,IAA1CC,EAA0CD,EAA1CC,IAAKC,EAAqCF,EAArCE,OAAQC,EAA6BH,EAA7BG,MAAOC,EAAsBJ,EAAtBI,MAAOC,EAAeL,EAAfK,YAElFP,EAAQQ,GAAmBR,EAAOM,CAAR,EAC1B,IAAMG,EAAOC,GAASV,EAAOC,EAAe,CAAEE,IAAAA,EAAKC,OAAAA,EAAQC,MAAAA,CAAf,CAAvB,EACrB,GAAIE,EAAa,CAChB,GAAIE,EAAM,CACT,IAAME,EAAWX,EAAMA,EAAMY,QAAQH,CAAd,EAAsB,CAAvB,EAChBI,EAAWb,EAAMA,EAAMY,QAAQH,CAAd,EAAsB,CAAvB,EACtB,MAAO,CAACE,EAAUF,EAAMI,CAAjB,CACP,CACD,MAAO,CAACC,OAAWA,OAAWd,EAAM,CAAD,CAA5B,CACP,CACD,OAAOS,CACP,CAED,SAASC,GAASV,EAAOC,EAAzBc,EAAgE,CAAA,IAAtBZ,EAAsBY,EAAtBZ,IAAKC,EAAiBW,EAAjBX,OAAQC,EAASU,EAATV,MAEtD,GAAIL,EAAMgB,SAAW,EAKrB,KAAMC,EAAIC,GAAalB,EAAOC,EAAe,CAC5CE,IAAAA,EACAC,OAAQA,GAAUH,EAAgB,EAClCI,MAAAA,CAH4C,CAAvB,EAOtB,GAAIY,IAAM,GAIV,KAAMR,EAAOT,EAAMiB,CAAD,EAMlB,GAAIR,EAAKU,YAAa,CAErB,IAAMC,EAAwBC,EAAiBhB,CAAD,EAASiB,KAAKC,IAAItB,CAAT,EAA0BuB,GAAmBf,CAAD,EAAUA,EAAKU,WAApF,EAAmGV,EAAKU,YAItI,GAAIC,IAA0B,GAAKH,EAAI,EACtC,OAAOjB,EAAMiB,EAAI,CAAL,CAEb,CAED,OAAOR,GACP,CAWD,SAASS,GAAalB,EAAOC,EAAewB,EAAgB,CAAA,IAAPR,EAAO,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAH,EAClDS,EAAUC,GAAe3B,EAAMiB,CAAD,EAANW,GAAA,CAC7BjB,SAAUX,EAAMiB,EAAI,CAAL,EACfY,UAAWJ,EAAQtB,IAAMF,EAAgB,GAFZ,EAG1BwB,CAH0B,CAAA,EAW9B,OALIC,IAAYZ,QAKZQ,KAAKC,IAAItB,CAAT,EAA0ByB,EACtBT,EAAI,EAGRA,IAAMjB,EAAMgB,OAAS,EACjBC,EAGDC,GAAalB,EAAOC,EAAewB,EAASR,EAAI,CAApC,CACnB,CAQD,SAAST,GAAmBR,EAAOM,EAAO,CACzC,OAAON,EAAM8B,OAAO,SAAAC,EAAwB,CAAA,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SAK5B,OAHAD,EAAOA,GAAQC,EAGXD,EACI1B,EAAMM,QAAQoB,CAAd,GAAuB,EAKxB,EACP,CAZM,CAaP,CCxHc,SAAfE,GAAmDC,EAAMC,EAA1CC,EAAqE,CAAA,IAAdC,EAAcD,EAAdC,IAAKC,EAASF,EAATE,MAE1E,GAAKC,EAAiBL,CAAD,EAKrB,KAAMM,EAAkBD,EAAiBL,CAAD,EAAS,IAC3CO,EAASN,EAAYE,EACrBK,EAAgBC,KAAKC,IAAIT,EAAYE,CAArB,EAChBQ,EAAgBC,EAAiBR,CAAD,EAAQI,EAAgBF,CAAxC,EAA2DA,EACjF,OAAIC,EACCI,EAAgB,EAEXH,EAAgBG,EACvBE,GAA+BT,EAAOE,CAAR,EAIvBE,EAAgBG,EAAiB,EAIpC,EAAEH,EAAgBG,GAAiBG,GAA2BV,EAAOE,CAAR,EACpE,CAED,SAASQ,GAA2BV,EAAOE,EAAiB,CAC3D,OAAOS,GAAgCX,CAAD,EAAUE,CAChD,CAED,SAASO,GAA+BT,EAAOE,EAAiB,CAC/D,OAAQ,EAAIS,GAAgCX,CAAD,GAAWE,EAAkB,CACxE,CCtCD,IAAMU,GAAO,IAAM,GAAK,GAAK,GAAK,IACrBC,GAAW,IAAOD,GAahB,SAAfE,GAA4CC,EAAMC,EAAnCC,EAAqF,CAAA,IAA1CC,EAA0CD,EAA1CC,SAAUC,EAAgCF,EAAhCE,SAAUC,EAAsBH,EAAtBG,IAAKC,EAAiBJ,EAAjBI,OAAQC,EAASL,EAATK,MACpFC,EAAYR,EAAKS,QAAUT,EAAKS,QAAL,EAAiBT,EAE5CU,EAA6B,SAACC,EAAD,CAAA,OAAUC,GAA4BD,EAAMH,EAAW,CAAEH,IAAAA,EAAKE,MAAAA,CAAP,CAAlB,CAArC,EAgB7BM,EAAmBC,GAAoBR,EAASL,EAAOG,EAAUI,EAAW,CACjFF,OAAAA,EACAD,IAAAA,EACAE,MAAAA,EACAJ,SAAUG,EAASH,EAAWF,CAJmD,CAAtC,EAQ5C,GAAIY,IAAqBE,OAMzB,KAAIC,EAEJ,GAAIf,IACCA,EAAKF,sBACRiB,EAAmBf,EAAKF,oBAAoBS,EAAW,CACtDE,2BAAAA,EACAO,iBAAAA,EACAZ,IAAAA,EACAC,OAAAA,EACAC,MAAAA,CALsD,CAApC,GAShBS,IAAqBD,QAAW,CAEnC,IAAMJ,EAAOV,EAAKU,MAAQV,EAAKiB,SAC3BP,IAKHK,EAAmBN,EAA2BC,CAAD,EAE9C,CAGF,OAAIK,IAAqBD,OACjBF,EAGDM,KAAKC,IAAIJ,EAAkBH,CAA3B,EACP,CAEM,SAASQ,GAAiBC,EAAmBd,EAA7Ce,EAA0F,CAAA,IAAhClB,EAAgCkB,EAAhClB,IAAKC,EAA2BiB,EAA3BjB,OAAQC,EAAmBgB,EAAnBhB,MAAOJ,EAAYoB,EAAZpB,SAM9EqB,EAAUC,GAAeH,EAAmB,CAAEd,UAAAA,EAAWH,IAAAA,EAAKC,OAAAA,EAAQC,MAAAA,EAAOJ,SAAAA,CAAjC,CAApB,EAC9B,GAAIqB,IAAYT,OAGhB,OAAIT,EAMIE,EAAYgB,EAAU,IAAO,EAShCA,IAAY,GAAKhB,IAAcH,EAC3BP,GAGDU,EAAYgB,EAAU,GAE9B,CAEM,SAASV,GAAoBb,EAAMO,EAAnCkB,EAKJ,CAAA,IAJFrB,EAIEqB,EAJFrB,IACAC,EAGEoB,EAHFpB,OACAC,EAEEmB,EAFFnB,MACAJ,EACEuB,EADFvB,SAEA,GAAIF,EAAM,CACT,IAAM0B,EAAgBN,GAAiBpB,EAAMO,EAAW,CACvDH,IAAAA,EACAC,OAAAA,EACAC,MAAAA,EACAJ,SAAAA,CAJuD,CAAlB,EAMtC,OAAIwB,IAAkBZ,OACrB,OAEMY,EAAgBtB,CACvB,KACA,QAAIC,EAGIE,EAAYH,EAAM,EAGlBP,EAGT,CC/ID,IAAM8B,GAAc,CAAA,EAEb,SAASC,GAAcC,EAAQ,CACrC,OAAOF,GAAYE,CAAD,CAClB,CAEM,SAASC,GAAcC,EAAY,CACzC,GAAI,CAACA,EACJ,MAAM,IAAIC,MAAM,8CAAV,EAIPL,GAAYI,EAAWF,MAAZ,EAAsBE,CACjC,CCaD,IAAAE,GAAe,CACd,CACCC,SAAU,KADX,EAGA,CACCA,SAAU,QADX,EAGA,CACCA,SAAU,QADX,EAGA,CACCA,SAAU,MADX,EAGA,CACCA,SAAU,KADX,EAGA,CACCA,SAAU,MADX,EAGA,CACCA,SAAU,OADX,EAGA,CACCA,SAAU,MADX,CAtBc,ECOf,IAAAC,GAAe,CACdC,MAAOC,GACPC,OAAQ,MAFM,yrBCJf,IAAAC,GAAAC,GAAAA,GAAA,CAAA,EACIC,EADJ,EAAA,CAAA,EAAA,CAGCC,MAAOD,GAAMC,MAAMC,OAAO,SAAAC,EAAI,CAAA,OAAIA,EAAKC,WAAa,QAAtB,CAAvB,CAHR,CAAA,ECKA,IAAAC,GAAe,CACd,CAGCC,OAAQ,EAERC,KAAM,KALP,EAOA,CAGCC,UAAW,EAEXC,kBAAmB,KAGnBH,OAAQ,EAERC,KAAM,QAVP,EAYA,CAECC,UAAW,KAGXF,OAAQI,EAERH,KAAM,QAPP,EASA,CAECC,UAAW,IAAME,EAOjBC,YAAa,EAGbL,OAAQI,EAERH,KAAM,QAdP,EAgBA,CAECC,UAAW,KAAOE,EAGlBJ,OAAQ,GAAMM,GAGdL,KAAM,WARP,EAUA,CAECC,UAAW,KAAOE,EAClBG,qBAAsB,KAAOH,EAG7BJ,OAAQM,GAERL,KAAM,MARP,EAUA,CAECC,UAAY,KAAO,GAAMM,GAGzBR,OAAQQ,GAERP,KAAM,KAPP,EASA,CAECC,UAAW,IAAMM,GAGjBR,OAAQS,GAERR,KAAM,MAPP,EASA,CAECC,UAAW,IAAMO,GAGjBT,OAAQU,GAERT,KAAM,OAPP,EASA,CAECC,UAAW,KAAOQ,GAGlBV,OAAQW,GAERV,KAAM,MAPP,CA5Fc,ECtBf,IAAAW,GAAe,CACdC,UAAWC,GACXC,QAAS,OACTC,MAAO,CACN,MACA,SACA,OACA,MACA,OACA,QACA,MAPM,CAHO,ECuBf,IAAAC,GAAe,CACdC,UAAWC,GACXC,QAAS,YACTC,MAAO,CACN,MACA,SACA,OACA,MACA,OACA,QACA,MAPM,CAHO,EChBR,SAASC,GAAQC,EAAO,CAC9B,OAAOA,aAAiBC,KAAOD,EAAQ,IAAIC,KAAKD,CAAT,CACvC,CCXD,IAAME,GAAQ,CACb,CACCC,SAAU,QADX,EAGA,CACCA,SAAU,QADX,EAGA,CACCA,SAAU,MADX,CAPa,EAcRC,EAAa,CAAA,EAGbC,GAAc,CACnBC,QADmB,SACXC,EADWC,EAC+B,CAAA,IAA7BC,EAA6BD,EAA7BC,OAAQC,EAAqBF,EAArBE,kBAG5B,OAAOA,EAAkB,KAAD,CACxB,EACDC,OANmB,SAMZC,EAAOC,EAAQ,CAErB,OAAKT,EAAWS,CAAD,IACdT,EAAWS,CAAD,EAAW,CAAA,GAGjBT,EAAWS,CAAD,EAASC,WAEvBV,EAAWS,CAAD,EAASC,SAAW,IAAIC,KAAKC,eAAeH,EAAQ,CAC7DI,MAAO,QACPC,IAAK,SAFwD,CAAhC,GAMxBd,EAAWS,CAAD,EAASC,SAASH,OAAOQ,GAAQP,CAAD,CAA1C,CACP,CArBkB,EA2BdQ,GAAkB,CACvBd,QADuB,SACfC,EADec,EACQ,CAAA,IAAVZ,EAAUY,EAAVZ,OACpB,GAAIA,EAAQ,CAQX,IAAMa,EAAgB,IAAIC,KAAK,IAAIA,KAAKhB,CAAT,EAAoBiB,YAApB,EAAmC,CAA5C,EAA+CC,QAA/C,EAA2D,EAEjF,OAAQlB,EAAYe,GAAiB,GACrC,KAAM,CAMN,IAAMI,EAAgB,IAAIH,KAAK,IAAIA,KAAKhB,CAAT,EAAoBiB,YAApB,EAAoC,EAAG,CAAhD,EAAmDC,QAAnD,EAEtB,OAAQC,EAAgBnB,GAAa,GACrC,CACD,EACDI,OAxBuB,SAwBhBC,EAAOC,EAAQ,CAErB,OAAKT,EAAWS,CAAD,IACdT,EAAWS,CAAD,EAAW,CAAA,GAGjBT,EAAWS,CAAD,EAASc,eAEvBvB,EAAWS,CAAD,EAASc,aAAe,IAAIZ,KAAKC,eAAeH,EAAQ,CACjEe,KAAM,UACNX,MAAO,QACPC,IAAK,SAH4D,CAAhC,GAO5Bd,EAAWS,CAAD,EAASc,aAAahB,OAAOQ,GAAQP,CAAD,CAA9C,CACP,CAxCsB,EA8CpBiB,GAA2B,EAC9B3B,GAAM4B,KAAKzB,GAAae,EAAxB,EAMAlB,GAAM4B,KACL,CACC3B,SAAU,KADX,EAGA,CACCA,SAAU,MADX,EAGA,CACCA,SAAU,OADX,EAGA,CACCA,SAAU,MADX,CAVD,EAgBD,IAAA4B,EAAe,CACd7B,MAAAA,GACA8B,OAAQ,CAEP,OAEA,aAOA,SAGA,OAdO,CAFM,yrBC3Hf,IAAAC,GAAAC,GAAAA,GAAA,CAAA,EACIC,CADJ,EAAA,CAAA,EAAA,CAGCC,MAAO,CAAC,CAAEC,SAAU,KAAZ,CAAD,EAAsBC,OAAOH,EAAQC,KAArC,CAHR,CAAA,yrBCAA,IAAAG,GAAAC,GAAAA,GAAA,CAAA,EACIC,CADJ,EAAA,CAAA,EAAA,CAGCC,MAAOD,EAAQC,MAAMC,OAAO,SAAAC,EAAI,CAAA,OAAIA,EAAKC,WAAa,QAAtB,CAAzB,CAHR,CAAA,yrBCAA,IAAAC,GAAAC,GAAAA,GAAA,CAAA,EACIC,EADJ,EAAA,CAAA,EAAA,CAGCC,MAAO,CAAC,CAAEC,SAAU,KAAZ,CAAD,EAAsBC,OAAOH,GAAcC,KAA3C,CAHR,CAAA,yrBCCA,IAAAG,GAAAC,GAAAA,GAAA,CAAA,EACIC,CADJ,EAAA,CAAA,EAAA,CAGCC,MAAOD,EAAQC,MAAMC,OAAO,SAAAC,EAAI,CAAA,OAAIA,EAAKC,WAAa,QAAtB,CAAzB,EAELC,IAAI,SAAAF,EAAI,CAAA,OAAIA,EAAKC,WAAa,SAAlBL,GAAAA,GAAA,CAAA,EAAkCI,CAAlC,EAAA,CAAA,EAAA,CAAwCG,QAASC,CAAjD,CAAA,EAA4DJ,CAAhE,CAFH,CAHR,CAAA,ECHA,IAAAK,GAAe,CACdC,MAAO,CACN,CACCC,SAAU,QADX,EAGA,CACCA,SAAU,QADX,EAGA,CACCA,SAAU,MADX,EAGA,CACCA,SAAU,KADX,EAGA,CACCA,SAAU,OADX,EAGA,CACCA,SAAU,MADX,CAhBM,EAoBPC,OAAQ,CAEP,OAEA,aAOA,SAGA,OAdO,CArBM,yrBCEf,IAAAC,GAAAC,GAAAA,GAAA,CAAA,EACIC,EADJ,EAAA,CAAA,EAAA,CAGCC,MAAO,CAAC,CAAEC,SAAU,KAAZ,CAAD,EAAsBC,OAAOH,GAAKC,KAAlC,CAHR,CAAA,yrBCAA,IAAAG,GAAAC,GAAAA,GAAA,CAAA,EACIC,EADJ,EAAA,CAAA,EAAA,CAGCC,MAAOD,GAAKC,MAAMC,OAAO,SAAAC,EAAI,CAAA,OAAIA,EAAKC,WAAa,QAAtB,CAAtB,CAHR,CAAA,yrBCAA,IAAAC,GAAAC,GAAAA,GAAA,CAAA,EACIC,EADJ,EAAA,CAAA,EAAA,CAGCC,MAAO,CAAC,CAAEC,SAAU,KAAZ,CAAD,EAAsBC,OAAOH,GAAWC,KAAxC,CAHR,CAAA,ECce,SAAfG,GAAuCC,EAAO,CAC7C,OAAQA,EAAR,CAEC,IAAK,UACL,IAAK,QACJ,OAAOC,GACR,IAAK,eACJ,OAAOC,GACR,IAAK,cACJ,OAAOC,GAER,IAAK,OACL,IAAK,mBACJ,OAAOC,GACR,IAAK,OACJ,OAAOC,GACR,IAAK,WACJ,OAAOC,GACR,IAAK,cACJ,OAAOC,GACR,IAAK,kBACJ,OAAOC,GACR,IAAK,UACJ,OAAOC,EACR,IAAK,cACJ,OAAOC,GACR,IAAK,iBACJ,OAAOC,GACR,IAAK,qBACJ,OAAOC,GACR,IAAK,uBACJ,OAAOC,GACR,QAEC,OAAOV,EAjCT,CAmCA,C;;gsCClBoBW,EAAAA,UAAAA,CAKpB,SAAAA,GAA6C,CAAA,IAAjCC,EAAiC,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAvB,CAAA,EAAuBC,EAAA,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAJ,CAAA,EAAbC,EAAiBD,EAAjBC,SAAiBC,GAAA,KAAAJ,CAAA,EAExC,OAAOC,GAAY,WACtBA,EAAU,CAACA,CAAD,GAMX,KAAKI,OAASC,GACbL,EAAQM,OAAOP,EAAQQ,iBAAR,CAAf,EACAC,EAFyB,EAKtB,OAAOC,KAAS,KAEfA,KAAKC,eACR,KAAKC,aAAe,IAAIF,KAAKC,aAAa,KAAKN,MAA3B,GAQlBF,IAAa,IAChB,KAAKU,uBAAyBH,KAAKI,mBACnC,KAAKC,gBAAkBL,KAAKM,cAE5B,KAAKH,uBAAyBI,EAC9B,KAAKF,gBAAkBE,EAA2BD,aAInD,KAAKE,wBAA0B,IAAIC,GAGnC,KAAKC,iBAAmB,IAAID,EAC5B,kCAuBD,SAAOE,EAAOC,EAAOC,EAAS,CACxBA,IACAD,GAAS,CAACE,GAAQF,CAAD,GACpBC,EAAUD,EACVA,EAAQG,QAERF,EAAU,CAAA,GAIPD,IACJA,EAAQI,IAGL,OAAOJ,GAAU,WACpBA,EAAQK,GAAeL,CAAD,GAGvB,IAAMM,EAAYC,GAAaR,CAAD,EAI9BS,EAA+B,KAAKC,UAAUT,EAAMU,SAAWV,EAAMW,MAAtC,EAAvBA,EAARH,EAAQG,OAAQC,EAAhBJ,EAAgBI,WAEZC,EAKAb,EAAMa,MAAQV,SACjBU,EAAMb,EAAMa,KAGTA,IAAQV,QAAaF,EAAQY,MAAQV,SACxCU,EAAMZ,EAAQY,KAEXA,IAAQV,SACXU,EAAMC,KAAKD,IAAL,GAIP,IAAME,GAAiBF,EAAMP,GAAa,IAEpCU,EAASf,EAAQe,QAAUD,EAAgB,EAE3CE,EAAWC,GAChBP,EACAxB,GAAc,KAAKJ,MAAN,EAAc8B,IAC3B1B,GAAc,KAAKJ,MAAN,EAAb,KACAiC,CAJ2B,EAmB5B,GAAIhB,EAAMmB,OAAQ,CACjB,IAAMA,EAASnB,EAAMmB,OAAO,CAC3BN,IAAAA,EACAO,KAAM,IAAIN,KAAKR,CAAT,EACNe,KAAMf,EACNgB,QAASP,EACThC,OAAQ,KAAKA,MALc,CAAb,EAOf,GAAIoC,IAAWhB,OAGd,OAAOgB,CAER,CAGD,IAAMI,EAAQC,GAGbxB,EAAMuB,MACNZ,EACAM,CAL4C,EAcvCQ,EAAQxB,EAAQwB,OAASzB,EAAMyB,MAIrCC,GAAmCC,GAIlC3B,EAAM4B,WAAa5B,EAAM6B,OAASzB,GAAayB,MAC/Cd,EACA,CAAEF,IAAAA,EAAKU,MAAAA,EAAOE,MAAAA,EAAOT,OAAAA,EAAQc,YAAa,EAA1C,CANyC,EAA1CC,EAAAC,GAAAN,GAAA,CAAA,EAAOO,GAAPF,EAAA,CAAA,EAAiBG,EAAjBH,EAAA,CAAA,EAAuBI,EAAvBJ,EAAA,CAAA,EASMK,GAAgB,KAAKC,kBAAkB/B,EAAW4B,EAAMnB,EAAe,CAC5EJ,OAAAA,EACAC,WAAAA,EACAK,SAAAA,EACAJ,IAAAA,EACAG,OAAAA,EACAS,MAAAA,CAN4E,CAAvD,GAOhB,GAEN,GAAIxB,EAAQqC,oBAAqB,CAChC,IAAMC,GAAmBD,GAAoBhC,EAAW4B,EAAM,CAC7DC,SAAAA,EACAF,SAAAA,GACApB,IAAAA,EACAG,OAAAA,EACAS,MAAAA,CAL6D,CAAlB,EAO5C,MAAO,CAACW,GAAeG,EAAhB,CACP,CAED,OAAOH,EACP,kCAED,SAAkB9B,EAAW4B,EAAMnB,EAAnCyB,EAOG,CAAA,IAAAC,EAAA,KANF9B,EAME6B,EANF7B,OACAC,EAKE4B,EALF5B,WACAK,EAIEuB,EAJFvB,SACAJ,EAGE2B,EAHF3B,IACAG,EAEEwB,EAFFxB,OACAS,EACEe,EADFf,MAGA,GAAKS,EAIL,IAAIA,EAAKQ,OACR,OAAOR,EAAKQ,OAAOpC,EAAW,KAAKvB,OAAQ,CAC1C4D,SAAU,SAACC,EAAMC,GAAU,CAE1B,OAAOJ,EAAKK,YAAYD,GAAOD,EAAM,CACpCjC,OAAAA,EACAK,OAAAA,CAFoC,CAA9B,CAIP,EACDH,IAAAA,EACAG,OAAAA,CAT0C,CAApC,EAcR,IAAM4B,EAAOV,EAAKU,MAAQV,EAAKS,SAE/B,GAAI,CAACC,EACJ,MAAM,IAAIG,MAAJ,sFAAA,OAAoGC,KAAKC,UAAUf,CAAf,CAApG,CAAA,EAKP,GAAIU,IAAS,MACZ,OAAO3B,EAIR,IAAIiC,EAASC,KAAKC,IAAIrC,CAAT,EAA0BsC,GAAmBnB,CAAD,EAarDA,EAAKoB,cAERJ,EAASK,EAAiB9B,CAAD,EAAQyB,EAAShB,EAAKoB,WAAtC,EAAqDpB,EAAKoB,aAGpE,IAAIE,EAAqB,GAAKL,KAAKM,KAAK1C,CAAV,EAA2BwC,EAAiB9B,CAAD,EAAQyB,CAAxB,EAgBzD,OARIM,IAAuB,IACtBxC,EACHwC,EAAqB,EAErBA,EAAqB,IAIf5C,EAAR,CACC,IAAK,OACL,IAAK,QACL,IAAK,SAEJ,OAAO,KAAK8C,aAAa9C,CAAlB,EAA8B8B,OAAOc,EAAoBZ,CAAzD,EACR,QAGC,OAAO,KAAKE,YAAYU,EAAoBZ,EAAM,CACjDjC,OAAAA,EACAK,OAAAA,CAFiD,CAA3C,CATT,EAcA,4BAUD,SAAY6B,EAAOD,EAAnBe,EAA6C,CAAA,IAAlBhD,EAAkBgD,EAAlBhD,OAAQK,EAAU2C,EAAV3C,OAClC,OAAO,KAAK4C,kBAAkBjD,EAAQiC,EAAMC,EAAO,CAAE7B,OAAAA,CAAF,CAA5C,EACL6C,QAAQ,MAAO,KAAKC,aAAaX,KAAKC,IAAIP,CAAT,CAAlB,CADV,CAEP,kCAaD,SAAkBkB,EAAiBnB,EAAMC,EAAzCmB,EAA4D,CAAA,IAAVhD,EAAUgD,EAAVhD,OAG3CjC,EAAS,KAAKA,OAMpB,GALAgF,EAAkBA,EAAgBnB,CAAD,EAK7B,OAAOmB,GAAoB,SAC9B,OAAOA,EAKR,IAAME,EAAepB,IAAU,EAAK7B,EAAS,SAAW,OAAW6B,EAAQ,EAAI,OAAS,SAClFqB,EAAkBH,EAAgBE,CAAD,GAAkBF,EAEzD,GAAI,OAAOG,GAAoB,SAC9B,OAAOA,EAGR,IAAMC,EAAa,KAAKC,eAAL,EAAsBC,OAAOlB,KAAKC,IAAIP,CAAT,CAA7B,EAGnB,OAAOqB,EAAgBC,CAAD,GAAgBD,EAAgBI,KACtD,6BAQD,SAAaC,EAAQ,CACpB,OAAO,KAAKjF,aAAe,KAAKA,aAAaoD,OAAO6B,CAAzB,EAAmCC,OAAOD,CAAD,CACpE,6BAOD,SAAa3D,EAAY,CAGxB,OAAO,KAAKhB,wBAAwB6E,IAAI,KAAK1F,OAAQ6B,CAA9C,GACN,KAAKhB,wBAAwB8E,IAAI,KAAK3F,OAAQ6B,EAAY,IAAI,KAAKrB,uBAAuB,KAAKR,OAAQ,CAAEiB,MAAOY,CAAT,CAA7C,CAA1D,CACD,+BAMD,UAAiB,CAGhB,OAAO,KAAKd,iBAAiB2E,IAAI,KAAK1F,MAA/B,GACN,KAAKe,iBAAiB4E,IAAI,KAAK3F,OAAQ,IAAI,KAAKU,gBAAgB,KAAKV,MAA9B,CAAvC,CACD,0BAYD,UAA2B,CAAA,IAAjB6B,EAAiB,UAAA,OAAA,GAAA,UAAA,CAAA,IAAA,OAAA,UAAA,CAAA,EAAJ,CAAA,EAElB,OAAOA,GAAe,WACzBA,EAAa,CAACA,CAAD,GAIdA,EAAaA,EAAW+D,IAAI,SAAC/D,EAAe,CAC3C,OAAQA,EAAR,CACC,IAAK,OACL,IAAK,YACJ,MAAO,OACR,QACC,OAAOA,CALT,CAOA,CARY,EAYbA,EAAaA,EAAW3B,OAAO,MAAlB,EAIb,QADM2F,EAAazF,GAAc,KAAKJ,MAAN,EAChC8F,EAAAC,GAA0BlE,CAA1B,EAAAmE,EAAA,EAAAA,EAAAF,EAAA,GAAA,MAAsC,CAAA,IAA3BG,EAA2BD,EAAA,MACrC,GAAIH,EAAWI,CAAD,EACb,MAAO,CACNpE,WAAYoE,EACZrE,OAAQiE,EAAWI,CAAD,CAFZ,CAKR,CACD,UAMF,IAAIC,GAAgB,KAMpBC,EAAQC,iBAAmB,UAAA,CAAA,OAAMF,EAAN,EAM3BC,EAAQE,iBAAmB,SAACC,EAAD,CAAA,OAAYJ,GAAgBI,CAA5B,EAM3BH,EAAQI,iBAAmB,SAASC,EAAY,CAC/C,GAAIC,GACH,OAAOC,QAAQC,MAAM,8HAAd,EAERF,GAAgC,GAChCN,EAAQE,iBAAiBG,EAAWF,MAApC,EACAH,EAAQS,UAAUJ,CAAlB,CACA,EAED,IAAIC,GAMJN,EAAQS,UAAY,SAASJ,EAAY,CACxCK,GAAcL,CAAD,EACbM,EAA2BF,UAAUJ,CAArC,CACA,EAQDL,EAAQG,OAASH,EAAQS,UAQzBT,EAAQY,UAAY,SAACT,EAAQU,EAAMC,EAAW,CAC7C,IAAIT,EAAaU,GAAcZ,CAAD,EACzBE,IACJK,GAAc,CACbP,OAAAA,CADa,CAAD,EAGbE,EAAaU,GAAcZ,CAAD,GAG3BE,EAAWQ,CAAD,EAASC,CACnB,EAGD,SAASE,GAAaC,EAAO,CAC5B,GAAIA,EAAMC,cAAgBC,MAAQC,GAAaH,CAAD,EAC7C,OAAOA,EAAMI,QAAN,EAGR,GAAI,OAAOJ,GAAU,SACpB,OAAOA,EAKR,MAAM,IAAIK,MAAJ,8CAAA,OAAAC,GAA+DN,CAA/D,EAAA,IAAA,EAAA,OAAyEA,CAAzE,CAAA,CACN,CAID,SAASG,GAAaI,EAAQ,CAC7B,OAAOD,GAAOC,CAAP,IAAkB,UAAY,OAAOA,EAAOH,SAAY,UAC/D,CAGD,SAASI,GAAgCC,EAAcZ,EAAQa,EAAU,CAGxE,IAAIC,EAAQC,OAAOC,KAAKhB,CAAZ,EAMZ,OAAIa,GACHC,EAAMG,KAAK,KAAX,EAKGL,IACHE,EAAQF,EAAaM,OAAO,SAAAC,EAAI,CAAA,OAAIA,IAAS,OAASL,EAAMM,QAAQD,CAAd,GAAuB,CAA7C,CAAxB,GAGFL,CACP,CAED,SAASO,GAAYrB,EAAQsB,EAAWC,EAAYC,EAAQ,CAC3D,IAAMX,EAAWb,EAAOyB,KAAQH,GAAaA,EAAUG,IAEvD,GAAIZ,EAEH,OAAI,OAAOA,GAAa,SAChBA,EAOJW,EACIX,EAASW,OAETX,EAASa,KAIlB,GAAIH,GAAcA,EAAWI,QAAUJ,EAAWI,OAAOC,QACxD,OAAOL,EAAWI,OAAOC,OAE1B,CAED,SAASC,GAAQC,EAAU,CAC1B,OAAO,OAAOA,GAAa,UAAYC,GAAcD,CAAD,CACpD,CA5kBD,IAAOE,GAAQ,CACd,OAAU,KACV,KAAQ,CACP,KAAQ,CACP,SAAY,YACZ,QAAW,YACX,KAAQ,YACR,KAAQ,CACP,IAAO,eACP,MAAS,eACV,EACA,OAAU,CACT,IAAO,cACP,MAAS,cACV,CACD,EACA,QAAW,CACV,SAAY,eACZ,QAAW,eACX,KAAQ,eACR,KAAQ,CACP,IAAO,kBACP,MAAS,kBACV,EACA,OAAU,CACT,IAAO,iBACP,MAAS,iBACV,CACD,EACA,MAAS,CACR,SAAY,aACZ,QAAW,aACX,KAAQ,aACR,KAAQ,CACP,IAAO,gBACP,MAAS,gBACV,EACA,OAAU,CACT,IAAO,eACP,MAAS,eACV,CACD,EACA,KAAQ,CACP,SAAY,YACZ,QAAW,YACX,KAAQ,YACR,KAAQ,CACP,IAAO,eACP,MAAS,eACV,EACA,OAAU,CACT,IAAO,cACP,MAAS,cACV,CACD,EACA,IAAO,CACN,SAAY,YACZ,QAAW,QACX,KAAQ,WACR,KAAQ,CACP,IAAO,cACP,MAAS,cACV,EACA,OAAU,CACT,IAAO,aACP,MAAS,aACV,CACD,EACA,KAAQ,CACP,QAAW,YACX,KAAQ,CACP,IAAO,eACP,MAAS,eACV,EACA,OAAU,CACT,IAAO,cACP,MAAS,cACV,CACD,EACA,OAAU,CACT,QAAW,cACX,KAAQ,CACP,IAAO,iBACP,MAAS,iBACV,EACA,OAAU,CACT,IAAO,gBACP,MAAS,gBACV,CACD,EACA,OAAU,CACT,QAAW,MACX,KAAQ,CACP,IAAO,iBACP,MAAS,iBACV,EACA,OAAU,CACT,IAAO,gBACP,MAAS,gBACV,CACD,CACD,EACA,MAAS,CACR,KAAQ,CACP,SAAY,WACZ,QAAW,WACX,KAAQ,WACR,KAAQ,cACR,OAAU,YACX,EACA,QAAW,CACV,SAAY,YACZ,QAAW,YACX,KAAQ,YACR,KAAQ,CACP,IAAO,eACP,MAAS,eACV,EACA,OAAU,CACT,IAAO,cACP,MAAS,cACV,CACD,EACA,MAAS,CACR,SAAY,WACZ,QAAW,WACX,KAAQ,WACR,KAAQ,cACR,OAAU,YACX,EACA,KAAQ,CACP,SAAY,WACZ,QAAW,WACX,KAAQ,WACR,KAAQ,cACR,OAAU,YACX,EACA,IAAO,CACN,SAAY,YACZ,QAAW,QACX,KAAQ,WACR,KAAQ,CACP,IAAO,cACP,MAAS,cACV,EACA,OAAU,CACT,IAAO,aACP,MAAS,aACV,CACD,EACA,KAAQ,CACP,QAAW,YACX,KAAQ,cACR,OAAU,YACX,EACA,OAAU,CACT,QAAW,cACX,KAAQ,eACR,OAAU,aACX,EACA,OAAU,CACT,QAAW,MACX,KAAQ,eACR,OAAU,aACX,CACD,EACA,OAAU,CACT,KAAQ,CACP,SAAY,WACZ,QAAW,WACX,KAAQ,WACR,KAAQ,WACR,OAAU,SACX,EACA,QAAW,CACV,SAAY,YACZ,QAAW,YACX,KAAQ,YACR,KAAQ,WACR,OAAU,SACX,EACA,MAAS,CACR,SAAY,WACZ,QAAW,WACX,KAAQ,WACR,KAAQ,YACR,OAAU,UACX,EACA,KAAQ,CACP,SAAY,WACZ,QAAW,WACX,KAAQ,WACR,KAAQ,WACR,OAAU,SACX,EACA,IAAO,CACN,SAAY,YACZ,QAAW,QACX,KAAQ,WACR,KAAQ,WACR,OAAU,SACX,EACA,KAAQ,CACP,QAAW,YACX,KAAQ,WACR,OAAU,SACX,EACA,OAAU,CACT,QAAW,cACX,KAAQ,WACR,OAAU,SACX,EACA,OAAU,CACT,QAAW,MACX,KAAQ,WACR,OAAU,SACX,CACD,EACA,IAAO,CACN,IAAO,CACN,QAAW,MACX,OAAU,cACV,KAAQ,UACT,CACD,EACA,KAAQ,CACP,KAAQ,QACR,MAAS,QACT,KAAQ,QACR,IAAO,OACP,KAAQ,OACR,OAAU,OACV,OAAU,OACV,IAAO,KACR,EACA,aAAc,CACb,KAAQ,UACR,MAAS,UACT,KAAQ,UACR,IAAO,CACN,IAAO,UACP,MAAS,UACV,EACA,KAAQ,UACR,OAAU,WACV,OAAU,UACX,EACA,YAAa,CACZ,KAAQ,CACP,IAAO,WACP,MAAS,WACV,EACA,MAAS,CACR,IAAO,YACP,MAAS,YACV,EACA,KAAQ,CACP,IAAO,WACP,MAAS,WACV,EACA,IAAO,CACN,IAAO,UACP,MAAS,UACV,EACA,KAAQ,CACP,IAAO,WACP,MAAS,WACV,EACA,OAAU,CACT,IAAO,aACP,MAAS,aACV,EACA,OAAU,CACT,IAAO,aACP,MAAS,aACV,CACD,CACD,E/EnFI,IAAAC,GAAA,6BA3LJC,EAAQ,iBAAiBC,EAAE,EAC3B,IAAMC,GAAU,IAAIF,EAAQ,OAAO,EAqB7BG,GAAiB,IAAI,KAAK,eAAe,OAAW,CACxD,UAAW,OACX,UAAW,SACX,OAAQ,IAAC,uBAAiC,EAAE,MAC9C,CAAC,EAEKC,GAAgC,CACpC,CACE,GAAI,QACJ,MAAO,aACP,MAAO,GACP,OAASC,GAASF,GAAe,OAAOE,CAAI,CAC9C,EACA,CACE,GAAI,UACJ,MAAO,sBACP,MAAO,GACP,OAASA,GAASA,EAAK,QAAQ,EAAE,SAAS,CAC5C,EACA,CACE,GAAI,SACJ,MAAO,2BACP,MAAO,GACP,OAASA,GAAS,KAAK,MAAMA,EAAK,QAAQ,EAAI,GAAI,EAAE,SAAS,CAC/D,EACA,CACE,GAAI,MACJ,MAAO,WACP,MAAO,GACP,OAASA,GAASA,EAAK,YAAY,CACrC,CACF,EAEA,SAASC,GAAMC,EAAe,CAC5B,MAAO,iBAAiB,KAAKA,CAAK,CACpC,CAEA,SAASC,GAAyBD,EAAwC,CACxE,IAAME,EAAa,IAAI,KAAKF,CAAK,EAC3BG,EAAQ,uCAAuC,KAAKH,CAAK,EAC/D,GAAI,CAAC,MAAME,EAAW,QAAQ,CAAC,GAAKC,EAClC,MAAO,CACL,KAAMD,EACN,MAAO,WACP,MAAO,EACT,EAIF,GAD8B,WAAW,KAAKF,CAAK,EAEjD,MAAO,CACL,KAAM,IAAI,KAAK,OAAO,OAAOA,CAAK,EAAI,QAAU,CAAC,EACjD,MAAO,sBACP,MAAO,EACT,EAGF,GAD+B,WAAW,KAAKA,CAAK,EAElD,MAAO,CACL,KAAM,IAAI,KAAK,OAAO,OAAOA,CAAK,EAAI,KAAM,CAAC,EAC7C,MAAO,2BACP,MAAO,EACT,EAGF,IAAII,EAAO,GACPL,GAAMC,CAAK,IACbI,EAAO,IAGT,IAAIC,EAAY,SAASL,EAAOI,CAAI,EAEpC,GAAI,CAAC,MAAMC,CAAS,GAAKA,EAAY,IAAS,CAC5C,IAAIC,EAAU,GACVD,GAAa,GAAK,KACpBC,EAAU,GACVD,GAAa,KAEf,IAAMP,EAAO,IAAI,KAAKO,GAAaL,CAAK,EACxC,GAAI,CAAC,MAAMF,EAAK,QAAQ,CAAC,EACvB,MAAO,CACL,KAAAA,EACA,MAAOQ,EAAU,2BAA6B,sBAC9C,MAAO,EACT,CAEJ,CACF,CAEA,SAASC,GAAWP,EAA8B,CAChD,GAAI,CAACA,EACH,MAAO,CACL,CACE,MAAO,MACP,KAAM,IAAI,IACZ,EACA,CACE,MAAO,QACP,KAAM,IAAI,KAAK,EAAE,SAAS,EAAG,EAAG,EAAG,CAAC,CACtC,EACA,CACE,MAAO,WACP,KAAM,IAAI,KAAK,EAAE,SAAS,EAAG,EAAG,EAAG,CAAC,EAAI,GAAK,GAAK,GAAK,GACzD,EACA,CACE,MAAO,YACP,KAAM,IAAI,KAAK,EAAE,SAAS,EAAG,EAAG,EAAG,CAAC,EAAI,GAAK,GAAK,GAAK,GACzD,CACF,EAAE,IAAKQ,IAAO,CACZ,MAAOA,EAAE,MACT,MAAO,GACP,KAAM,IAAI,KAAKA,EAAE,IAAI,CACvB,EAAE,EAGJR,EAAQA,EAAM,KAAK,EAEnB,IAAMS,EAAUR,GAAyBD,CAAK,EACxCU,EAAeC,GAAMX,CAAK,EAAE,IAAKQ,IAAO,CAAE,KAAMA,EAAE,KAAK,EAAG,MAAO,GAAM,MAAOA,EAAE,IAAK,EAAE,EAE7F,MAAO,CAACC,EAAS,GAAGC,CAAK,EAAE,OAAO,OAAO,EAAE,OAAO,CAACF,EAAG,EAAGI,IAAQ,CAC/D,IAAMd,EAAOU,EAAE,KAAK,YAAY,EAChC,OAAOI,EAAI,UAAWC,GAAMA,EAAE,KAAK,YAAY,IAAMf,CAAI,IAAM,CACjE,CAAC,CACH,CAEA,SAASgB,GAAKC,EAAc,CAC1B,GAAM,CAAE,WAAAC,CAAW,KAAI,uBAAiC,EAEpD,CAAC,OAAQ,MAAM,EAAE,SAASA,CAAU,GACtC,YAAU,KAAKD,CAAI,EAEjB,CAAC,QAAS,MAAM,EAAE,SAASC,CAAU,GACvC,YAAU,MAAMD,CAAI,CAExB,CAEA,SAASE,GAAiB,CAAE,MAAAP,CAAM,EAAgD,CAChF,GAAM,CAAE,cAAAQ,CAAc,KAAI,uBAAiC,EAE3D,OAAOrB,GAAa,KAAK,CAACsB,EAAGC,IAAM,CACjC,IAAMC,EAAeF,EAAE,QAAUT,EAC3BY,EAAeF,EAAE,QAAUV,EAGjC,GAAIW,GAAgB,CAACC,EAAc,MAAO,GAC1C,GAAI,CAACD,GAAgBC,EAAc,MAAO,GAE1C,IAAMC,EAAeJ,EAAE,KAAOD,EACxBM,EAAeJ,EAAE,KAAOF,EAG9B,OAAIK,GAAgB,CAACC,EAAqB,GACtC,CAACD,GAAgBC,EAAqB,EAEnC,CACT,CAAC,CACH,CAEe,SAARC,IAA2B,CAChC,GAAM,CAACC,EAAYC,CAAa,KAAI,aAAS,EAAE,EAEzCC,KAAU,YAAQ,IAAMrB,GAAWmB,CAAU,EAAG,CAACA,CAAU,CAAC,EAElE,SACE,SAAC,QACC,WAAYA,EACZ,mBAAoBC,EACpB,qBAAqB,yCAErB,qBAAC,OAAK,UAAL,CAAe,MAAM,eAAe,YAAY,0DAA0D,EAC1GC,EAAQ,IAAI,CAAC,CAAE,KAAA9B,EAAM,MAAA+B,EAAO,MAAAnB,CAAM,OACjC,QAAC,OAAK,KAAL,CAEC,MAAOd,GAAe,OAAOE,CAAI,EACjC,SAAU,GAAG+B,CAAK,MAAMlC,GAAQ,OAAOG,CAAI,CAAC,GAC5C,WACE,QAAC,eACE,SAAAmB,GAAiB,CAAE,MAAAP,CAAM,CAAC,EAAE,IAAI,CAAC,CAAE,GAAAoB,EAAI,MAAAC,EAAO,OAAAC,CAAO,OACpD,QAAC,UAAgB,MAAO,WAAWD,CAAK,GAAI,SAAU,IAAMjB,GAAKkB,EAAOlC,CAAI,CAAC,GAAhEgC,CAAmE,CACjF,EACH,GARGhC,EAAK,YAAY,CAUxB,CACD,GACH,CAEJ",
  "names": ["require_dayjs_min", "__commonJSMin", "exports", "module", "t", "n", "r", "s", "u", "o", "f", "h", "c", "d", "l", "$", "y", "M", "e", "m", "v", "i", "g", "D", "p", "_", "S", "a", "w", "O", "T", "require_quarterOfYear", "__commonJSMin", "exports", "module", "t", "n", "e", "i", "r", "s", "u", "o", "index_exports", "__export", "Command", "__toCommonJS", "import_api", "repeatedTimeunitPattern", "prefix", "singleTimeunitPattern", "singleTimeunitPatternNoCapture", "extractTerms", "dictionary", "keys", "matchAnyPattern", "a", "b", "import_dayjs", "findMostLikelyADYear", "yearNumber", "findYearClosestToRef", "refDate", "day", "month", "refMoment", "dayjs", "dateMoment", "nextYear", "lastYear", "WEEKDAY_DICTIONARY", "FULL_MONTH_NAME_DICTIONARY", "MONTH_DICTIONARY", "INTEGER_WORD_DICTIONARY", "ORDINAL_WORD_DICTIONARY", "TIME_UNIT_DICTIONARY_NO_ABBR", "TIME_UNIT_DICTIONARY", "NUMBER_PATTERN", "matchAnyPattern", "parseNumberPattern", "match", "num", "ORDINAL_NUMBER_PATTERN", "parseOrdinalNumberPattern", "YEAR_PATTERN", "parseYear", "rawYearNumber", "findMostLikelyADYear", "SINGLE_TIME_UNIT_PATTERN", "SINGLE_TIME_UNIT_REGEX", "SINGLE_TIME_UNIT_NO_ABBR_PATTERN", "TIME_UNITS_PATTERN", "repeatedTimeunitPattern", "TIME_UNITS_NO_ABBR_PATTERN", "parseTimeUnits", "timeunitText", "fragments", "remainingText", "collectDateTimeFragment", "unit", "import_quarterOfYear", "import_dayjs", "implyTheNextDay", "component", "targetDayJs", "implySimilarDate", "implySimilarTime", "assignSimilarDate", "assignSimilarTime", "Meridiem", "import_dayjs", "TIMEZONE_ABBR_MAP", "year", "getLastWeekdayOfMonth", "Month", "Weekday", "getNthWeekdayOfMonth", "month", "weekday", "hour", "dayOfMonth", "i", "oneIndexedWeekday", "date", "firstWeekdayNextMonth", "dayDiff", "toTimezoneOffset", "timezoneInput", "timezoneOverrides", "matchedTimezone", "dayjs", "dayjs", "quarterOfYear", "ReferenceWithTimezone", "input", "toTimezoneOffset", "date", "overrideTimezoneOffset", "currentTimezoneOffset", "targetTimezoneOffset", "ParsingComponents", "_ParsingComponents", "reference", "knownComponents", "key", "refDayJs", "component", "value", "timezoneAdjustment", "fragments", "components", "assignSimilarTime", "assignSimilarDate", "implySimilarTime", "ParsingResult", "_ParsingResult", "index", "text", "start", "end", "result", "AbstractParserWithWordBoundaryChecking", "context", "innerPattern", "match", "header", "PATTERN_WITHOUT_PREFIX", "TIME_UNITS_PATTERN", "PATTERN_WITH_PREFIX", "PATTERN_WITH_PREFIX_STRICT", "TIME_UNITS_NO_ABBR_PATTERN", "ENTimeUnitWithinFormatParser", "AbstractParserWithWordBoundaryChecking", "strictMode", "context", "match", "timeUnits", "parseTimeUnits", "ParsingComponents", "PATTERN", "ORDINAL_NUMBER_PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "YEAR_PATTERN", "DATE_GROUP", "DATE_TO_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "ENMonthNameLittleEndianParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "result", "month", "day", "parseOrdinalNumberPattern", "yearNumber", "parseYear", "year", "findYearClosestToRef", "endDate", "PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "ORDINAL_NUMBER_PATTERN", "YEAR_PATTERN", "MONTH_NAME_GROUP", "DATE_GROUP", "DATE_TO_GROUP", "YEAR_GROUP", "ENMonthNameMiddleEndianParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "month", "day", "parseOrdinalNumberPattern", "components", "year", "parseYear", "findYearClosestToRef", "endDate", "result", "PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "YEAR_PATTERN", "PREFIX_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "ENMonthNameParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "monthName", "FULL_MONTH_NAME_DICTIONARY", "result", "month", "year", "parseYear", "findYearClosestToRef", "PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "YEAR_NUMBER_GROUP", "MONTH_NAME_GROUP", "MONTH_NUMBER_GROUP", "DATE_NUMBER_GROUP", "ENCasualYearMonthDayParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "month", "year", "PATTERN", "MONTH_GROUP", "YEAR_GROUP", "ENSlashMonthFormatParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "year", "month", "primaryTimePattern", "leftBoundary", "primaryPrefix", "primarySuffix", "flags", "followingTimePatten", "followingPhase", "followingSuffix", "HOUR_GROUP", "MINUTE_GROUP", "SECOND_GROUP", "MILLI_SECOND_GROUP", "AM_PM_HOUR_GROUP", "AbstractTimeExpressionParser", "strictMode", "context", "match", "startComponents", "index", "text", "result", "remainingText", "followingMatch", "strict", "components", "minute", "meridiem", "hour", "Meridiem", "ampm", "millisecond", "second", "endingWithNumbers", "endingNumbers", "startingNumbers", "endingNumberVal", "startingNumberVal", "ENTimeExpressionParser", "AbstractTimeExpressionParser", "strictMode", "context", "match", "components", "hour", "Meridiem", "reverseTimeUnits", "timeUnits", "reversed", "key", "addImpliedTimeUnits", "components", "output", "date", "PATTERN", "TIME_UNITS_PATTERN", "STRICT_PATTERN", "TIME_UNITS_NO_ABBR_PATTERN", "ENTimeUnitAgoFormatParser", "AbstractParserWithWordBoundaryChecking", "strictMode", "context", "match", "timeUnits", "parseTimeUnits", "outputTimeUnits", "reverseTimeUnits", "ParsingComponents", "PATTERN", "TIME_UNITS_PATTERN", "STRICT_PATTERN", "TIME_UNITS_NO_ABBR_PATTERN", "GROUP_NUM_TIMEUNITS", "ENTimeUnitLaterFormatParser", "AbstractParserWithWordBoundaryChecking", "strictMode", "context", "match", "fragments", "parseTimeUnits", "ParsingComponents", "Filter", "context", "results", "r", "MergingRefiner", "mergedResults", "curResult", "nextResult", "i", "textBetween", "left", "right", "mergedResult", "AbstractMergeDateRangeRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "fromResult", "toResult", "key", "fromMoment", "toMoment", "result", "ENMergeDateRangeRefiner", "AbstractMergeDateRangeRefiner", "mergeDateTimeResult", "dateResult", "timeResult", "result", "beginDate", "beginTime", "mergeDateTimeComponent", "endDate", "endTime", "endDateTime", "nextDayJs", "assignSimilarDate", "implySimilarDate", "dateComponent", "timeComponent", "dateTimeComponent", "Meridiem", "AbstractMergeDateTimeRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "result", "mergeDateTimeResult", "ENMergeDateTimeRefiner", "AbstractMergeDateTimeRefiner", "TIMEZONE_NAME_PATTERN", "ExtractTimezoneAbbrRefiner", "timezoneOverrides", "context", "results", "result", "suffix", "match", "timezoneAbbr", "refDate", "tzOverrides", "extractedTimezoneOffset", "toTimezoneOffset", "currentTimezoneOffset", "TIMEZONE_OFFSET_PATTERN", "TIMEZONE_OFFSET_SIGN_GROUP", "TIMEZONE_OFFSET_HOUR_OFFSET_GROUP", "TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP", "ExtractTimezoneOffsetRefiner", "context", "results", "result", "suffix", "match", "hourOffset", "minuteOffset", "timezoneOffset", "OverlapRemovalRefiner", "context", "results", "filteredResults", "prevResult", "i", "result", "import_dayjs", "ForwardDateRefiner", "context", "results", "result", "refMoment", "dayjs", "implySimilarDate", "i", "UnlikelyFormatFilter", "Filter", "strictMode", "context", "result", "PATTERN", "YEAR_NUMBER_GROUP", "MONTH_NUMBER_GROUP", "DATE_NUMBER_GROUP", "HOUR_NUMBER_GROUP", "MINUTE_NUMBER_GROUP", "SECOND_NUMBER_GROUP", "MILLISECOND_NUMBER_GROUP", "TZD_HOUR_OFFSET_GROUP", "TZD_MINUTE_OFFSET_GROUP", "ISOFormatParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "components", "hourOffset", "minuteOffset", "offset", "MergeWeekdayComponentRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "newResult", "includeCommonConfiguration", "configuration", "strictMode", "ISOFormatParser", "MergeWeekdayComponentRefiner", "ExtractTimezoneOffsetRefiner", "OverlapRemovalRefiner", "ExtractTimezoneAbbrRefiner", "ForwardDateRefiner", "UnlikelyFormatFilter", "import_dayjs", "import_dayjs", "now", "reference", "targetDate", "dayjs", "component", "ParsingComponents", "assignSimilarDate", "assignSimilarTime", "today", "implySimilarTime", "yesterday", "theDayBefore", "numDay", "theDayAfter", "tomorrow", "nDays", "tonight", "implyHour", "Meridiem", "evening", "reference", "implyHour", "component", "ParsingComponents", "Meridiem", "midnight", "reference", "component", "ParsingComponents", "targetDate", "dayjs", "implyTheNextDay", "morning", "implyHour", "Meridiem", "afternoon", "noon", "PATTERN", "ENCasualDateParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "targetDate", "dayjs", "lowerText", "component", "now", "today", "yesterday", "tomorrow", "tonight", "assignSimilarDate", "PATTERN", "ENCasualTimeParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "afternoon", "evening", "midnight", "morning", "noon", "createParsingComponentsAtWeekday", "reference", "weekday", "modifier", "refDate", "daysToWeekday", "getDaysToWeekday", "components", "ParsingComponents", "addImpliedTimeUnits", "refWeekday", "getDaysForwardToWeekday", "getBackwardDaysToWeekday", "Weekday", "getDaysToWeekdayClosest", "backward", "forward", "forwardCount", "backwardCount", "PATTERN", "matchAnyPattern", "WEEKDAY_DICTIONARY", "PREFIX_GROUP", "WEEKDAY_GROUP", "POSTFIX_GROUP", "ENWeekdayParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "dayOfWeek", "weekday", "prefix", "postfix", "modifierWord", "modifier", "createParsingComponentsAtWeekday", "import_dayjs", "PATTERN", "matchAnyPattern", "TIME_UNIT_DICTIONARY", "MODIFIER_WORD_GROUP", "RELATIVE_WORD_GROUP", "ENRelativeDateFormatParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "modifier", "unitWord", "timeunit", "timeUnits", "ParsingComponents", "components", "date", "dayjs", "Chrono", "_Chrono", "configuration", "createCasualConfiguration", "text", "referenceDate", "option", "results", "context", "ParsingContext", "parser", "parsedResults", "a", "b", "refiner", "pattern", "originalText", "remainingText", "match", "index", "result", "parsedResult", "ParsingResult", "ParsingComponents", "refDate", "ReferenceWithTimezone", "components", "textOrEndIndex", "startComponents", "endComponents", "start", "end", "block", "PATTERN", "OPENING_GROUP", "ENDING_GROUP", "FIRST_NUMBERS_GROUP", "SECOND_NUMBERS_GROUP", "YEAR_GROUP", "SlashDateFormatParser", "littleEndian", "context", "match", "previousChar", "index", "text", "result", "month", "day", "rawYearNumber", "year", "findMostLikelyADYear", "findYearClosestToRef", "PATTERN", "TIME_UNITS_PATTERN", "PATTERN_NO_ABBR", "TIME_UNITS_NO_ABBR_PATTERN", "ENTimeUnitCasualRelativeFormatParser", "AbstractParserWithWordBoundaryChecking", "allowAbbreviations", "context", "match", "prefix", "timeUnits", "parseTimeUnits", "reverseTimeUnits", "ParsingComponents", "hasImpliedEarlierReferenceDate", "result", "hasImpliedLaterReferenceDate", "ENMergeRelativeDateRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "timeUnits", "parseTimeUnits", "reverseTimeUnits", "components", "ParsingComponents", "ReferenceWithTimezone", "ParsingResult", "casual", "Chrono", "createCasualConfiguration", "strict", "createConfiguration", "GB", "createCasualConfiguration", "littleEndian", "option", "createConfiguration", "ENCasualDateParser", "ENCasualTimeParser", "ENMonthNameParser", "ENRelativeDateFormatParser", "ENTimeUnitCasualRelativeFormatParser", "strictMode", "includeCommonConfiguration", "SlashDateFormatParser", "ENTimeUnitWithinFormatParser", "ENMonthNameLittleEndianParser", "ENMonthNameMiddleEndianParser", "ENWeekdayParser", "ENCasualYearMonthDayParser", "ENSlashMonthFormatParser", "ENTimeExpressionParser", "ENTimeUnitAgoFormatParser", "ENTimeUnitLaterFormatParser", "ENMergeRelativeDateRefiner", "ENMergeDateTimeRefiner", "ENMergeDateRangeRefiner", "Meridiem", "Weekday", "Month", "casual", "parse", "text", "ref", "option", "import_react", "defaultLocale", "localesData", "lowercaseLocaleLookup", "getDefaultLocale", "setDefaultLocale", "locale", "getLocaleData", "addLocaleData", "localeData", "Error", "toLowerCase", "resolveLocale", "resolveLocale", "locale", "options", "localeMatcher", "resolveLocaleLookup", "RangeError", "resolvedLocale", "resolveLocaleForData", "parts", "split", "length", "pop", "join", "$", "af", "n", "am", "ar", "s", "String", "split", "t0", "Number", "n100", "slice", "ast", "v0", "be", "n10", "br", "n1000000", "bs", "i", "f", "i10", "i100", "f10", "f100", "ca", "i1000000", "ceb", "cs", "cy", "da", "dsb", "dz", "es", "ff", "fr", "ga", "gd", "he", "is", "t", "replace", "ksh", "lt", "lv", "v", "length", "mk", "mt", "pa", "pl", "pt", "ro", "ru", "se", "si", "sl", "as", "az", "bg", "bn", "brx", "ce", "chr", "de", "ee", "el", "en", "et", "eu", "fa", "fi", "fil", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hr", "hsb", "hu", "hy", "ia", "id", "ig", "it", "ja", "jgo", "jv", "ka", "kea", "kk", "kl", "km", "kn", "ko", "ks", "ku", "ky", "lb", "lkt", "lo", "ml", "mn", "mr", "ms", "my", "nb", "ne", "nl", "nn", "no", "or", "pcm", "ps", "rm", "sah", "sc", "sd", "sk", "so", "sq", "sr", "su", "sv", "sw", "ta", "te", "th", "ti", "tk", "to", "tr", "ug", "uk", "ur", "uz", "vi", "wae", "wo", "xh", "yi", "yo", "yue", "zh", "zu", "PluralRuleFunctions_default", "getPluralRulesLocale", "locale", "getLanguageFromLanguageTag", "LANGUAGE_REG_EXP", "languageTag", "match", "TypeError", "PluralRules", "locale", "options", "_classCallCheck", "locales", "supportedLocalesOf", "length", "RangeError", "type", "$", "PluralRuleFunctions", "getPluralRulesLocale", "number", "filter", "UNITS", "NUMERIC_VALUES", "STYLE_VALUES", "LOCALE_MATCHER_VALUES", "RelativeTimeFormat", "locales", "options", "_classCallCheck", "numeric", "style", "localeMatcher", "undefined", "indexOf", "RangeError", "push", "getDefaultLocale", "locale", "supportedLocalesOf", "Error", "PluralRules", "length", "pluralRules", "console", "warn", "Intl", "NumberFormat", "numberFormat", "numberingSystem", "resolvedOptions", "resolveLocale", "_parseFormatArgs", "parseFormatArgs", "arguments", "_parseFormatArgs2", "_slicedToArray", "number", "unit", "getRule", "replace", "formatNumber", "Math", "abs", "_parseFormatArgs3", "_parseFormatArgs4", "rule", "valueIndex", "type", "value", "parts", "slice", "concat", "formatNumberToParts", "map", "part", "_objectSpread", "unitMessages", "getLocaleData", "message", "current", "pluralizedMessages", "isNegative", "quantifier", "select", "other", "format", "String", "formatToParts", "RelativeTimeFormat", "supportedLocalesOf", "locales", "options", "Array", "isArray", "TypeError", "filter", "locale", "resolveLocale", "addLocale", "addLocaleData", "setDefaultLocale", "getDefaultLocale", "PluralRules", "UNIT_ERROR", "parseUnit", "unit", "_typeof", "RangeError", "length", "slice", "UNITS", "indexOf", "NUMBER_ERROR", "parseNumber", "value", "Number", "isFinite", "isNegativeZero", "number", "isNegative", "parseFormatArgs", "args", "Cache", "_classCallCheck", "cache", "_len", "keys", "_key", "_i", "_keys", "key", "_typeof", "_len2", "_key2", "value", "pop", "lastKey", "_i2", "_keys2", "chooseLocale", "locales", "isLocaleDataAvailable", "_iterator", "_createForOfIteratorHelperLoose", "_step", "locale", "parts", "split", "length", "pop", "join", "Error", "intlDateTimeFormatSupported", "isIntlAvailable", "Intl", "_typeof", "DateTimeFormat", "isStyleObject", "object", "isObject", "Array", "isArray", "steps", "gradation", "flavour", "labels", "units", "custom", "OBJECT_CONSTRUCTOR", "constructor", "_typeof", "undefined", "minute", "hour", "day", "week", "month", "year", "getSecondsInUnit", "unit", "getStepDenominator", "step", "factor", "undefined", "getSecondsInUnit", "unit", "formatAs", "getRoundFunction", "round", "Math", "floor", "getDiffRatioToNextRoundedNumber", "getStepMinTime", "step", "_ref", "prevStep", "timestamp", "now", "future", "round", "minTime", "id", "unit", "undefined", "threshold", "_typeof", "getMinTimeForUnit", "toUnit", "fromUnit", "formatAs", "test", "console", "warn", "JSON", "stringify", "_ref2", "toUnitAmount", "getSecondsInUnit", "fromUnitAmount", "getDiffRatioToNextRoundedNumber", "getStep", "steps", "secondsPassed", "_ref", "now", "future", "round", "units", "getNextStep", "filterStepsByUnits", "step", "_getStep", "prevStep", "indexOf", "nextStep", "undefined", "_ref2", "length", "i", "getStepIndex", "granularity", "secondsPassedGranular", "getRoundFunction", "Math", "abs", "getStepDenominator", "options", "minTime", "getStepMinTime", "_objectSpread", "timestamp", "filter", "_ref3", "unit", "formatAs", "getTimeToNextUpdateForUnit", "unit", "timestamp", "_ref", "now", "round", "getSecondsInUnit", "unitDenominator", "future", "preciseAmount", "Math", "abs", "roundedAmount", "getRoundFunction", "getDiffToPreviousRoundedNumber", "getDiffToNextRoundedNumber", "getDiffRatioToNextRoundedNumber", "YEAR", "INFINITY", "getTimeToNextUpdate", "date", "step", "_ref", "prevStep", "nextStep", "now", "future", "round", "timestamp", "getTime", "getTimeToNextUpdateForUnit", "unit", "_getTimeToNextUpdateForUnit", "timeToStepChange", "getTimeToStepChange", "undefined", "timeToNextUpdate", "getRoundFunction", "formatAs", "Math", "min", "getStepChangesAt", "currentOrNextStep", "_ref2", "minTime", "getStepMinTime", "_ref3", "stepChangesAt", "localesData", "getLocaleData", "locale", "addLocaleData", "localeData", "Error", "round_default", "formatAs", "round_default", "steps", "round", "labels", "roundMinute_default", "_objectSpread", "round", "steps", "filter", "step", "formatAs", "approximate_default", "factor", "unit", "threshold", "threshold_for_now", "minute", "granularity", "hour", "threshold_for_minute", "day", "week", "month", "year", "approximate_default", "gradation", "approximate", "flavour", "units", "approximateTime_default", "gradation", "approximate", "flavour", "units", "getDate", "value", "Date", "steps", "formatAs", "formatters", "monthAndDay", "minTime", "timestamp", "_ref", "future", "getMinTimeForUnit", "format", "value", "locale", "dayMonth", "Intl", "DateTimeFormat", "month", "day", "getDate", "yearMonthAndDay", "_ref2", "maxFittingNow", "Date", "getFullYear", "getTime", "minFittingNow", "dayMonthYear", "year", "intlDateTimeFormatSupported", "push", "twitter_default", "labels", "twitterNow_default", "_objectSpread", "twitter", "steps", "formatAs", "concat", "twitterMinute_default", "_objectSpread", "twitter", "steps", "filter", "step", "formatAs", "twitterMinuteNow_default", "_objectSpread", "twitterMinute", "steps", "formatAs", "concat", "twitterFirstMinute_default", "_objectSpread", "twitter", "steps", "filter", "step", "formatAs", "map", "minTime", "minute", "mini_default", "steps", "formatAs", "labels", "miniNow_default", "_objectSpread", "mini", "steps", "formatAs", "concat", "miniMinute_default", "_objectSpread", "mini", "steps", "filter", "step", "formatAs", "miniMinuteNow_default", "_objectSpread", "miniMinute", "steps", "formatAs", "concat", "getStyleByName", "style", "round", "roundMinute", "approximate", "approximateTime", "mini", "miniNow", "miniMinute", "miniMinuteNow", "twitter", "twitterNow", "twitterMinute", "twitterMinuteNow", "twitterFirstMinute", "TimeAgo", "locales", "_ref", "polyfill", "_classCallCheck", "locale", "chooseLocale", "concat", "getDefaultLocale", "getLocaleData", "Intl", "NumberFormat", "numberFormat", "IntlRelativeTimeFormat", "RelativeTimeFormat", "IntlPluralRules", "PluralRules", "RelativeTimeFormatPolyfill", "relativeTimeFormatCache", "Cache", "pluralRulesCache", "input", "style", "options", "isStyle", "undefined", "defaultStyle", "getStyleByName", "timestamp", "getTimestamp", "_this$getLabels", "getLabels", "flavour", "labels", "labelsType", "now", "Date", "secondsPassed", "future", "nowLabel", "getNowLabel", "custom", "date", "time", "elapsed", "units", "getTimeIntervalMeasurementUnits", "round", "_getStep", "getStep", "gradation", "steps", "getNextStep", "_getStep2", "_slicedToArray", "prevStep", "step", "nextStep", "formattedDate", "formatDateForStep", "getTimeToNextUpdate", "timeToNextUpdate", "_ref2", "_this", "format", "formatAs", "unit", "value", "formatValue", "Error", "JSON", "stringify", "amount", "Math", "abs", "getStepDenominator", "granularity", "getRoundFunction", "valueForFormatting", "sign", "getFormatter", "_ref3", "getFormattingRule", "replace", "formatNumber", "formattingRules", "_ref4", "pastOrFuture", "quantifierRules", "quantifier", "getPluralRules", "select", "other", "number", "String", "get", "put", "map", "localeData", "_iterator", "_createForOfIteratorHelperLoose", "_step", "_labelsType", "defaultLocale", "TimeAgo", "getDefaultLocale", "setDefaultLocale", "locale", "addDefaultLocale", "localeData", "defaultLocaleHasBeenSpecified", "console", "error", "addLocale", "addLocaleData", "RelativeTimeFormatPolyfill", "addLabels", "name", "labels", "getLocaleData", "getTimestamp", "input", "constructor", "Date", "isMockedDate", "getTime", "Error", "_typeof", "object", "getTimeIntervalMeasurementUnits", "allowedUnits", "nowLabel", "units", "Object", "keys", "push", "filter", "unit", "indexOf", "getNowLabel", "nowLabels", "longLabels", "future", "now", "past", "second", "current", "isStyle", "variable", "isStyleObject", "en_json_default", "import_jsx_runtime", "TimeAgo", "en_json_default", "timeAgo", "humanFormatter", "DATE_FORMATS", "date", "isHex", "query", "parseMachineReadableDate", "parsedDate", "isIso", "base", "timestamp", "seconds", "getResults", "x", "machine", "human", "parse", "arr", "y", "copy", "text", "copyAction", "getSortedFormats", "defaultFormat", "a", "b", "aMatchesType", "bMatchesType", "aIsPreferred", "bIsPreferred", "Command", "searchText", "setSearchText", "results", "label", "id", "title", "format"]
}
