{
  "version": 3,
  "sources": ["../../../../Repositories/copyq-raycast/src/view-clipboard-entries.tsx"],
  "sourcesContent": ["import {\n  getPreferenceValues,\n  openExtensionPreferences,\n  environment,\n  List,\n  Icon,\n  ActionPanel,\n  Action,\n  Clipboard,\n  Detail,\n} from \"@raycast/api\";\nimport { execSync } from \"child_process\";\n\ninterface ExtensionPreferences {\n  copyq_path: string;\n  default_tab: string;\n  max_entries: number;\n}\n\nexport default function Command() {\n  // Handles preferences of the extension\n  const preferences = getPreferenceValues<ExtensionPreferences>();\n  const copyqPath = getPreferenceValues<ExtensionPreferences>().copyq_path;\n  const maxEntries = getPreferenceValues<ExtensionPreferences>().max_entries;\n  console.log(maxEntries)\n\n  // Set the selected tab to preferences value if not passed from launchCommand\n  const selectedTab = environment.launchContext?.selectedTab ?? preferences.default_tab;\n\n  // Error handling for missing CopyQ path and CopyQ not running\n  try {\n    execSync(`${copyqPath} tab`, { encoding: \"utf8\" });\n  } catch (err) {\n    return (\n      <Detail\n        markdown={\n          \"CopyQ not found, or CopyQ server not running\\n\\nPlease check your CopyQ path in preferences, and make sure CopyQ server is running.\"\n        }\n        actions={\n          <ActionPanel>\n            <Action title=\"Open Command Preferences\" icon={Icon.Cog} onAction={openExtensionPreferences} />\n            <Action.Paste title=\"Copy Path to Clipboard\" content={copyqPath} />\n          </ActionPanel>\n        }\n      />\n    );\n  }\n\n  // Define a function to get clipboard contents and return an array of text\n  function getClipboardContents(tab: string) {\n    // Gets clipboard contents seperated by null character\n    const command = `${copyqPath} tab ${tab} 'separator(String.fromCharCode(0)); read.apply(this, [...Array(size()).keys()])'`;\n    const stdout = execSync(command, { encoding: \"utf8\" });\n    // Return the array split by null characters\n    return stdout.split(\"\\0\");\n  }\n\n  // Define a function to select clipboard contents by row\n  function selectClipboardContents(tab: string, index: number) {\n    const command = `${copyqPath} tab ${tab} select ${index}`;\n    execSync(command);\n  }\n\n  // Get clipboard contents\n  const clipboardContents = getClipboardContents(selectedTab);\n  console.log(clipboardContents.length);\n\n  return (\n    <List isShowingDetail>\n      {clipboardContents.map((text, index) => (\n        <List.Item\n          key={index}\n          title={text}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Paste\"\n                icon={Icon.Clipboard}\n                onAction={() => {\n                  selectClipboardContents(selectedTab, index);\n                  Clipboard.paste({ text });\n                }}\n              />\n            </ActionPanel>\n          }\n          detail={<List.Item.Detail markdown={text} />}\n        />\n      ))}\n    </List>\n  );\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAUO,wBACPC,EAAyB,yBA4BfC,EAAA,6BApBK,SAARJ,GAA2B,CAEhC,IAAMK,KAAc,uBAA0C,EACxDC,KAAY,uBAA0C,EAAE,WACxDC,KAAa,uBAA0C,EAAE,YAC/D,QAAQ,IAAIA,CAAU,EAGtB,IAAMC,EAAc,cAAY,eAAe,aAAeH,EAAY,YAG1E,GAAI,IACF,YAAS,GAAGC,QAAiB,CAAE,SAAU,MAAO,CAAC,CACnD,MAAE,CACA,SACE,OAAC,UACC,SACE;AAAA;AAAA,qFAEF,WACE,QAAC,eACC,oBAAC,UAAO,MAAM,2BAA2B,KAAM,OAAK,IAAK,SAAU,2BAA0B,KAC7F,OAAC,SAAO,MAAP,CAAa,MAAM,yBAAyB,QAASA,EAAW,GACnE,EAEJ,CAEJ,CAGA,SAASG,EAAqBC,EAAa,CAEzC,IAAMC,EAAU,GAAGL,SAAiBI,qFAGpC,SAFe,YAASC,EAAS,CAAE,SAAU,MAAO,CAAC,EAEvC,MAAM,IAAI,CAC1B,CAGA,SAASC,EAAwBF,EAAaG,EAAe,CAC3D,IAAMF,EAAU,GAAGL,SAAiBI,YAAcG,OAClD,YAASF,CAAO,CAClB,CAGA,IAAMG,EAAoBL,EAAqBD,CAAW,EAC1D,eAAQ,IAAIM,EAAkB,MAAM,KAGlC,OAAC,QAAK,gBAAe,GAClB,SAAAA,EAAkB,IAAI,CAACC,EAAMF,OAC5B,OAAC,OAAK,KAAL,CAEC,MAAOE,EACP,WACE,OAAC,eACC,mBAAC,UACC,MAAM,QACN,KAAM,OAAK,UACX,SAAU,IAAM,CACdH,EAAwBJ,EAAaK,CAAK,EAC1C,YAAU,MAAM,CAAE,KAAAE,CAAK,CAAC,CAC1B,EACF,EACF,EAEF,UAAQ,OAAC,OAAK,KAAK,OAAV,CAAiB,SAAUA,EAAM,GAdrCF,CAeP,CACD,EACH,CAEJ",
  "names": ["view_clipboard_entries_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_jsx_runtime", "preferences", "copyqPath", "maxEntries", "selectedTab", "getClipboardContents", "tab", "command", "selectClipboardContents", "index", "clipboardContents", "text"]
}
