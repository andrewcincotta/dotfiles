{
  "version": 3,
  "sources": ["../../../../Repositories/copyq-raycast/src/select-tab.tsx"],
  "sourcesContent": ["import {\n  openExtensionPreferences,\n  getPreferenceValues,\n  ActionPanel,\n  List,\n  Action,\n  Icon,\n  launchCommand,\n  LaunchType,\n  Detail,\n} from \"@raycast/api\";\nimport { execSync } from \"child_process\";\n\ninterface ExtensionPreferences {\n  copyq_path: string;\n}\n\nexport default function Command() {\n  // Get CopyQ path from preferences\n  const copyqPath = getPreferenceValues<ExtensionPreferences>().copyq_path;\n\n  // Error handling for missing CopyQ path and CopyQ not running\n  try {\n    execSync(`${copyqPath} tab`, { encoding: \"utf8\" });\n  } catch (err) {\n    return (\n      <Detail\n        markdown={\n          \"CopyQ not found, or CopyQ server not running\\n\\nPlease check your CopyQ path in preferences, and make sure CopyQ server is running.\"\n        }\n        actions={\n          <ActionPanel>\n            <Action title=\"Open Command Preferences\" icon={Icon.Cog} onAction={openExtensionPreferences} />\n            <Action.Paste title=\"Copy Path to Clipboard\" content={copyqPath} />\n          </ActionPanel>\n        }\n      />\n    );\n  }\n\n  // Get the list of tabs from CopyQ and return an array of strings\n  function getTabs(): string[] {\n    const command = `\"${copyqPath}\" tab`;\n    const stdout = execSync(command, { encoding: \"utf8\" });\n\n    // Format list of tabs from string to array\n    const lines = stdout.split(\"\\n\");\n    const formattedList = lines.filter((line) => line.trim() !== \"\");\n    // Remove & from items in the list\n    formattedList.forEach((item, index) => {\n      formattedList[index] = item.replace(\"&\", \"\");\n    });\n\n    return formattedList;\n  }\n\n  // Return the list of tabs\n  const tabList = getTabs();\n\n  return (\n    <List>\n      {tabList.map((text, index) => (\n        <List.Item\n          key={index}\n          title={text}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Select Tab\"\n                icon={Icon.ArrowRight}\n                onAction={async () => {\n                  await launchCommand({\n                    name: \"view-clipboard-entries\",\n                    type: LaunchType.UserInitiated,\n                    context: { selectedTab: `${text}` },\n                  });\n                }}\n              />\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAUO,wBACPC,EAAyB,yBAoBfC,EAAA,6BAdK,SAARJ,GAA2B,CAEhC,IAAMK,KAAY,uBAA0C,EAAE,WAG9D,GAAI,IACF,YAAS,GAAGA,QAAiB,CAAE,SAAU,MAAO,CAAC,CACnD,MAAE,CACA,SACE,OAAC,UACC,SACE;AAAA;AAAA,qFAEF,WACE,QAAC,eACC,oBAAC,UAAO,MAAM,2BAA2B,KAAM,OAAK,IAAK,SAAU,2BAA0B,KAC7F,OAAC,SAAO,MAAP,CAAa,MAAM,yBAAyB,QAASA,EAAW,GACnE,EAEJ,CAEJ,CAGA,SAASC,GAAoB,CAC3B,IAAMC,EAAU,IAAIF,SAKdG,KAJS,YAASD,EAAS,CAAE,SAAU,MAAO,CAAC,EAGhC,MAAM;AAAA,CAAI,EACH,OAAQE,GAASA,EAAK,KAAK,IAAM,EAAE,EAE/D,OAAAD,EAAc,QAAQ,CAACE,EAAMC,IAAU,CACrCH,EAAcG,CAAK,EAAID,EAAK,QAAQ,IAAK,EAAE,CAC7C,CAAC,EAEMF,CACT,CAGA,IAAMI,EAAUN,EAAQ,EAExB,SACE,OAAC,QACE,SAAAM,EAAQ,IAAI,CAACC,EAAMF,OAClB,OAAC,OAAK,KAAL,CAEC,MAAOE,EACP,WACE,OAAC,eACC,mBAAC,UACC,MAAM,aACN,KAAM,OAAK,WACX,SAAU,SAAY,CACpB,QAAM,iBAAc,CAClB,KAAM,yBACN,KAAM,aAAW,cACjB,QAAS,CAAE,YAAa,GAAGA,GAAO,CACpC,CAAC,CACH,EACF,EACF,GAfGF,CAiBP,CACD,EACH,CAEJ",
  "names": ["select_tab_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_jsx_runtime", "copyqPath", "getTabs", "command", "formattedList", "line", "item", "index", "tabList", "text"]
}
